
ATMega161.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a2a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00001a2a  00001ade  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f6  0080008e  0080008e  00001b0c  2**0
                  ALLOC
  3 .eeprom       0000000c  00810000  00810000  00001b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001b18  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b48  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000248  00000000  00000000  00001b88  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000063c5  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ff6  00000000  00000000  00008195  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000289c  00000000  00000000  0000918b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000051c  00000000  00000000  0000ba28  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00009547  00000000  00000000  0000bf44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000122c  00000000  00000000  0001548b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001c0  00000000  00000000  000166b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00003420  00000000  00000000  00016877  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ad c0       	rjmp	.+346    	; 0x15c <__ctors_end>
       2:	00 00       	nop
       4:	c7 c0       	rjmp	.+398    	; 0x194 <__bad_interrupt>
       6:	00 00       	nop
       8:	d5 c1       	rjmp	.+938    	; 0x3b4 <__vector_2>
       a:	00 00       	nop
       c:	c3 c0       	rjmp	.+390    	; 0x194 <__bad_interrupt>
       e:	00 00       	nop
      10:	c1 c0       	rjmp	.+386    	; 0x194 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 96 08 	jmp	0x112c	; 0x112c <__vector_5>
      18:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__vector_6>
      1c:	bb c0       	rjmp	.+374    	; 0x194 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b9 c0       	rjmp	.+370    	; 0x194 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__vector_9>
      28:	b5 c0       	rjmp	.+362    	; 0x194 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b3 c0       	rjmp	.+358    	; 0x194 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b1 c0       	rjmp	.+354    	; 0x194 <__bad_interrupt>
      32:	00 00       	nop
      34:	af c0       	rjmp	.+350    	; 0x194 <__bad_interrupt>
      36:	00 00       	nop
      38:	ad c0       	rjmp	.+346    	; 0x194 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ab c0       	rjmp	.+342    	; 0x194 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a9 c0       	rjmp	.+338    	; 0x194 <__bad_interrupt>
      42:	00 00       	nop
      44:	a7 c0       	rjmp	.+334    	; 0x194 <__bad_interrupt>
      46:	00 00       	nop
      48:	a5 c0       	rjmp	.+330    	; 0x194 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a3 c0       	rjmp	.+326    	; 0x194 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a1 c0       	rjmp	.+322    	; 0x194 <__bad_interrupt>
      52:	00 00       	nop
      54:	12 02       	muls	r17, r18
      56:	18 02       	muls	r17, r24
      58:	3d 02       	muls	r19, r29
      5a:	3d 02       	muls	r19, r29
      5c:	3d 02       	muls	r19, r29
      5e:	3d 02       	muls	r19, r29
      60:	3d 02       	muls	r19, r29
      62:	3d 02       	muls	r19, r29
      64:	3d 02       	muls	r19, r29
      66:	3d 02       	muls	r19, r29
      68:	31 02       	muls	r19, r17
      6a:	31 02       	muls	r19, r17
      6c:	3d 02       	muls	r19, r29
      6e:	3d 02       	muls	r19, r29
      70:	3d 02       	muls	r19, r29
      72:	3d 02       	muls	r19, r29
      74:	3d 02       	muls	r19, r29
      76:	3d 02       	muls	r19, r29
      78:	3d 02       	muls	r19, r29
      7a:	3d 02       	muls	r19, r29
      7c:	31 02       	muls	r19, r17
      7e:	3d 02       	muls	r19, r29
      80:	31 02       	muls	r19, r17
      82:	3d 02       	muls	r19, r29
      84:	31 02       	muls	r19, r17
      86:	3d 02       	muls	r19, r29
      88:	3d 02       	muls	r19, r29
      8a:	3d 02       	muls	r19, r29
      8c:	3d 02       	muls	r19, r29
      8e:	3d 02       	muls	r19, r29
      90:	12 02       	muls	r17, r18
      92:	3d 02       	muls	r19, r29
      94:	12 02       	muls	r17, r18
      96:	3d 02       	muls	r19, r29
      98:	3d 02       	muls	r19, r29
      9a:	3d 02       	muls	r19, r29
      9c:	3d 02       	muls	r19, r29
      9e:	3d 02       	muls	r19, r29
      a0:	3d 02       	muls	r19, r29
      a2:	3d 02       	muls	r19, r29
      a4:	3d 02       	muls	r19, r29
      a6:	3d 02       	muls	r19, r29
      a8:	3d 02       	muls	r19, r29
      aa:	3d 02       	muls	r19, r29
      ac:	3d 02       	muls	r19, r29
      ae:	3d 02       	muls	r19, r29
      b0:	3d 02       	muls	r19, r29
      b2:	3d 02       	muls	r19, r29
      b4:	3d 02       	muls	r19, r29
      b6:	3d 02       	muls	r19, r29
      b8:	3d 02       	muls	r19, r29
      ba:	3d 02       	muls	r19, r29
      bc:	3d 02       	muls	r19, r29
      be:	3d 02       	muls	r19, r29
      c0:	3d 02       	muls	r19, r29
      c2:	3d 02       	muls	r19, r29
      c4:	3d 02       	muls	r19, r29
      c6:	3d 02       	muls	r19, r29
      c8:	3d 02       	muls	r19, r29
      ca:	3d 02       	muls	r19, r29
      cc:	3d 02       	muls	r19, r29
      ce:	3d 02       	muls	r19, r29
      d0:	3d 02       	muls	r19, r29
      d2:	3d 02       	muls	r19, r29
      d4:	3d 02       	muls	r19, r29
      d6:	3d 02       	muls	r19, r29
      d8:	3d 02       	muls	r19, r29
      da:	3d 02       	muls	r19, r29
      dc:	3d 02       	muls	r19, r29
      de:	3d 02       	muls	r19, r29
      e0:	3d 02       	muls	r19, r29
      e2:	3d 02       	muls	r19, r29
      e4:	3d 02       	muls	r19, r29
      e6:	3d 02       	muls	r19, r29
      e8:	3d 02       	muls	r19, r29
      ea:	3d 02       	muls	r19, r29
      ec:	3d 02       	muls	r19, r29
      ee:	3d 02       	muls	r19, r29
      f0:	3d 02       	muls	r19, r29
      f2:	3d 02       	muls	r19, r29
      f4:	3d 02       	muls	r19, r29
      f6:	3d 02       	muls	r19, r29
      f8:	3d 02       	muls	r19, r29
      fa:	3d 02       	muls	r19, r29
      fc:	3d 02       	muls	r19, r29
      fe:	3d 02       	muls	r19, r29
     100:	3d 02       	muls	r19, r29
     102:	3d 02       	muls	r19, r29
     104:	3d 02       	muls	r19, r29
     106:	3d 02       	muls	r19, r29
     108:	3d 02       	muls	r19, r29
     10a:	3d 02       	muls	r19, r29
     10c:	3d 02       	muls	r19, r29
     10e:	3d 02       	muls	r19, r29
     110:	3d 02       	muls	r19, r29
     112:	3d 02       	muls	r19, r29
     114:	3d 02       	muls	r19, r29
     116:	3d 02       	muls	r19, r29
     118:	3d 02       	muls	r19, r29
     11a:	3d 02       	muls	r19, r29
     11c:	35 02       	muls	r19, r21
     11e:	39 02       	muls	r19, r25
     120:	5f 02       	muls	r21, r31
     122:	9b 02       	muls	r25, r27
     124:	9b 02       	muls	r25, r27
     126:	9b 02       	muls	r25, r27
     128:	9b 02       	muls	r25, r27
     12a:	9b 02       	muls	r25, r27
     12c:	9b 02       	muls	r25, r27
     12e:	9b 02       	muls	r25, r27
     130:	9b 02       	muls	r25, r27
     132:	68 02       	muls	r22, r24
     134:	68 02       	muls	r22, r24
     136:	9b 02       	muls	r25, r27
     138:	9b 02       	muls	r25, r27
     13a:	9b 02       	muls	r25, r27
     13c:	9b 02       	muls	r25, r27
     13e:	9b 02       	muls	r25, r27
     140:	9b 02       	muls	r25, r27
     142:	9b 02       	muls	r25, r27
     144:	9b 02       	muls	r25, r27
     146:	68 02       	muls	r22, r24
     148:	9b 02       	muls	r25, r27
     14a:	68 02       	muls	r22, r24
     14c:	9b 02       	muls	r25, r27
     14e:	68 02       	muls	r22, r24
     150:	9b 02       	muls	r25, r27
     152:	9b 02       	muls	r25, r27
     154:	9b 02       	muls	r25, r27
     156:	9b 02       	muls	r25, r27
     158:	9b 02       	muls	r25, r27
     15a:	75 02       	muls	r23, r21

0000015c <__ctors_end>:
     15c:	11 24       	eor	r1, r1
     15e:	1f be       	out	0x3f, r1	; 63
     160:	cf e5       	ldi	r28, 0x5F	; 95
     162:	d4 e0       	ldi	r29, 0x04	; 4
     164:	de bf       	out	0x3e, r29	; 62
     166:	cd bf       	out	0x3d, r28	; 61

00000168 <__do_copy_data>:
     168:	10 e0       	ldi	r17, 0x00	; 0
     16a:	a0 e6       	ldi	r26, 0x60	; 96
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	ea e2       	ldi	r30, 0x2A	; 42
     170:	fa e1       	ldi	r31, 0x1A	; 26
     172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x10>
     174:	05 90       	lpm	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	ae 38       	cpi	r26, 0x8E	; 142
     17a:	b1 07       	cpc	r27, r17
     17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0xc>

0000017e <__do_clear_bss>:
     17e:	21 e0       	ldi	r18, 0x01	; 1
     180:	ae e8       	ldi	r26, 0x8E	; 142
     182:	b0 e0       	ldi	r27, 0x00	; 0
     184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
     186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
     188:	a4 38       	cpi	r26, 0x84	; 132
     18a:	b2 07       	cpc	r27, r18
     18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
     18e:	88 d6       	rcall	.+3344   	; 0xea0 <main>
     190:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <_exit>

00000194 <__bad_interrupt>:
     194:	35 cf       	rjmp	.-406    	; 0x0 <__vectors>

00000196 <IncrementTimerAction>:
 *               "monoflop"-functionality
 *******************************************************FunctionHeaderEnd******/
byte IncrementTimerAction( void *UserPointer)
{
  // detect actual state of pin to set next interrupt edge
  if ( bit_is_set(ENC_PIN, ENC_BIT_1))
     196:	83 9b       	sbis	0x10, 3	; 16
     198:	04 c0       	rjmp	.+8      	; 0x1a2 <IncrementTimerAction+0xc>
  { // set falling edge
    ENC_ISC_REG &= ~_BV(ENC_ISC_BIT0);
     19a:	85 b7       	in	r24, 0x35	; 53
     19c:	8b 7f       	andi	r24, 0xFB	; 251
     19e:	85 bf       	out	0x35, r24	; 53
     1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <IncrementTimerAction+0x12>
  }
  else
  { // set rising edge
    ENC_ISC_REG |= _BV(ENC_ISC_BIT0);
     1a2:	85 b7       	in	r24, 0x35	; 53
     1a4:	84 60       	ori	r24, 0x04	; 4
     1a6:	85 bf       	out	0x35, r24	; 53
  }

  // clear pending interrupt
  ENC_EIRF_REG |= _BV(ENC_EIRF_BIT);
     1a8:	8a b7       	in	r24, 0x3a	; 58
     1aa:	80 68       	ori	r24, 0x80	; 128
     1ac:	8a bf       	out	0x3a, r24	; 58
  // set interrupt activ
  ENC_EIRE_REG |= _BV(ENC_EIRE_BIT);
     1ae:	8b b7       	in	r24, 0x3b	; 59
     1b0:	80 68       	ori	r24, 0x80	; 128
     1b2:	8b bf       	out	0x3b, r24	; 59

  return 0;
}
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	08 95       	ret

000001b8 <LEDTimerAction>:
byte LEDTimerAction( void *UserPointer)
{
/******************************************************************************/
// mismatching speed
/******************************************************************************/
  if (bThrState == THR_STATE_CONNECTED)
     1b8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <bThrState>
     1bc:	81 30       	cpi	r24, 0x01	; 1
     1be:	e9 f4       	brne	.+58     	; 0x1fa <LEDTimerAction+0x42>
  {
    if (  (bFrediVersion == FREDI_VERSION_ANALOG)
     1c0:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <bFrediVersion>
     1c4:	83 30       	cpi	r24, 0x03	; 3
     1c6:	b1 f4       	brne	.+44     	; 0x1f4 <LEDTimerAction+0x3c>
          && (!fSetSpeed))                         // if analog value does not correspond, show blinking
     1c8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <fSetSpeed>
     1cc:	81 11       	cpse	r24, r1
     1ce:	12 c0       	rjmp	.+36     	; 0x1f4 <LEDTimerAction+0x3c>
    {
			if (rSlot.spd > potAdcSpeedValue)         // speed is higher than position of poti
     1d0:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <potAdcSpeedValue>
     1d4:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <rSlot+0x5>
     1d8:	89 17       	cp	r24, r25
     1da:	30 f4       	brcc	.+12     	; 0x1e8 <LEDTimerAction+0x30>
			{
				// -> speed up (turn right)
				if (bit_is_clear(LED_PORT, LED_GREEN_R))
     1dc:	aa 99       	sbic	0x15, 2	; 21
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <LEDTimerAction+0x2c>
				{
					LED_PORT |= _BV(LED_GREEN_R); 
     1e0:	aa 9a       	sbi	0x15, 2	; 21
     1e2:	26 c0       	rjmp	.+76     	; 0x230 <LEDTimerAction+0x78>
				}
				else
				{
					LED_PORT &= ~_BV(LED_GREEN_R); 
     1e4:	aa 98       	cbi	0x15, 2	; 21
     1e6:	24 c0       	rjmp	.+72     	; 0x230 <LEDTimerAction+0x78>
				}
			}
			else                                      // speed is lower than position of poti
			{
				// -> speed down (turn left)             
				if (bit_is_clear(LED_PORT, LED_GREEN_L))
     1e8:	ab 99       	sbic	0x15, 3	; 21
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <LEDTimerAction+0x38>
				{
					LED_PORT |= _BV(LED_GREEN_L); 
     1ec:	ab 9a       	sbi	0x15, 3	; 21
     1ee:	20 c0       	rjmp	.+64     	; 0x230 <LEDTimerAction+0x78>
				}
				else
				{
					LED_PORT &= ~_BV(LED_GREEN_L); 
     1f0:	ab 98       	cbi	0x15, 3	; 21
     1f2:	1e c0       	rjmp	.+60     	; 0x230 <LEDTimerAction+0x78>
				}
			}
    }
    else                                        // no use for blinking anymore, so stop timer
    {
   		bLEDReload = LED_ON;
     1f4:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <bLEDReload>
     1f8:	1b c0       	rjmp	.+54     	; 0x230 <LEDTimerAction+0x78>
    }
  }
/******************************************************************************/
// Selftest
/******************************************************************************/
  else if (bThrState >= THR_STATE_SELFTEST)     // while selftest is active show rotating LEDs
     1fa:	84 36       	cpi	r24, 0x64	; 100
     1fc:	80 f0       	brcs	.+32     	; 0x21e <LEDTimerAction+0x66>
  {
    // -> fast rotation shows selftest active
    if (bit_is_set(LED_PORT, LED_GREEN_R))      // -> slow rotation shows selftest done
     1fe:	aa 9b       	sbis	0x15, 2	; 21
     200:	04 c0       	rjmp	.+8      	; 0x20a <LEDTimerAction+0x52>
    {
      LED_PORT &= ~_BV(LED_GREEN_R);
     202:	aa 98       	cbi	0x15, 2	; 21
      LED_PORT |=  _BV(LED_GREEN_L); 
     204:	ab 9a       	sbi	0x15, 3	; 21
      LED_PORT &= ~_BV(LED_RED); 
     206:	ac 98       	cbi	0x15, 4	; 21
     208:	13 c0       	rjmp	.+38     	; 0x230 <LEDTimerAction+0x78>
    }
    else if (bit_is_set(LED_PORT, LED_GREEN_L))
     20a:	ab 9b       	sbis	0x15, 3	; 21
     20c:	04 c0       	rjmp	.+8      	; 0x216 <LEDTimerAction+0x5e>
    {
      LED_PORT &= ~_BV(LED_GREEN_R);
     20e:	aa 98       	cbi	0x15, 2	; 21
      LED_PORT &= ~_BV(LED_GREEN_L); 
     210:	ab 98       	cbi	0x15, 3	; 21
      LED_PORT |=  _BV(LED_RED);
     212:	ac 9a       	sbi	0x15, 4	; 21
     214:	0d c0       	rjmp	.+26     	; 0x230 <LEDTimerAction+0x78>
    }
    else
    {
      LED_PORT |=  _BV(LED_GREEN_R);
     216:	aa 9a       	sbi	0x15, 2	; 21
      LED_PORT &= ~_BV(LED_GREEN_L); 
     218:	ab 98       	cbi	0x15, 3	; 21
      LED_PORT &= ~_BV(LED_RED); 
     21a:	ac 98       	cbi	0x15, 4	; 21
     21c:	09 c0       	rjmp	.+18     	; 0x230 <LEDTimerAction+0x78>
/******************************************************************************/
// dispatching
/******************************************************************************/
  else  // show alternating blinking between red and green 
  {
    if ( bit_is_set(LED_PORT, LED_GREEN_L))
     21e:	ab 9b       	sbis	0x15, 3	; 21
     220:	04 c0       	rjmp	.+8      	; 0x22a <LEDTimerAction+0x72>
    {
      LED_PORT |=  _BV(LED_RED); 
     222:	ac 9a       	sbi	0x15, 4	; 21
      LED_PORT &= ~_BV(LED_GREEN_R) ; 
     224:	aa 98       	cbi	0x15, 2	; 21
      LED_PORT &= ~_BV(LED_GREEN_L) ; 
     226:	ab 98       	cbi	0x15, 3	; 21
     228:	03 c0       	rjmp	.+6      	; 0x230 <LEDTimerAction+0x78>
    }
    else
    {
      LED_PORT &= ~_BV(LED_RED); 
     22a:	ac 98       	cbi	0x15, 4	; 21
      LED_PORT |=  _BV(LED_GREEN_R) ; 
     22c:	aa 9a       	sbi	0x15, 2	; 21
      LED_PORT |=  _BV(LED_GREEN_L) ; 
     22e:	ab 9a       	sbi	0x15, 3	; 21
    }
  }
  return bLEDReload;
}
     230:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <bLEDReload>
     234:	08 95       	ret

00000236 <ReleaseStopTimerAction>:
}


byte ReleaseStopTimerAction( void *UserPointer)
{
	bStopPressed = FALSE;
     236:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <bStopPressed>
	return 0;
}
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	08 95       	ret

0000023e <KeyTimerAction>:
  byte bActDirSwitch;

/******************************************************************************/
//  keys
/******************************************************************************/
  bActKey = KEYPIN_PIN & KEYPIN_ALL ; // 0 means pressed, 1 means released
     23e:	86 b3       	in	r24, 0x16	; 22
     240:	8f 73       	andi	r24, 0x3F	; 63

  if (bActKey != bLastKey)
     242:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <bLastKey.2097>
     246:	89 17       	cp	r24, r25
     248:	99 f0       	breq	.+38     	; 0x270 <KeyTimerAction+0x32>
  {
    bEvent      |= EVENT_KEY;
     24a:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <bEvent>
     24e:	91 60       	ori	r25, 0x01	; 1
     250:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <bEvent>
    bLastKey     = bActKey;
     254:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <bLastKey.2097>

    bCurrentKey &= ~KEYPIN_ALL;               // clear all possible keys
     258:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <bCurrentKey>
     25c:	90 7c       	andi	r25, 0xC0	; 192
     25e:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <bCurrentKey>
    bCurrentKey |= (~bActKey) & KEYPIN_ALL;   // set relevant keys
     262:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <bCurrentKey>
     266:	80 95       	com	r24
     268:	8f 73       	andi	r24, 0x3F	; 63
     26a:	89 2b       	or	r24, r25
     26c:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <bCurrentKey>

/******************************************************************************/
//  Stop button or increment button
/******************************************************************************/

  bActEncSwitch = ENC_PIN & _BV(ENC_SWITCH);
     270:	80 b3       	in	r24, 0x10	; 16
     272:	80 72       	andi	r24, 0x20	; 32

  if (bActEncSwitch != bLastEncSwitch)  // Change from 0->1 and 1->0
     274:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <bLastEncSwitch.2095>
     278:	89 17       	cp	r24, r25
     27a:	a1 f0       	breq	.+40     	; 0x2a4 <KeyTimerAction+0x66>
  {
    bEvent        |= EVENT_KEY;
     27c:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <bEvent>
     280:	91 60       	ori	r25, 0x01	; 1
     282:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <bEvent>
    bLastEncSwitch = bActEncSwitch;
     286:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <bLastEncSwitch.2095>

    if (bActEncSwitch)                          // 0 means switch is pressed, 1 key is releaseds
     28a:	88 23       	and	r24, r24
     28c:	31 f0       	breq	.+12     	; 0x29a <KeyTimerAction+0x5c>
    {
      bCurrentKey &= ~Key_Stop;                 // released key stop
     28e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <bCurrentKey>
     292:	8f 7b       	andi	r24, 0xBF	; 191
     294:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <bCurrentKey>
     298:	05 c0       	rjmp	.+10     	; 0x2a4 <KeyTimerAction+0x66>
    }
    else
    {
      bCurrentKey |= Key_Stop;                  // pressed key stop
     29a:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <bCurrentKey>
     29e:	80 64       	ori	r24, 0x40	; 64
     2a0:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <bCurrentKey>
/******************************************************************************/
//  direction button
/******************************************************************************/

  if (  (bFrediVersion == FREDI_VERSION_INCREMENT_SWITCH)
     || (bFrediVersion == FREDI_VERSION_ANALOG          ))
     2a4:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <bFrediVersion>

/******************************************************************************/
//  direction button
/******************************************************************************/

  if (  (bFrediVersion == FREDI_VERSION_INCREMENT_SWITCH)
     2a8:	9e ef       	ldi	r25, 0xFE	; 254
     2aa:	98 0f       	add	r25, r24
     2ac:	92 30       	cpi	r25, 0x02	; 2
     2ae:	d0 f4       	brcc	.+52     	; 0x2e4 <KeyTimerAction+0xa6>
     || (bFrediVersion == FREDI_VERSION_ANALOG          ))
  {
    bActDirSwitch = DIRSWITCH_PIN & _BV(DIRSWITCH);
     2b0:	93 b3       	in	r25, 0x13	; 19
     2b2:	92 70       	andi	r25, 0x02	; 2

    if (bActDirSwitch != bLastDirSwitch)         // change of direction
     2b4:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <bLastDirSwitch.2099>
     2b8:	92 17       	cp	r25, r18
     2ba:	a1 f0       	breq	.+40     	; 0x2e4 <KeyTimerAction+0xa6>
    {
      bEvent        |= EVENT_KEY;
     2bc:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <bEvent>
     2c0:	21 60       	ori	r18, 0x01	; 1
     2c2:	20 93 95 00 	sts	0x0095, r18	; 0x800095 <bEvent>
      bLastDirSwitch = bActDirSwitch;
     2c6:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <bLastDirSwitch.2099>

      if (bActDirSwitch)
     2ca:	99 23       	and	r25, r25
     2cc:	31 f0       	breq	.+12     	; 0x2da <KeyTimerAction+0x9c>
      {
        bCurrentKey &= ~Key_Dir;
     2ce:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <bCurrentKey>
     2d2:	9f 77       	andi	r25, 0x7F	; 127
     2d4:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <bCurrentKey>
     2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <KeyTimerAction+0xa6>
      }
      else
      {
        bCurrentKey |= Key_Dir;
     2da:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <bCurrentKey>
     2de:	90 68       	ori	r25, 0x80	; 128
     2e0:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <bCurrentKey>

/******************************************************************************/
//  poti
/******************************************************************************/

  if (bFrediVersion == FREDI_VERSION_ANALOG)
     2e4:	83 30       	cpi	r24, 0x03	; 3
  {
    potAdcTimerAction();
     2e6:	09 f4       	brne	.+2      	; 0x2ea <KeyTimerAction+0xac>
  }

/******************************************************************************/

  return KEY_POLL_TIME ;
}
     2e8:	d8 d6       	rcall	.+3504   	; 0x109a <potAdcTimerAction>
     2ea:	8a e0       	ldi	r24, 0x0A	; 10
     2ec:	08 95       	ret

000002ee <initKeys>:
 * ARGUMENTS   : none
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void initKeys( void )
{
     2ee:	0f 93       	push	r16
  /***************************************/
  //  init encoder or poti
  /***************************************/

  if (bFrediVersion == FREDI_VERSION_ANALOG)
     2f0:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <bFrediVersion>
     2f4:	83 30       	cpi	r24, 0x03	; 3
  {
    potAdcInit();
     2f6:	11 f4       	brne	.+4      	; 0x2fc <initKeys+0xe>
  }
  else // FREDI_VERSION_INCREMENT or FREDI_VERSION_INCREMENT_SWITCH
  {
    potAdcPowerOff();
     2f8:	c5 d6       	rcall	.+3466   	; 0x1084 <potAdcInit>
     2fa:	2f c0       	rjmp	.+94     	; 0x35a <initKeys+0x6c>
		bStopPressed = FALSE;
     2fc:	c1 d6       	rcall	.+3458   	; 0x1080 <potAdcPowerOff>
     2fe:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <bStopPressed>
		addTimerAction(&ReleaseStopTimer, 0, ReleaseStopTimerAction, 0, TIMER_SLOW ) ;
     302:	00 e0       	ldi	r16, 0x00	; 0
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	4b e1       	ldi	r20, 0x1B	; 27
     30a:	51 e0       	ldi	r21, 0x01	; 1
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	81 e6       	ldi	r24, 0x61	; 97
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <addTimerAction>
    // set data direction register for encoder
    ENC_DDR &= ~( _BV(ENC_BIT_0) | _BV(ENC_BIT_1) ) ;
     316:	81 b3       	in	r24, 0x11	; 17
     318:	83 7f       	andi	r24, 0xF3	; 243

    // Enable the pull-ups
    ENC_PORT |= ( _BV(ENC_BIT_0) | _BV(ENC_BIT_1) ) ;
     31a:	81 bb       	out	0x11, r24	; 17
     31c:	82 b3       	in	r24, 0x12	; 18
     31e:	8c 60       	ori	r24, 0x0C	; 12

    addTimerAction(&IncrementTimer, 0, IncrementTimerAction, 0, TIMER_FAST) ;
     320:	82 bb       	out	0x12, r24	; 18
     322:	01 e0       	ldi	r16, 0x01	; 1
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	4b ec       	ldi	r20, 0xCB	; 203
     32a:	50 e0       	ldi	r21, 0x00	; 0
     32c:	60 e0       	ldi	r22, 0x00	; 0
     32e:	80 eb       	ldi	r24, 0xB0	; 176
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <addTimerAction>

    // detect actual state of pin to set next interrupt edge
    ENC_ISC_REG |= _BV(ENC_ISC_BIT1);
     336:	85 b7       	in	r24, 0x35	; 53
     338:	88 60       	ori	r24, 0x08	; 8

    if ( bit_is_set(ENC_PIN, ENC_BIT_1))
     33a:	85 bf       	out	0x35, r24	; 53
     33c:	83 9b       	sbis	0x10, 3	; 16
    { // set falling edge
      ENC_ISC_REG &= ~_BV(ENC_ISC_BIT0);
     33e:	04 c0       	rjmp	.+8      	; 0x348 <initKeys+0x5a>
     340:	85 b7       	in	r24, 0x35	; 53
     342:	8b 7f       	andi	r24, 0xFB	; 251
     344:	85 bf       	out	0x35, r24	; 53
    }
    else
    { // set rising edge
      ENC_ISC_REG |= _BV(ENC_ISC_BIT0);
     346:	03 c0       	rjmp	.+6      	; 0x34e <initKeys+0x60>
     348:	85 b7       	in	r24, 0x35	; 53
     34a:	84 60       	ori	r24, 0x04	; 4
    }

    // clear pending interrupt
    ENC_EIRF_REG |= _BV(ENC_EIRF_BIT);
     34c:	85 bf       	out	0x35, r24	; 53
     34e:	8a b7       	in	r24, 0x3a	; 58
     350:	80 68       	ori	r24, 0x80	; 128
    // set interrupt activ
    ENC_EIRE_REG |= _BV(ENC_EIRE_BIT);
     352:	8a bf       	out	0x3a, r24	; 58
     354:	8b b7       	in	r24, 0x3b	; 59
     356:	80 68       	ori	r24, 0x80	; 128
  /***************************************/
  //  init keys
  /***************************************/

  // set data direction register for encoder
  ENC_DDR &= ~( _BV(ENC_SWITCH) ) ;
     358:	8b bf       	out	0x3b, r24	; 59

  // Enable the pull-ups
  ENC_PORT |= ( _BV(ENC_SWITCH) ) ;
     35a:	8d 98       	cbi	0x11, 5	; 17

  // set data direction register for encoder
  ENC_DDR &= ~( _BV(ENC_SWITCH) ) ;
     35c:	95 9a       	sbi	0x12, 5	; 18

  // Enable the pull-ups
  ENC_PORT |= ( _BV(ENC_SWITCH) ) ;
     35e:	8d 98       	cbi	0x11, 5	; 17

  // set data direction register for keys
  KEYPIN_DDR  &= ~KEYPIN_ALL ;
     360:	95 9a       	sbi	0x12, 5	; 18
     362:	87 b3       	in	r24, 0x17	; 23
     364:	80 7c       	andi	r24, 0xC0	; 192
  // Enable the pull-ups
  KEYPIN_PORT |=  KEYPIN_ALL ;
     366:	87 bb       	out	0x17, r24	; 23
     368:	88 b3       	in	r24, 0x18	; 24
     36a:	8f 63       	ori	r24, 0x3F	; 63

  if (  (bFrediVersion == FREDI_VERSION_INCREMENT_SWITCH)
     36c:	88 bb       	out	0x18, r24	; 24
     36e:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <bFrediVersion>
     372:	82 50       	subi	r24, 0x02	; 2
     374:	82 30       	cpi	r24, 0x02	; 2
        || (bFrediVersion == FREDI_VERSION_ANALOG          ))
  {
    // set data direction register for direction switch
    DIRSWITCH_DDR   &= ~( _BV(DIRSWITCH) );
     376:	10 f4       	brcc	.+4      	; 0x37c <initKeys+0x8e>
    // Enable the pull-up
    DIRSWITCH_PORT  |=  ( _BV(DIRSWITCH) );
     378:	a1 98       	cbi	0x14, 1	; 20
  }

  addTimerAction(&KeyTimer, KEY_POLL_TIME, KeyTimerAction, 0, TIMER_FAST ) ;
     37a:	a9 9a       	sbi	0x15, 1	; 21
     37c:	01 e0       	ldi	r16, 0x01	; 1
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	4f e1       	ldi	r20, 0x1F	; 31
     384:	51 e0       	ldi	r21, 0x01	; 1
     386:	6a e0       	ldi	r22, 0x0A	; 10
     388:	8e eb       	ldi	r24, 0xBE	; 190
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <addTimerAction>
  /***************************************/
  //  init LEDs
  /***************************************/

  LED_DDR  |=  _BV(LED_GREEN_L); 
  LED_PORT &= ~_BV(LED_GREEN_L); 
     390:	a3 9a       	sbi	0x14, 3	; 20

  LED_DDR  |=  _BV(LED_GREEN_R); 
     392:	ab 98       	cbi	0x15, 3	; 21
  LED_PORT &= ~_BV(LED_GREEN_R); 
     394:	a2 9a       	sbi	0x14, 2	; 20

  LED_DDR  |=  _BV(LED_RED); 
     396:	aa 98       	cbi	0x15, 2	; 21
  LED_PORT |= _BV(LED_RED);       // set red LED at startup
     398:	a4 9a       	sbi	0x14, 4	; 20

  addTimerAction(&LEDTimer, LED_BLINK_TIME, LEDTimerAction, 0, TIMER_SLOW ) ;
     39a:	ac 9a       	sbi	0x15, 4	; 21
     39c:	00 e0       	ldi	r16, 0x00	; 0
     39e:	20 e0       	ldi	r18, 0x00	; 0
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	4c ed       	ldi	r20, 0xDC	; 220
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	61 e0       	ldi	r22, 0x01	; 1
     3a8:	87 eb       	ldi	r24, 0xB7	; 183
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <addTimerAction>
}
     3b0:	0f 91       	pop	r16
     3b2:	08 95       	ret

000003b4 <__vector_2>:
 * ARGUMENTS   : none
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
ISR(ENC_INT_vect)
{
     3b4:	1f 92       	push	r1
     3b6:	0f 92       	push	r0
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	0f 92       	push	r0
     3bc:	11 24       	eor	r1, r1
     3be:	8f 93       	push	r24
  // set interrupt inactiv while debouncing is active
  ENC_EIRE_REG &= ~_BV(ENC_EIRE_BIT);
     3c0:	8b b7       	in	r24, 0x3b	; 59
     3c2:	8f 77       	andi	r24, 0x7F	; 127
     3c4:	8b bf       	out	0x3b, r24	; 59

  if ( bit_is_set(ENC_ISC_REG, ENC_ISC_BIT0))
     3c6:	05 b6       	in	r0, 0x35	; 53
     3c8:	02 fe       	sbrs	r0, 2
     3ca:	0e c0       	rjmp	.+28     	; 0x3e8 <__vector_2+0x34>
  { // falling edge
    if ( bit_is_set(ENC_PIN, ENC_BIT_0))
     3cc:	82 9b       	sbis	0x10, 2	; 16
     3ce:	06 c0       	rjmp	.+12     	; 0x3dc <__vector_2+0x28>
    { //++
      sEncDir--;
     3d0:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <sEncDir>
     3d4:	81 50       	subi	r24, 0x01	; 1
     3d6:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <sEncDir>
     3da:	13 c0       	rjmp	.+38     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
    }
    else
    { //--
      sEncDir++;
     3dc:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <sEncDir>
     3e0:	8f 5f       	subi	r24, 0xFF	; 255
     3e2:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <sEncDir>
     3e6:	0d c0       	rjmp	.+26     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
    }
  }
  else
  { // rising edge
    if ( bit_is_set(ENC_PIN, ENC_BIT_0))
     3e8:	82 9b       	sbis	0x10, 2	; 16
     3ea:	06 c0       	rjmp	.+12     	; 0x3f8 <__vector_2+0x44>
    { //--
      sEncDir++;
     3ec:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <sEncDir>
     3f0:	8f 5f       	subi	r24, 0xFF	; 255
     3f2:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <sEncDir>
     3f6:	05 c0       	rjmp	.+10     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
    }
    else
    { //++
      sEncDir--;
     3f8:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <sEncDir>
     3fc:	81 50       	subi	r24, 0x01	; 1
     3fe:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <sEncDir>
    }
  }
}
     402:	8f 91       	pop	r24
     404:	0f 90       	pop	r0
     406:	0f be       	out	0x3f, r0	; 63
     408:	0f 90       	pop	r0
     40a:	1f 90       	pop	r1
     40c:	18 95       	reti

0000040e <vSetState>:
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void vSetState( byte bState )
{
  bThrState = bState;
     40e:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <bThrState>

  switch (bThrState)
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	86 36       	cpi	r24, 0x66	; 102
     416:	91 05       	cpc	r25, r1
     418:	80 f5       	brcc	.+96     	; 0x47a <__stack+0x1b>
     41a:	fc 01       	movw	r30, r24
     41c:	e6 5d       	subi	r30, 0xD6	; 214
     41e:	ff 4f       	sbci	r31, 0xFF	; 255
     420:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__tablejump2__>
  {
  case THR_STATE_UNCONNECTED:       // show red LED
  case THR_STATE_INIT:
  case THR_STATE_UNCONNECTED_WRITE:
    LED_PORT &= ~_BV(LED_GREEN_R);
     424:	aa 98       	cbi	0x15, 2	; 21
    LED_PORT &= ~_BV(LED_GREEN_L); 
     426:	ab 98       	cbi	0x15, 3	; 21
    LED_PORT |=  _BV(LED_RED); 
     428:	ac 9a       	sbi	0x15, 4	; 21
    bLEDReload = LED_ON;
     42a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <bLEDReload>
    break;
     42e:	28 c0       	rjmp	.+80     	; 0x480 <__stack+0x21>

  case THR_STATE_CONNECTED:         // show direction at state connected
    if (rSlot.dirf & 0x20)
     430:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <rSlot+0x6>
     434:	85 ff       	sbrs	r24, 5
     436:	03 c0       	rjmp	.+6      	; 0x43e <vSetState+0x30>
    {
      LED_PORT &= ~_BV(LED_GREEN_R);
     438:	aa 98       	cbi	0x15, 2	; 21
      LED_PORT |=  _BV(LED_GREEN_L); 
     43a:	ab 9a       	sbi	0x15, 3	; 21
     43c:	02 c0       	rjmp	.+4      	; 0x442 <vSetState+0x34>
    }
    else
    {
      LED_PORT &= ~_BV(LED_GREEN_L); 
     43e:	ab 98       	cbi	0x15, 3	; 21
      LED_PORT |=  _BV(LED_GREEN_R);
     440:	aa 9a       	sbi	0x15, 2	; 21
    }
    LED_PORT &= ~_BV(LED_RED);
     442:	ac 98       	cbi	0x15, 4	; 21

    if (  (bFrediVersion == FREDI_VERSION_ANALOG)
     444:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <bFrediVersion>
     448:	83 30       	cpi	r24, 0x03	; 3
     44a:	41 f4       	brne	.+16     	; 0x45c <vSetState+0x4e>
          && (!fSetSpeed))                 // if analog value does not correspond, show blinking
     44c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <fSetSpeed>
     450:	81 11       	cpse	r24, r1
     452:	04 c0       	rjmp	.+8      	; 0x45c <vSetState+0x4e>
    {
      bLEDReload = LED_BLINK_TIME;
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <bLEDReload>
     45a:	12 c0       	rjmp	.+36     	; 0x480 <__stack+0x21>
    }
    else
    {
      bLEDReload = LED_ON;
     45c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <bLEDReload>
     460:	0f c0       	rjmp	.+30     	; 0x480 <__stack+0x21>
  case THR_STATE_ACQUIRE_LOCO_GET:
  case THR_STATE_ACQUIRE_LOCO_WRITE:
  case THR_STATE_RECONNECT_GET_SLOT:
  case THR_STATE_RECONNECT_NULL_MOVE:
  case THR_STATE_RECONNECT_WRITE:
    bLEDReload = LED_BLINK_TIME;
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <bLEDReload>
    break;
     468:	0b c0       	rjmp	.+22     	; 0x480 <__stack+0x21>
  case THR_STATE_SELFTEST:
    bLEDReload = LED_SELFTEST_TIME;
     46a:	84 e0       	ldi	r24, 0x04	; 4
     46c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <bLEDReload>
    break;
     470:	07 c0       	rjmp	.+14     	; 0x480 <__stack+0x21>
  case THR_STATE_SELFTEST_DONE:
    bLEDReload = LED_SELFTEST_DONE_TIME;
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <bLEDReload>
    break;
     478:	03 c0       	rjmp	.+6      	; 0x480 <__stack+0x21>
  default:                                 // not allowed state, show by slow blinking
    bLEDReload = (LED_BLINK_TIME*10);
     47a:	8a e0       	ldi	r24, 0x0A	; 10
     47c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <bLEDReload>
    break;
  }

  resetTimerAction(&LEDTimer, bLEDReload);
     480:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <bLEDReload>
     484:	87 eb       	ldi	r24, 0xB7	; 183
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <resetTimerAction>
     48c:	08 95       	ret

0000048e <MessageTimerAction>:
 *******************************************************************************
 * ARGUMENTS   : void *UserPointer
 * RETURN VALUE: byte
 *******************************************************FunctionHeaderEnd******/
byte MessageTimerAction( void *UserPointer)
{
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
     496:	60 97       	sbiw	r28, 0x10	; 16
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	f8 94       	cli
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	cd bf       	out	0x3d, r28	; 61
  byte bRetVal = MESSAGE_TIME;

  switch (bThrState)
     4a2:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <bThrState>
     4a6:	8e 2f       	mov	r24, r30
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	fc 01       	movw	r30, r24
     4ac:	31 97       	sbiw	r30, 0x01	; 1
     4ae:	ee 31       	cpi	r30, 0x1E	; 30
     4b0:	f1 05       	cpc	r31, r1
     4b2:	08 f0       	brcs	.+2      	; 0x4b6 <MessageTimerAction+0x28>
     4b4:	40 c0       	rjmp	.+128    	; 0x536 <MessageTimerAction+0xa8>
     4b6:	e0 57       	subi	r30, 0x70	; 112
     4b8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ba:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__tablejump2__>
  {
  case THR_STATE_CONNECTED:
    sendLocoNet4BytePacket(OPC_LOCO_SPD,rSlot.slot,rSlot.spd);
     4be:	e7 ec       	ldi	r30, 0xC7	; 199
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	45 81       	ldd	r20, Z+5	; 0x05
     4c4:	62 81       	ldd	r22, Z+2	; 0x02
     4c6:	80 ea       	ldi	r24, 0xA0	; 160
     4c8:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <sendLocoNet4BytePacket>
    bRetVal = SPEED_TIME;
     4cc:	8a ef       	ldi	r24, 0xFA	; 250
    break;
     4ce:	36 c0       	rjmp	.+108    	; 0x53c <MessageTimerAction+0xae>
  case THR_STATE_ACQUIRE_LOCO_GET:
  case THR_STATE_ACQUIRE_LOCO_WRITE:
  case THR_STATE_RECONNECT_GET_SLOT:
  case THR_STATE_RECONNECT_WRITE:
  case THR_STATE_RECONNECT_NULL_MOVE:
    vSetState(THR_STATE_RECONNECT_GET_SLOT);
     4d0:	84 e1       	ldi	r24, 0x14	; 20
     4d2:	9d df       	rcall	.-198    	; 0x40e <vSetState>
    if (sendLocoNet4BytePacket(OPC_LOCO_ADR, rSlot.adr2, rSlot.adr) != LN_DONE)
     4d4:	e7 ec       	ldi	r30, 0xC7	; 199
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	44 81       	ldd	r20, Z+4	; 0x04
     4da:	61 85       	ldd	r22, Z+9	; 0x09
     4dc:	8f eb       	ldi	r24, 0xBF	; 191
     4de:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <sendLocoNet4BytePacket>
     4e2:	83 30       	cpi	r24, 0x03	; 3
     4e4:	51 f5       	brne	.+84     	; 0x53a <MessageTimerAction+0xac>
    {
      bRetVal = MESSAGE_TIME;
    }
    else
    {
      bRetVal = RESPONSE_TIME;
     4e6:	84 e1       	ldi	r24, 0x14	; 20
     4e8:	29 c0       	rjmp	.+82     	; 0x53c <MessageTimerAction+0xae>
    break;
  case THR_STATE_UNCONNECTED_WRITE:
    {
      lnMsg SendPacket ;

      SendPacket.sd.command   = OPC_WR_SL_DATA  ; //opcode
     4ea:	8f ee       	ldi	r24, 0xEF	; 239
     4ec:	89 83       	std	Y+1, r24	; 0x01
      SendPacket.sd.mesg_size = 14              ; // length
     4ee:	8e e0       	ldi	r24, 0x0E	; 14
     4f0:	8a 83       	std	Y+2, r24	; 0x02
      SendPacket.sd.slot      = rSlot.slot      ; // slot    2    
     4f2:	e7 ec       	ldi	r30, 0xC7	; 199
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	82 81       	ldd	r24, Z+2	; 0x02
     4f8:	8b 83       	std	Y+3, r24	; 0x03
      SendPacket.sd.stat      = rSlot.stat      ; // stat    3    
     4fa:	83 81       	ldd	r24, Z+3	; 0x03
     4fc:	8c 83       	std	Y+4, r24	; 0x04
      SendPacket.sd.adr       = rSlot.adr       ; // adr     4    
     4fe:	84 81       	ldd	r24, Z+4	; 0x04
     500:	8d 83       	std	Y+5, r24	; 0x05
      SendPacket.sd.spd       = rSlot.spd       ; // spd     5    
     502:	85 81       	ldd	r24, Z+5	; 0x05
     504:	8e 83       	std	Y+6, r24	; 0x06
      SendPacket.sd.dirf      = rSlot.dirf      ; // dirf    6    
     506:	86 81       	ldd	r24, Z+6	; 0x06
     508:	8f 83       	std	Y+7, r24	; 0x07
      SendPacket.sd.trk       = rSlot.trk       ; // trk     7    
     50a:	87 81       	ldd	r24, Z+7	; 0x07
     50c:	88 87       	std	Y+8, r24	; 0x08
      SendPacket.sd.ss2       = rSlot.ss2       ; // ss2     8    
     50e:	80 85       	ldd	r24, Z+8	; 0x08
     510:	89 87       	std	Y+9, r24	; 0x09
      SendPacket.sd.adr2      = rSlot.adr2      ; // adr2    9    
     512:	81 85       	ldd	r24, Z+9	; 0x09
     514:	8a 87       	std	Y+10, r24	; 0x0a
      SendPacket.sd.snd       = rSlot.snd       ; // snd    10    
     516:	82 85       	ldd	r24, Z+10	; 0x0a
     518:	8b 87       	std	Y+11, r24	; 0x0b
      SendPacket.sd.id1       = rSlot.id1       ; // id1    11   
     51a:	83 85       	ldd	r24, Z+11	; 0x0b
     51c:	8c 87       	std	Y+12, r24	; 0x0c
      SendPacket.sd.id2       = rSlot.id2       ; // id2    12   
     51e:	84 85       	ldd	r24, Z+12	; 0x0c
     520:	8d 87       	std	Y+13, r24	; 0x0d

      LN_STATUS status = sendLocoNetPacket( &SendPacket );
     522:	ce 01       	movw	r24, r28
     524:	01 96       	adiw	r24, 0x01	; 1
     526:	0e 94 9c 0c 	call	0x1938	; 0x1938 <sendLocoNetPacket>

      if (status != LN_DONE)
     52a:	83 30       	cpi	r24, 0x03	; 3
     52c:	11 f4       	brne	.+4      	; 0x532 <MessageTimerAction+0xa4>
      {
        bRetVal = MESSAGE_TIME;
      }
      else
      {
        bRetVal = RESPONSE_TIME;
     52e:	84 e1       	ldi	r24, 0x14	; 20
     530:	05 c0       	rjmp	.+10     	; 0x53c <MessageTimerAction+0xae>

      LN_STATUS status = sendLocoNetPacket( &SendPacket );

      if (status != LN_DONE)
      {
        bRetVal = MESSAGE_TIME;
     532:	83 e0       	ldi	r24, 0x03	; 3
      else
      {
        bRetVal = RESPONSE_TIME;
      }
    }
    break;
     534:	03 c0       	rjmp	.+6      	; 0x53c <MessageTimerAction+0xae>
  case THR_STATE_INIT:          // stop timer, there is nothing to do
  case THR_STATE_UNCONNECTED:
  default:
    bRetVal = 0;
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	01 c0       	rjmp	.+2      	; 0x53c <MessageTimerAction+0xae>
  case THR_STATE_RECONNECT_WRITE:
  case THR_STATE_RECONNECT_NULL_MOVE:
    vSetState(THR_STATE_RECONNECT_GET_SLOT);
    if (sendLocoNet4BytePacket(OPC_LOCO_ADR, rSlot.adr2, rSlot.adr) != LN_DONE)
    {
      bRetVal = MESSAGE_TIME;
     53a:	83 e0       	ldi	r24, 0x03	; 3
    bRetVal = 0;
    break;
  }

  return bRetVal;
}
     53c:	60 96       	adiw	r28, 0x10	; 16
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	de bf       	out	0x3e, r29	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	cd bf       	out	0x3d, r28	; 61
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	08 95       	ret

0000054e <sendLocoNetSpd>:
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void sendLocoNetSpd(rwSlotDataMsg *pSlot)
{
  sendLocoNet4BytePacket(OPC_LOCO_SPD,pSlot->slot,pSlot->spd);
     54e:	fc 01       	movw	r30, r24
     550:	45 81       	ldd	r20, Z+5	; 0x05
     552:	62 81       	ldd	r22, Z+2	; 0x02
     554:	80 ea       	ldi	r24, 0xA0	; 160
     556:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <sendLocoNet4BytePacket>
  resetTimerAction(&MessageTimer, SPEED_TIME);
     55a:	6a ef       	ldi	r22, 0xFA	; 250
     55c:	89 ea       	ldi	r24, 0xA9	; 169
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <resetTimerAction>
     564:	08 95       	ret

00000566 <sendLocoNetDirf>:
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void sendLocoNetDirf(rwSlotDataMsg *pSlot)
{
  sendLocoNet4BytePacket(OPC_LOCO_DIRF,pSlot->slot,pSlot->dirf);
     566:	fc 01       	movw	r30, r24
     568:	46 81       	ldd	r20, Z+6	; 0x06
     56a:	62 81       	ldd	r22, Z+2	; 0x02
     56c:	81 ea       	ldi	r24, 0xA1	; 161
     56e:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <sendLocoNet4BytePacket>
     572:	08 95       	ret

00000574 <sendLocoNetSnd>:
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void sendLocoNetSnd(rwSlotDataMsg *pSlot)
{
  sendLocoNet4BytePacket(OPC_LOCO_SND,pSlot->slot,pSlot->snd);
     574:	fc 01       	movw	r30, r24
     576:	42 85       	ldd	r20, Z+10	; 0x0a
     578:	62 81       	ldd	r22, Z+2	; 0x02
     57a:	82 ea       	ldi	r24, 0xA2	; 162
     57c:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <sendLocoNet4BytePacket>
     580:	08 95       	ret

00000582 <sendLocoNetWriteSlotData>:
 * ARGUMENTS   : none
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void sendLocoNetWriteSlotData(rwSlotDataMsg *pSlot)
{
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	cd b7       	in	r28, 0x3d	; 61
     588:	de b7       	in	r29, 0x3e	; 62
     58a:	60 97       	sbiw	r28, 0x10	; 16
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	de bf       	out	0x3e, r29	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	cd bf       	out	0x3d, r28	; 61
     596:	fc 01       	movw	r30, r24
  lnMsg SendPacket ;

  SendPacket.sd.command   = OPC_WR_SL_DATA  ; //opcode
     598:	8f ee       	ldi	r24, 0xEF	; 239
     59a:	89 83       	std	Y+1, r24	; 0x01
  SendPacket.sd.mesg_size = 14              ; // length
     59c:	8e e0       	ldi	r24, 0x0E	; 14
     59e:	8a 83       	std	Y+2, r24	; 0x02
  SendPacket.sd.slot      = pSlot->slot   ; // slot    2    
     5a0:	82 81       	ldd	r24, Z+2	; 0x02
     5a2:	8b 83       	std	Y+3, r24	; 0x03
  SendPacket.sd.stat      = pSlot->stat   ; // stat    3    
     5a4:	83 81       	ldd	r24, Z+3	; 0x03
     5a6:	8c 83       	std	Y+4, r24	; 0x04
  SendPacket.sd.adr       = pSlot->adr    ; // adr     4    
     5a8:	84 81       	ldd	r24, Z+4	; 0x04
     5aa:	8d 83       	std	Y+5, r24	; 0x05
  SendPacket.sd.spd       = pSlot->spd    ; // spd     5    
     5ac:	85 81       	ldd	r24, Z+5	; 0x05
     5ae:	8e 83       	std	Y+6, r24	; 0x06
  SendPacket.sd.dirf      = pSlot->dirf   ; // dirf    6    
     5b0:	86 81       	ldd	r24, Z+6	; 0x06
     5b2:	8f 83       	std	Y+7, r24	; 0x07
  SendPacket.sd.trk       = pSlot->trk    ; // trk     7    
     5b4:	87 81       	ldd	r24, Z+7	; 0x07
     5b6:	88 87       	std	Y+8, r24	; 0x08
  SendPacket.sd.ss2       = pSlot->ss2    ; // ss2     8    
     5b8:	80 85       	ldd	r24, Z+8	; 0x08
     5ba:	89 87       	std	Y+9, r24	; 0x09
  SendPacket.sd.adr2      = pSlot->adr2   ; // adr2    9    
     5bc:	81 85       	ldd	r24, Z+9	; 0x09
     5be:	8a 87       	std	Y+10, r24	; 0x0a
  SendPacket.sd.snd       = pSlot->snd    ; // snd    10    
     5c0:	82 85       	ldd	r24, Z+10	; 0x0a
     5c2:	8b 87       	std	Y+11, r24	; 0x0b
  SendPacket.sd.id1       = pSlot->id1    ; // id1    11   
     5c4:	83 85       	ldd	r24, Z+11	; 0x0b
     5c6:	8c 87       	std	Y+12, r24	; 0x0c
  SendPacket.sd.id2       = pSlot->id2    ; // id2    12   
     5c8:	84 85       	ldd	r24, Z+12	; 0x0c
     5ca:	8d 87       	std	Y+13, r24	; 0x0d

  if (sendLocoNetPacket( &SendPacket ) != LN_DONE)
     5cc:	ce 01       	movw	r24, r28
     5ce:	01 96       	adiw	r24, 0x01	; 1
     5d0:	0e 94 9c 0c 	call	0x1938	; 0x1938 <sendLocoNetPacket>
     5d4:	83 30       	cpi	r24, 0x03	; 3
     5d6:	99 f0       	breq	.+38     	; 0x5fe <sendLocoNetWriteSlotData+0x7c>
  { // send message failed, so set new state
    resetTimerAction(&MessageTimer, MESSAGE_TIME);
     5d8:	63 e0       	ldi	r22, 0x03	; 3
     5da:	89 ea       	ldi	r24, 0xA9	; 169
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	0e 94 11 0b 	call	0x1622	; 0x1622 <resetTimerAction>

    switch (bThrState)
     5e2:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <bThrState>
     5e6:	88 31       	cpi	r24, 0x18	; 24
     5e8:	21 f0       	breq	.+8      	; 0x5f2 <sendLocoNetWriteSlotData+0x70>
     5ea:	8e 31       	cpi	r24, 0x1E	; 30
     5ec:	29 f0       	breq	.+10     	; 0x5f8 <sendLocoNetWriteSlotData+0x76>
     5ee:	8b 30       	cpi	r24, 0x0B	; 11
     5f0:	59 f4       	brne	.+22     	; 0x608 <sendLocoNetWriteSlotData+0x86>
    {
    case THR_STATE_ACQUIRE_LOCO_WRITE:
    case THR_STATE_RECONNECT_WRITE:
      vSetState(THR_STATE_RECONNECT_GET_SLOT);
     5f2:	84 e1       	ldi	r24, 0x14	; 20
     5f4:	0c df       	rcall	.-488    	; 0x40e <vSetState>
      break;
    case THR_STATE_UNCONNECTED_WRITE:
      vSetState(THR_STATE_CONNECTED);
     5f6:	08 c0       	rjmp	.+16     	; 0x608 <sendLocoNetWriteSlotData+0x86>
     5f8:	81 e0       	ldi	r24, 0x01	; 1
      break;
     5fa:	09 df       	rcall	.-494    	; 0x40e <vSetState>
    }
  }
  else
  {
    resetTimerAction(&MessageTimer, RESPONSE_TIME);
     5fc:	05 c0       	rjmp	.+10     	; 0x608 <sendLocoNetWriteSlotData+0x86>
     5fe:	64 e1       	ldi	r22, 0x14	; 20
     600:	89 ea       	ldi	r24, 0xA9	; 169
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 11 0b 	call	0x1622	; 0x1622 <resetTimerAction>
  }
}
     608:	60 96       	adiw	r28, 0x10	; 16
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	f8 94       	cli
     60e:	de bf       	out	0x3e, r29	; 62
     610:	0f be       	out	0x3f, r0	; 63
     612:	cd bf       	out	0x3d, r28	; 61
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	08 95       	ret

0000061a <sendLocoNetMove>:
 * ARGUMENTS   : none
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void sendLocoNetMove(byte bSrc, byte bDest)
{
     61a:	46 2f       	mov	r20, r22
  if (sendLocoNet4BytePacket(OPC_MOVE_SLOTS, bSrc, bDest) != LN_DONE)
     61c:	68 2f       	mov	r22, r24
     61e:	8a eb       	ldi	r24, 0xBA	; 186
     620:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <sendLocoNet4BytePacket>
     624:	83 30       	cpi	r24, 0x03	; 3
     626:	71 f0       	breq	.+28     	; 0x644 <sendLocoNetMove+0x2a>
  {
    resetTimerAction(&MessageTimer, MESSAGE_TIME);
     628:	63 e0       	ldi	r22, 0x03	; 3
     62a:	89 ea       	ldi	r24, 0xA9	; 169
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	f9 d7       	rcall	.+4082   	; 0x1622 <resetTimerAction>
    // send message failed, so set new state
    if (bThrState == THR_STATE_RECONNECT_NULL_MOVE)
     630:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <bThrState>
     634:	86 31       	cpi	r24, 0x16	; 22
     636:	19 f4       	brne	.+6      	; 0x63e <sendLocoNetMove+0x24>
    {
      vSetState(THR_STATE_RECONNECT_GET_SLOT);
     638:	84 e1       	ldi	r24, 0x14	; 20
     63a:	e9 ce       	rjmp	.-558    	; 0x40e <vSetState>
    }
    else
    {
      vSetState(THR_STATE_UNCONNECTED);
     63c:	08 95       	ret
     63e:	80 e2       	ldi	r24, 0x20	; 32
    }
  }
  else
  {
    resetTimerAction(&MessageTimer, RESPONSE_TIME);
     640:	e6 ce       	rjmp	.-564    	; 0x40e <vSetState>
     642:	08 95       	ret
     644:	64 e1       	ldi	r22, 0x14	; 20
     646:	89 ea       	ldi	r24, 0xA9	; 169
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	eb c7       	rjmp	.+4054   	; 0x1622 <resetTimerAction>
     64c:	08 95       	ret

0000064e <sendLocoNetAdr>:
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void sendLocoNetAdr(rwSlotDataMsg *pSlot)
{
  if (sendLocoNet4BytePacket(OPC_LOCO_ADR, rSlot.adr2, rSlot.adr) != LN_DONE)
     64e:	e7 ec       	ldi	r30, 0xC7	; 199
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	44 81       	ldd	r20, Z+4	; 0x04
     654:	61 85       	ldd	r22, Z+9	; 0x09
     656:	8f eb       	ldi	r24, 0xBF	; 191
     658:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <sendLocoNet4BytePacket>
     65c:	83 30       	cpi	r24, 0x03	; 3
     65e:	29 f0       	breq	.+10     	; 0x66a <sendLocoNetAdr+0x1c>
  {
    resetTimerAction(&MessageTimer, MESSAGE_TIME);
     660:	63 e0       	ldi	r22, 0x03	; 3
     662:	89 ea       	ldi	r24, 0xA9	; 169
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	dd c7       	rjmp	.+4026   	; 0x1622 <resetTimerAction>
     668:	08 95       	ret
  }
  else
  {
    resetTimerAction(&MessageTimer, RESPONSE_TIME);
     66a:	64 e1       	ldi	r22, 0x14	; 20
     66c:	89 ea       	ldi	r24, 0xA9	; 169
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	d8 c7       	rjmp	.+4016   	; 0x1622 <resetTimerAction>
     672:	08 95       	ret

00000674 <sendLocoNetFredAdc>:
 * Send ADC raw value according to FRED.
 * @param raw the unfiltered value (0..1023)
 */
void sendLocoNetFredAdc( uint16_t raw )
{
  sendLocoNet4BytePacket( OPC_FRED_ADC, 0x7f & raw, 0x7f & raw>>7 );
     674:	ac 01       	movw	r20, r24
     676:	44 0f       	add	r20, r20
     678:	45 2f       	mov	r20, r21
     67a:	44 1f       	adc	r20, r20
     67c:	55 0b       	sbc	r21, r21
     67e:	51 95       	neg	r21
     680:	4f 77       	andi	r20, 0x7F	; 127
     682:	68 2f       	mov	r22, r24
     684:	6f 77       	andi	r22, 0x7F	; 127
     686:	8f ea       	ldi	r24, 0xAF	; 175
     688:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <sendLocoNet4BytePacket>
     68c:	08 95       	ret

0000068e <sendLocoNetFredCd>:
 * Send button press/release code according to FRED.
 * @param button a code from 1 to 127
 */
void sendLocoNetFredCd( uint8_t cdTime )
{
  sendLocoNet4BytePacket( OPC_FRED_BUTTON, 42, 0x7f & cdTime );
     68e:	48 2f       	mov	r20, r24
     690:	4f 77       	andi	r20, 0x7F	; 127
     692:	6a e2       	ldi	r22, 0x2A	; 42
     694:	88 ea       	ldi	r24, 0xA8	; 168
     696:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <sendLocoNet4BytePacket>
     69a:	08 95       	ret

0000069c <sendLocoNetFredButton>:
 * Send button press/release code according to FRED.
 * @param button a code from 1 to 127
 */
void sendLocoNetFredButton( uint8_t button )
{
  sendLocoNet4BytePacket( OPC_FRED_BUTTON, 43, 0x7f & button );
     69c:	48 2f       	mov	r20, r24
     69e:	4f 77       	andi	r20, 0x7F	; 127
     6a0:	6b e2       	ldi	r22, 0x2B	; 43
     6a2:	88 ea       	ldi	r24, 0xA8	; 168
     6a4:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <sendLocoNet4BytePacket>
     6a8:	08 95       	ret

000006aa <vCheckSelfTestEnd>:
 *******************************************************FunctionHeaderEnd******/
void vCheckSelfTestEnd(void)
{
  byte fSelfTestEnd = FALSE;

  switch (bFrediVersion)
     6aa:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <bFrediVersion>
     6ae:	82 30       	cpi	r24, 0x02	; 2
     6b0:	69 f0       	breq	.+26     	; 0x6cc <vCheckSelfTestEnd+0x22>
     6b2:	83 30       	cpi	r24, 0x03	; 3
     6b4:	a9 f0       	breq	.+42     	; 0x6e0 <vCheckSelfTestEnd+0x36>
     6b6:	81 30       	cpi	r24, 0x01	; 1
     6b8:	e9 f4       	brne	.+58     	; 0x6f4 <vCheckSelfTestEnd+0x4a>
  {
  case FREDI_VERSION_INCREMENT:
    if (wSelfTest == Key_Fredi_Inkrement)
    {
      fSelfTestEnd = TRUE;        
     6ba:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <wSelfTest>
     6be:	30 91 91 00 	lds	r19, 0x0091	; 0x800091 <wSelfTest+0x1>
     6c2:	2f 37       	cpi	r18, 0x7F	; 127
     6c4:	33 40       	sbci	r19, 0x03	; 3
     6c6:	b9 f0       	breq	.+46     	; 0x6f6 <vCheckSelfTestEnd+0x4c>
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	15 c0       	rjmp	.+42     	; 0x6f6 <vCheckSelfTestEnd+0x4c>
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <wSelfTest>
     6d2:	30 91 91 00 	lds	r19, 0x0091	; 0x800091 <wSelfTest+0x1>
     6d6:	2f 3f       	cpi	r18, 0xFF	; 255
     6d8:	33 40       	sbci	r19, 0x03	; 3
     6da:	69 f0       	breq	.+26     	; 0x6f6 <vCheckSelfTestEnd+0x4c>
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	0b c0       	rjmp	.+22     	; 0x6f6 <vCheckSelfTestEnd+0x4c>
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <wSelfTest>
     6e6:	30 91 91 00 	lds	r19, 0x0091	; 0x800091 <wSelfTest+0x1>
     6ea:	2f 3f       	cpi	r18, 0xFF	; 255
     6ec:	3c 40       	sbci	r19, 0x0C	; 12
     6ee:	19 f0       	breq	.+6      	; 0x6f6 <vCheckSelfTestEnd+0x4c>
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <vCheckSelfTestEnd+0x4c>
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void vCheckSelfTestEnd(void)
{
  byte fSelfTestEnd = FALSE;
     6f4:	80 e0       	ldi	r24, 0x00	; 0
    break;
  default:
    break;
  }

  if (  (fSelfTestEnd == TRUE)
     6f6:	81 30       	cpi	r24, 0x01	; 1
     6f8:	91 f4       	brne	.+36     	; 0x71e <vCheckSelfTestEnd+0x74>
     && (eeprom_read_byte(&abEEPROM[EEPROM_IMAGE]) != EEPROM_IMAGE_DEFAULT))
     6fa:	85 e0       	ldi	r24, 0x05	; 5
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <eeprom_read_byte>
     702:	85 35       	cpi	r24, 0x55	; 85
     704:	61 f0       	breq	.+24     	; 0x71e <vCheckSelfTestEnd+0x74>
  {
    vSetState(THR_STATE_SELFTEST_DONE);
     706:	85 e6       	ldi	r24, 0x65	; 101
     708:	82 de       	rcall	.-764    	; 0x40e <vSetState>
    delayTimer( 100 ); // wait a little bit longer
     70a:	84 e6       	ldi	r24, 0x64	; 100
     70c:	90 e0       	ldi	r25, 0x00	; 0
    sendLocoNetFredButton( 0x7F );
     70e:	8c d7       	rcall	.+3864   	; 0x1628 <delayTimer>
     710:	8f e7       	ldi	r24, 0x7F	; 127
     712:	c4 df       	rcall	.-120    	; 0x69c <sendLocoNetFredButton>

    eeprom_write_byte(&abEEPROM[EEPROM_IMAGE], EEPROM_IMAGE_DEFAULT);
     714:	65 e5       	ldi	r22, 0x55	; 85
     716:	85 e0       	ldi	r24, 0x05	; 5
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <eeprom_write_byte>
     71e:	08 95       	ret

00000720 <vProcessKey>:
 *      the remaining key is executed.
 *      So press shift, then press Fx key and release key Fx first before 
 *      releasing the shift key
 *******************************************************FunctionHeaderEnd******/
void vProcessKey(void)
{
     720:	cf 93       	push	r28
  if (bEvent & EVENT_KEY)
     722:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <bEvent>
     726:	80 ff       	sbrs	r24, 0
     728:	28 c1       	rjmp	.+592    	; 0x97a <vProcessKey+0x25a>
  {
    static byte bLastCurrentkey = 0;
    byte bSet;
    bEvent &= ~EVENT_KEY;
     72a:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <bEvent>
     72e:	8e 7f       	andi	r24, 0xFE	; 254
     730:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <bEvent>

    if (bThrState < THR_STATE_SELFTEST)
     734:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <bThrState>
     738:	84 36       	cpi	r24, 0x64	; 100
     73a:	08 f0       	brcs	.+2      	; 0x73e <vProcessKey+0x1e>
     73c:	0b c1       	rjmp	.+534    	; 0x954 <vProcessKey+0x234>
    {
      if ((bLastCurrentkey & Key_SHIFT) && ( !(bCurrentKey & Key_SHIFT)))
     73e:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <__data_end>
     742:	90 ff       	sbrs	r25, 0
     744:	04 c0       	rjmp	.+8      	; 0x74e <vProcessKey+0x2e>
     746:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <bCurrentKey>
     74a:	20 ff       	sbrs	r18, 0
     74c:	12 c1       	rjmp	.+548    	; 0x972 <vProcessKey+0x252>
      { // the changing key was a release of shift -> no action
      }
			else if ((bLastCurrentkey & Key_Stop) && ( !(bCurrentKey & Key_Stop)))
     74e:	96 ff       	sbrs	r25, 6
     750:	09 c0       	rjmp	.+18     	; 0x764 <vProcessKey+0x44>
     752:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <bCurrentKey>
     756:	26 fd       	sbrc	r18, 6
     758:	05 c0       	rjmp	.+10     	; 0x764 <vProcessKey+0x44>
			{
				resetTimerAction(&ReleaseStopTimer, RELEASE_STOP_TIME); 
     75a:	65 e0       	ldi	r22, 0x05	; 5
     75c:	81 e6       	ldi	r24, 0x61	; 97
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	60 d7       	rcall	.+3776   	; 0x1622 <resetTimerAction>
     762:	07 c1       	rjmp	.+526    	; 0x972 <vProcessKey+0x252>
			}
      else if ((bLastCurrentkey & Key_Dir) != (bCurrentKey & Key_Dir))
     764:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <bCurrentKey>
     768:	92 27       	eor	r25, r18
     76a:	cc f5       	brge	.+114    	; 0x7de <vProcessKey+0xbe>
      { // dir switch changed
        if (  (bThrState == THR_STATE_CONNECTED)
     76c:	81 30       	cpi	r24, 0x01	; 1
     76e:	09 f0       	breq	.+2      	; 0x772 <vProcessKey+0x52>
     770:	00 c1       	rjmp	.+512    	; 0x972 <vProcessKey+0x252>
           && (  (bFrediVersion == FREDI_VERSION_ANALOG)
              || (bFrediVersion == FREDI_VERSION_INCREMENT_SWITCH)))
     772:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <bFrediVersion>
				resetTimerAction(&ReleaseStopTimer, RELEASE_STOP_TIME); 
			}
      else if ((bLastCurrentkey & Key_Dir) != (bCurrentKey & Key_Dir))
      { // dir switch changed
        if (  (bThrState == THR_STATE_CONNECTED)
           && (  (bFrediVersion == FREDI_VERSION_ANALOG)
     776:	9e ef       	ldi	r25, 0xFE	; 254
     778:	98 0f       	add	r25, r24
     77a:	92 30       	cpi	r25, 0x02	; 2
     77c:	08 f0       	brcs	.+2      	; 0x780 <vProcessKey+0x60>
     77e:	f9 c0       	rjmp	.+498    	; 0x972 <vProcessKey+0x252>
              || (bFrediVersion == FREDI_VERSION_INCREMENT_SWITCH)))
        {
          sEncDir = 0;
     780:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <sEncDir>
          bSpdCnt = 0;
     784:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <bSpdCnt>

          if (  (bFrediVersion == FREDI_VERSION_ANALOG)
     788:	83 30       	cpi	r24, 0x03	; 3
     78a:	41 f4       	brne	.+16     	; 0x79c <vProcessKey+0x7c>
                && (rSlot.spd > 1))
     78c:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <rSlot+0x5>
     790:	82 30       	cpi	r24, 0x02	; 2
     792:	20 f0       	brcs	.+8      	; 0x79c <vProcessKey+0x7c>
          {
            fSetSpeed = FALSE;
     794:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <fSetSpeed>
            vSetState(THR_STATE_CONNECTED);
     798:	81 e0       	ldi	r24, 0x01	; 1
          }

          rSlot.spd = 1; // Not stop
     79a:	39 de       	rcall	.-910    	; 0x40e <vSetState>
     79c:	81 e0       	ldi	r24, 0x01	; 1

          sendLocoNetSpd(&rSlot);
     79e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <rSlot+0x5>
     7a2:	87 ec       	ldi	r24, 0xC7	; 199

          if (bCurrentKey & Key_Dir)
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	d3 de       	rcall	.-602    	; 0x54e <sendLocoNetSpd>
     7a8:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <bCurrentKey>
          { // dir switch was pressed
            rSlot.dirf |= 0x20;
     7ac:	88 23       	and	r24, r24
     7ae:	44 f4       	brge	.+16     	; 0x7c0 <vProcessKey+0xa0>
     7b0:	e7 ec       	ldi	r30, 0xC7	; 199
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	86 81       	ldd	r24, Z+6	; 0x06
            LED_PORT   &= ~_BV(LED_GREEN_L); 
     7b6:	80 62       	ori	r24, 0x20	; 32
            LED_PORT   |=  _BV(LED_GREEN_R);
     7b8:	86 83       	std	Z+6, r24	; 0x06
     7ba:	ab 98       	cbi	0x15, 3	; 21
          }
          else
          { // dir switch was released
            rSlot.dirf &= ~0x20;
     7bc:	aa 9a       	sbi	0x15, 2	; 21
     7be:	07 c0       	rjmp	.+14     	; 0x7ce <vProcessKey+0xae>
     7c0:	e7 ec       	ldi	r30, 0xC7	; 199
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	86 81       	ldd	r24, Z+6	; 0x06
            LED_PORT &= ~_BV(LED_GREEN_R);
            LED_PORT |=  _BV(LED_GREEN_L); 
          }
          sendLocoNetDirf(&rSlot);
     7c6:	8f 7d       	andi	r24, 0xDF	; 223
     7c8:	86 83       	std	Z+6, r24	; 0x06
     7ca:	aa 98       	cbi	0x15, 2	; 21

          // Fredi is connected, so this causes an sendLocoNetSpd after 100ms
          // it seems to be the last sendLocoNetSpd is ignored by intellibox in some cases
          resetTimerAction(&MessageTimer, 1); 
     7cc:	ab 9a       	sbi	0x15, 3	; 21
     7ce:	87 ec       	ldi	r24, 0xC7	; 199
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	c9 de       	rcall	.-622    	; 0x566 <sendLocoNetDirf>
     7d4:	61 e0       	ldi	r22, 0x01	; 1
     7d6:	89 ea       	ldi	r24, 0xA9	; 169
        }
      }
      else
      {
        if (bThrState == THR_STATE_CONNECTED)
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	23 d7       	rcall	.+3654   	; 0x1622 <resetTimerAction>
     7dc:	ca c0       	rjmp	.+404    	; 0x972 <vProcessKey+0x252>
        {
          if (bCurrentKey & Key_SHIFT)
     7de:	81 30       	cpi	r24, 0x01	; 1
     7e0:	09 f0       	breq	.+2      	; 0x7e4 <vProcessKey+0xc4>
     7e2:	9d c0       	rjmp	.+314    	; 0x91e <vProcessKey+0x1fe>
     7e4:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <bCurrentKey>
          {
            bSet = rSlot.snd; 
     7e8:	80 ff       	sbrs	r24, 0

            switch (bCurrentKey & ~Key_Dir)
     7ea:	35 c0       	rjmp	.+106    	; 0x856 <vProcessKey+0x136>
     7ec:	c0 91 d1 00 	lds	r28, 0x00D1	; 0x8000d1 <rSlot+0xa>
     7f0:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <bCurrentKey>
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	8f 77       	andi	r24, 0x7F	; 127
     7f8:	89 30       	cpi	r24, 0x09	; 9
     7fa:	91 05       	cpc	r25, r1
     7fc:	c9 f0       	breq	.+50     	; 0x830 <vProcessKey+0x110>
     7fe:	34 f4       	brge	.+12     	; 0x80c <vProcessKey+0xec>
     800:	83 30       	cpi	r24, 0x03	; 3
     802:	91 05       	cpc	r25, r1
     804:	d9 f0       	breq	.+54     	; 0x83c <vProcessKey+0x11c>
     806:	05 97       	sbiw	r24, 0x05	; 5
     808:	b1 f0       	breq	.+44     	; 0x836 <vProcessKey+0x116>
     80a:	1a c0       	rjmp	.+52     	; 0x840 <vProcessKey+0x120>
     80c:	81 31       	cpi	r24, 0x11	; 17
     80e:	91 05       	cpc	r25, r1
            {
            case (Key_Stop | Key_SHIFT): // undispatch
              rSlot.stat = 0x20;
     810:	61 f0       	breq	.+24     	; 0x82a <vProcessKey+0x10a>
     812:	81 34       	cpi	r24, 0x41	; 65

              vSetState(THR_STATE_UNCONNECTED_WRITE);
     814:	91 05       	cpc	r25, r1
     816:	a1 f4       	brne	.+40     	; 0x840 <vProcessKey+0x120>
     818:	80 e2       	ldi	r24, 0x20	; 32

              sendLocoNetWriteSlotData(&rSlot);
     81a:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <rSlot+0x3>
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	f6 dd       	rcall	.-1044   	; 0x40e <vSetState>
              break;
     822:	87 ec       	ldi	r24, 0xC7	; 199
            case Key_F5:  bSet ^= 0x01; break;
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	ad de       	rcall	.-678    	; 0x582 <sendLocoNetWriteSlotData>
     828:	0b c0       	rjmp	.+22     	; 0x840 <vProcessKey+0x120>
            case Key_F6:  bSet ^= 0x02; break;
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	c8 27       	eor	r28, r24
     82e:	08 c0       	rjmp	.+16     	; 0x840 <vProcessKey+0x120>
            case Key_F7:  bSet ^= 0x04; break;
     830:	82 e0       	ldi	r24, 0x02	; 2
     832:	c8 27       	eor	r28, r24
     834:	05 c0       	rjmp	.+10     	; 0x840 <vProcessKey+0x120>
            case Key_F8:  bSet ^= 0x08; break;
     836:	84 e0       	ldi	r24, 0x04	; 4
     838:	c8 27       	eor	r28, r24
            default:                    break;
            }

            if (bSet != rSlot.snd)
     83a:	02 c0       	rjmp	.+4      	; 0x840 <vProcessKey+0x120>
     83c:	88 e0       	ldi	r24, 0x08	; 8
     83e:	c8 27       	eor	r28, r24
     840:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <rSlot+0xa>
            {
              rSlot.snd = bSet; 
     844:	c8 17       	cp	r28, r24
              sendLocoNetSnd(&rSlot);
     846:	09 f4       	brne	.+2      	; 0x84a <vProcessKey+0x12a>
     848:	94 c0       	rjmp	.+296    	; 0x972 <vProcessKey+0x252>
     84a:	c0 93 d1 00 	sts	0x00D1, r28	; 0x8000d1 <rSlot+0xa>
     84e:	87 ec       	ldi	r24, 0xC7	; 199
            }
          }
          else
          {
            bSet = rSlot.dirf; 
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	90 de       	rcall	.-736    	; 0x574 <sendLocoNetSnd>

            switch (bCurrentKey & ~Key_Dir)
     854:	8e c0       	rjmp	.+284    	; 0x972 <vProcessKey+0x252>
     856:	c0 91 cd 00 	lds	r28, 0x00CD	; 0x8000cd <rSlot+0x6>
     85a:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <bCurrentKey>
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	8f 77       	andi	r24, 0x7F	; 127
     862:	88 30       	cpi	r24, 0x08	; 8
     864:	91 05       	cpc	r25, r1
     866:	09 f4       	brne	.+2      	; 0x86a <vProcessKey+0x14a>
     868:	48 c0       	rjmp	.+144    	; 0x8fa <vProcessKey+0x1da>
     86a:	44 f4       	brge	.+16     	; 0x87c <vProcessKey+0x15c>
     86c:	82 30       	cpi	r24, 0x02	; 2
     86e:	91 05       	cpc	r25, r1
     870:	09 f4       	brne	.+2      	; 0x874 <vProcessKey+0x154>
     872:	49 c0       	rjmp	.+146    	; 0x906 <vProcessKey+0x1e6>
     874:	04 97       	sbiw	r24, 0x04	; 4
     876:	09 f4       	brne	.+2      	; 0x87a <vProcessKey+0x15a>
     878:	43 c0       	rjmp	.+134    	; 0x900 <vProcessKey+0x1e0>
     87a:	47 c0       	rjmp	.+142    	; 0x90a <vProcessKey+0x1ea>
     87c:	80 32       	cpi	r24, 0x20	; 32
     87e:	91 05       	cpc	r25, r1
     880:	b1 f1       	breq	.+108    	; 0x8ee <vProcessKey+0x1ce>
     882:	80 34       	cpi	r24, 0x40	; 64
     884:	91 05       	cpc	r25, r1
     886:	21 f0       	breq	.+8      	; 0x890 <vProcessKey+0x170>
     888:	40 97       	sbiw	r24, 0x10	; 16
            {
            case Key_Stop: // increment pushbutton or extra button on analog fredi
              sEncDir = 0;
     88a:	09 f0       	breq	.+2      	; 0x88e <vProcessKey+0x16e>
     88c:	3e c0       	rjmp	.+124    	; 0x90a <vProcessKey+0x1ea>
              bSpdCnt = 0;
     88e:	32 c0       	rjmp	.+100    	; 0x8f4 <vProcessKey+0x1d4>
     890:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <sEncDir>

              if (  (bFrediVersion == FREDI_VERSION_ANALOG)
     894:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <bSpdCnt>
                 && (rSlot.spd > 1))
     898:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <bFrediVersion>
     89c:	83 30       	cpi	r24, 0x03	; 3
     89e:	49 f4       	brne	.+18     	; 0x8b2 <vProcessKey+0x192>
              {
                fSetSpeed = FALSE;                // show blinking LED
     8a0:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <rSlot+0x5>
                vSetState(THR_STATE_CONNECTED);
     8a4:	82 30       	cpi	r24, 0x02	; 2
     8a6:	28 f0       	brcs	.+10     	; 0x8b2 <vProcessKey+0x192>
     8a8:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <fSetSpeed>
              }
							else
							{
								bStopPressed = TRUE;
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	af dd       	rcall	.-1186   	; 0x40e <vSetState>
     8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <vProcessKey+0x198>
							}

              if (rSlot.spd > 1)
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <bStopPressed>
							{
								rSlot.spd = 1;                      // Emergency stop
     8b8:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <rSlot+0x5>
     8bc:	82 30       	cpi	r24, 0x02	; 2
     8be:	20 f0       	brcs	.+8      	; 0x8c8 <vProcessKey+0x1a8>
							}
							else
							{
								rSlot.spd = 0;                      // Normal stop
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <rSlot+0x5>
							}

              sendLocoNetSpd(&rSlot);
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <vProcessKey+0x1ac>
     8c8:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <rSlot+0x5>

              if (bFrediVersion == FREDI_VERSION_INCREMENT) // invert direction
     8cc:	87 ec       	ldi	r24, 0xC7	; 199
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	3e de       	rcall	.-900    	; 0x54e <sendLocoNetSpd>
     8d2:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <bFrediVersion>
              {
								if (bSet & 0x20)
     8d6:	81 30       	cpi	r24, 0x01	; 1
								{
									bSet &= ~0x20;
     8d8:	c1 f4       	brne	.+48     	; 0x90a <vProcessKey+0x1ea>

									LED_PORT &= ~_BV(LED_GREEN_R);
     8da:	c5 ff       	sbrs	r28, 5
									LED_PORT |=  _BV(LED_GREEN_L);     // show left direction
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <vProcessKey+0x1c6>
     8de:	cf 7d       	andi	r28, 0xDF	; 223
								}
								else
								{
									bSet |= 0x20;
     8e0:	aa 98       	cbi	0x15, 2	; 21

									LED_PORT &= ~_BV(LED_GREEN_L);     // show right direction
     8e2:	ab 9a       	sbi	0x15, 3	; 21
									LED_PORT |=  _BV(LED_GREEN_R);
     8e4:	12 c0       	rjmp	.+36     	; 0x90a <vProcessKey+0x1ea>
     8e6:	c0 62       	ori	r28, 0x20	; 32
								}
              }
              break;
            case Key_F0:  bSet ^= 0x10; break;
     8e8:	ab 98       	cbi	0x15, 3	; 21
     8ea:	aa 9a       	sbi	0x15, 2	; 21
     8ec:	0e c0       	rjmp	.+28     	; 0x90a <vProcessKey+0x1ea>
            case Key_F1:  bSet ^= 0x01; break;
     8ee:	80 e1       	ldi	r24, 0x10	; 16
     8f0:	c8 27       	eor	r28, r24
     8f2:	0b c0       	rjmp	.+22     	; 0x90a <vProcessKey+0x1ea>
            case Key_F2:  bSet ^= 0x02; break;
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	c8 27       	eor	r28, r24
     8f8:	08 c0       	rjmp	.+16     	; 0x90a <vProcessKey+0x1ea>
            case Key_F3:  bSet ^= 0x04; break;
     8fa:	82 e0       	ldi	r24, 0x02	; 2
     8fc:	c8 27       	eor	r28, r24
            case Key_F4:  bSet ^= 0x08; break;
     8fe:	05 c0       	rjmp	.+10     	; 0x90a <vProcessKey+0x1ea>
            default:                    break;
            }

            if (bSet != rSlot.dirf)
     900:	84 e0       	ldi	r24, 0x04	; 4
     902:	c8 27       	eor	r28, r24
     904:	02 c0       	rjmp	.+4      	; 0x90a <vProcessKey+0x1ea>
     906:	88 e0       	ldi	r24, 0x08	; 8
            {
              rSlot.dirf = bSet; 
     908:	c8 27       	eor	r28, r24
     90a:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <rSlot+0x6>
              sendLocoNetDirf(&rSlot);
     90e:	c8 17       	cp	r28, r24
     910:	81 f1       	breq	.+96     	; 0x972 <vProcessKey+0x252>
            }
          } // end of else if(bCurrentKey & Key_SHIFT)
        } // end of if(bThrState == THR_STATE_CONNECTED)
        else if (bThrState == THR_STATE_UNCONNECTED)
     912:	c0 93 cd 00 	sts	0x00CD, r28	; 0x8000cd <rSlot+0x6>
        {
          if ((bCurrentKey & ~Key_Dir) == (Key_Stop | Key_SHIFT))   // try to dispatch
     916:	87 ec       	ldi	r24, 0xC7	; 199
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	25 de       	rcall	.-950    	; 0x566 <sendLocoNetDirf>
     91c:	2a c0       	rjmp	.+84     	; 0x972 <vProcessKey+0x252>
          {
            vSetState(THR_STATE_ACQUIRE_LOCO_GET);
     91e:	80 32       	cpi	r24, 0x20	; 32
     920:	59 f4       	brne	.+22     	; 0x938 <vProcessKey+0x218>
     922:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <bCurrentKey>
            sendLocoNetMove(0, 0);
     926:	8f 77       	andi	r24, 0x7F	; 127
     928:	81 34       	cpi	r24, 0x41	; 65
          }
        }
        else
        {
          if ((bCurrentKey & (Key_Stop | Key_SHIFT)) == (Key_Stop | Key_SHIFT))
     92a:	19 f5       	brne	.+70     	; 0x972 <vProcessKey+0x252>
     92c:	8a e0       	ldi	r24, 0x0A	; 10
     92e:	6f dd       	rcall	.-1314   	; 0x40e <vSetState>
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	80 e0       	ldi	r24, 0x00	; 0
          {
            rSlot.stat = 0x20;
     934:	72 de       	rcall	.-796    	; 0x61a <sendLocoNetMove>
     936:	1d c0       	rjmp	.+58     	; 0x972 <vProcessKey+0x252>
     938:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <bCurrentKey>

            vSetState(THR_STATE_UNCONNECTED_WRITE);
     93c:	81 74       	andi	r24, 0x41	; 65
     93e:	81 34       	cpi	r24, 0x41	; 65

            sendLocoNetWriteSlotData(&rSlot);
     940:	c1 f4       	brne	.+48     	; 0x972 <vProcessKey+0x252>
     942:	80 e2       	ldi	r24, 0x20	; 32
     944:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <rSlot+0x3>
        }
      }
    }
    else
    {
      wSelfTest |= (uint16_t) (bCurrentKey);
     948:	8e e1       	ldi	r24, 0x1E	; 30
     94a:	61 dd       	rcall	.-1342   	; 0x40e <vSetState>
     94c:	87 ec       	ldi	r24, 0xC7	; 199
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	18 de       	rcall	.-976    	; 0x582 <sendLocoNetWriteSlotData>
     952:	0f c0       	rjmp	.+30     	; 0x972 <vProcessKey+0x252>
     954:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <bCurrentKey>
     958:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <wSelfTest>
      sendLocoNetFredButton(bCurrentKey);
     95c:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <wSelfTest+0x1>
     960:	82 2b       	or	r24, r18
     962:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <wSelfTest+0x1>
      vCheckSelfTestEnd();
     966:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <wSelfTest>
    }

    bLastCurrentkey = bCurrentKey;
     96a:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <bCurrentKey>
     96e:	96 de       	rcall	.-724    	; 0x69c <sendLocoNetFredButton>
  } // end of if (bEvent & EVENT_KEY)
} // end of void vProcessKey(void)
     970:	9c de       	rcall	.-712    	; 0x6aa <vCheckSelfTestEnd>
     972:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <bCurrentKey>
     976:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end>
     97a:	cf 91       	pop	r28
     97c:	08 95       	ret

0000097e <vProcessEncoder>:
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void vProcessEncoder(void)
{
  if (sEncDir != 0)
     97e:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <sEncDir>
     982:	88 23       	and	r24, r24
     984:	09 f4       	brne	.+2      	; 0x988 <vProcessEncoder+0xa>
     986:	6f c0       	rjmp	.+222    	; 0xa66 <vProcessEncoder+0xe8>
  {
    resetTimerAction(&IncrementTimer, INCREMENT_TIME); // start timer for debouncing
     988:	65 e0       	ldi	r22, 0x05	; 5
     98a:	80 eb       	ldi	r24, 0xB0	; 176
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	49 d6       	rcall	.+3218   	; 0x1622 <resetTimerAction>

    if (bThrState == THR_STATE_CONNECTED)
     990:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <bThrState>
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	09 f0       	breq	.+2      	; 0x99a <vProcessEncoder+0x1c>
     998:	47 c0       	rjmp	.+142    	; 0xa28 <vProcessEncoder+0xaa>
    {
			if (!(bStopPressed))                // get encoder steps only if stop is not pressed
     99a:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <bStopPressed>
     99e:	81 11       	cpse	r24, r1
     9a0:	60 c0       	rjmp	.+192    	; 0xa62 <vProcessEncoder+0xe4>
			{
				if (sEncDir < 0)                  // left rotation
     9a2:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <sEncDir>
     9a6:	88 23       	and	r24, r24
     9a8:	dc f4       	brge	.+54     	; 0x9e0 <vProcessEncoder+0x62>
				{
					sEncDir *= -1;                  // get absolut value
     9aa:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <sEncDir>
     9ae:	81 95       	neg	r24
     9b0:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <sEncDir>

					if (sEncDir > bSpdCnt)
     9b4:	20 91 93 00 	lds	r18, 0x0093	; 0x800093 <sEncDir>
     9b8:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <bSpdCnt>
     9bc:	02 2e       	mov	r0, r18
     9be:	00 0c       	add	r0, r0
     9c0:	33 0b       	sbc	r19, r19
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	82 17       	cp	r24, r18
     9c6:	93 07       	cpc	r25, r19
     9c8:	1c f4       	brge	.+6      	; 0x9d0 <vProcessEncoder+0x52>
					{
						bSpdCnt = 0;
     9ca:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <bSpdCnt>
     9ce:	0f c0       	rjmp	.+30     	; 0x9ee <vProcessEncoder+0x70>
					}
					else
					{
						bSpdCnt -= (byte) sEncDir;
     9d0:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <sEncDir>
     9d4:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <bSpdCnt>
     9d8:	89 1b       	sub	r24, r25
     9da:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <bSpdCnt>
     9de:	07 c0       	rjmp	.+14     	; 0x9ee <vProcessEncoder+0x70>
					}
				}
				else                              // right rotation
				{
					bSpdCnt += sEncDir;
     9e0:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <sEncDir>
     9e4:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <bSpdCnt>
     9e8:	89 0f       	add	r24, r25
     9ea:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <bSpdCnt>
				}

      if (bSpdCnt > MAX_SPEED)          // limit the value for speed
     9ee:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <bSpdCnt>
     9f2:	82 32       	cpi	r24, 0x22	; 34
     9f4:	18 f0       	brcs	.+6      	; 0x9fc <vProcessEncoder+0x7e>
      {
        bSpdCnt = MAX_SPEED;
     9f6:	81 e2       	ldi	r24, 0x21	; 33
     9f8:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <bSpdCnt>
      }

      if (rSlot.spd != abSpd[bSpdCnt])       // get speedvalue for incrementvalue
     9fc:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <bSpdCnt>
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	e8 59       	subi	r30, 0x98	; 152
     a04:	ff 4f       	sbci	r31, 0xFF	; 255
     a06:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <rSlot+0x5>
     a0a:	80 81       	ld	r24, Z
     a0c:	98 17       	cp	r25, r24
     a0e:	49 f1       	breq	.+82     	; 0xa62 <vProcessEncoder+0xe4>
      {
        rSlot.spd = abSpd[bSpdCnt];
     a10:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <bSpdCnt>
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	e8 59       	subi	r30, 0x98	; 152
     a18:	ff 4f       	sbci	r31, 0xFF	; 255
     a1a:	80 81       	ld	r24, Z
     a1c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <rSlot+0x5>
					sendLocoNetSpd(&rSlot);           // anounce new speed value
     a20:	87 ec       	ldi	r24, 0xC7	; 199
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	94 dd       	rcall	.-1240   	; 0x54e <sendLocoNetSpd>
     a26:	1d c0       	rjmp	.+58     	; 0xa62 <vProcessEncoder+0xe4>
				}
			}
    }
    else if (bThrState >= THR_STATE_SELFTEST)
     a28:	84 36       	cpi	r24, 0x64	; 100
     a2a:	d8 f0       	brcs	.+54     	; 0xa62 <vProcessEncoder+0xe4>
    {
      if (sEncDir < 0)                  // left rotation decoded
     a2c:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <sEncDir>
     a30:	88 23       	and	r24, r24
     a32:	54 f4       	brge	.+20     	; 0xa48 <vProcessEncoder+0xca>
      {
        wSelfTest |= Key_Enc_L;
     a34:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <wSelfTest>
     a38:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <wSelfTest+0x1>
     a3c:	91 60       	ori	r25, 0x01	; 1
     a3e:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <wSelfTest+0x1>
     a42:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <wSelfTest>
     a46:	09 c0       	rjmp	.+18     	; 0xa5a <vProcessEncoder+0xdc>
      }
      else                              // right ratation decoded
      {
        wSelfTest |= Key_Enc_R;
     a48:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <wSelfTest>
     a4c:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <wSelfTest+0x1>
     a50:	92 60       	ori	r25, 0x02	; 2
     a52:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <wSelfTest+0x1>
     a56:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <wSelfTest>
      }
      sendLocoNetFredButton( sEncDir );
     a5a:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <sEncDir>

      vCheckSelfTestEnd();
     a5e:	1e de       	rcall	.-964    	; 0x69c <sendLocoNetFredButton>
    }

    sEncDir = 0;
     a60:	24 de       	rcall	.-952    	; 0x6aa <vCheckSelfTestEnd>
     a62:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <sEncDir>
     a66:	08 95       	ret

00000a68 <vProcessPoti>:
 * ARGUMENTS   : none
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void vProcessPoti(void)
{
     a68:	cf 93       	push	r28
  if (bThrState == THR_STATE_CONNECTED)
     a6a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <bThrState>
     a6e:	81 30       	cpi	r24, 0x01	; 1
     a70:	19 f5       	brne	.+70     	; 0xab8 <vProcessPoti+0x50>
  {
    byte fOldSetSpeed = fSetSpeed;
     a72:	c0 91 65 00 	lds	r28, 0x0065	; 0x800065 <fSetSpeed>

    if (!fSetSpeed)
     a76:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <fSetSpeed>
     a7a:	81 11       	cpse	r24, r1
     a7c:	07 c0       	rjmp	.+14     	; 0xa8c <vProcessPoti+0x24>
    {
      if (potAdcSpeedValue == 0)     // potivalue is in right range for  set speed again
     a7e:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <potAdcSpeedValue>
     a82:	81 11       	cpse	r24, r1
     a84:	03 c0       	rjmp	.+6      	; 0xa8c <vProcessPoti+0x24>
      {
        fSetSpeed = TRUE;
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <fSetSpeed>
      }
    }

    if (fSetSpeed)
     a8c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <fSetSpeed>
     a90:	88 23       	and	r24, r24
     a92:	59 f0       	breq	.+22     	; 0xaaa <vProcessPoti+0x42>
    {
      byte bSpd = potAdcSpeedValue;
     a94:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <potAdcSpeedValue>
      if (rSlot.spd != bSpd)
     a98:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <rSlot+0x5>
     a9c:	89 17       	cp	r24, r25
     a9e:	29 f0       	breq	.+10     	; 0xaaa <vProcessPoti+0x42>
      {
        rSlot.spd = bSpd;
     aa0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <rSlot+0x5>
        sendLocoNetSpd(&rSlot);
     aa4:	87 ec       	ldi	r24, 0xC7	; 199
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	52 dd       	rcall	.-1372   	; 0x54e <sendLocoNetSpd>
      }
    }

    if (fOldSetSpeed != fSetSpeed)
     aaa:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <fSetSpeed>
     aae:	c8 17       	cp	r28, r24
    {
      vSetState(THR_STATE_CONNECTED); // reset of blinking LEDs
     ab0:	c9 f1       	breq	.+114    	; 0xb24 <vProcessPoti+0xbc>
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	ac dc       	rcall	.-1704   	; 0x40e <vSetState>
    }
  }
  else if (bThrState >= THR_STATE_SELFTEST)
     ab6:	36 c0       	rjmp	.+108    	; 0xb24 <vProcessPoti+0xbc>
     ab8:	84 36       	cpi	r24, 0x64	; 100
  {
    static uint16_t bOldValue = 0xffff; // init of potAdcSpeedValue is different,
                                        // so set first value anyway

    if (potAdcSpeedValue == 0)          // Poti on left side
     aba:	a0 f1       	brcs	.+104    	; 0xb24 <vProcessPoti+0xbc>
     abc:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <potAdcSpeedValue>
     ac0:	81 11       	cpse	r24, r1
    {
      wSelfTest |= Key_Poti_L;
     ac2:	0a c0       	rjmp	.+20     	; 0xad8 <vProcessPoti+0x70>
     ac4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <wSelfTest>
     ac8:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <wSelfTest+0x1>
     acc:	94 60       	ori	r25, 0x04	; 4
     ace:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <wSelfTest+0x1>
     ad2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <wSelfTest>
    }
    else if (potAdcSpeedValue >= 126)   // Poti on right side
     ad6:	0d c0       	rjmp	.+26     	; 0xaf2 <vProcessPoti+0x8a>
     ad8:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <potAdcSpeedValue>
     adc:	8e 37       	cpi	r24, 0x7E	; 126
    {
      wSelfTest |= Key_Poti_R;
     ade:	48 f0       	brcs	.+18     	; 0xaf2 <vProcessPoti+0x8a>
     ae0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <wSelfTest>
     ae4:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <wSelfTest+0x1>
     ae8:	98 60       	ori	r25, 0x08	; 8
     aea:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <wSelfTest+0x1>
     aee:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <wSelfTest>
    }

    if ( bOldValue != potAdcRawValue )
     af2:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <potAdcRawValue>
     af6:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <potAdcRawValue+0x1>
     afa:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     afe:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
    {
      bOldValue = potAdcRawValue;
     b06:	69 f0       	breq	.+26     	; 0xb22 <vProcessPoti+0xba>
     b08:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <potAdcRawValue>
     b0c:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <potAdcRawValue+0x1>
     b10:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     b14:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
      sendLocoNetFredAdc( potAdcRawValue );
     b18:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <potAdcRawValue>
     b1c:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <potAdcRawValue+0x1>
    }

    vCheckSelfTestEnd();
     b20:	a9 dd       	rcall	.-1198   	; 0x674 <sendLocoNetFredAdc>
  }
}
     b22:	c3 dd       	rcall	.-1146   	; 0x6aa <vCheckSelfTestEnd>
     b24:	cf 91       	pop	r28
     b26:	08 95       	ret

00000b28 <vCopySlotFromRxPacket>:
 *******************************************************FunctionHeaderEnd******/
void vCopySlotFromRxPacket(void)
{
  byte i;                                               // needed for GET_SPDCNT_BY_SLOTSPD

  if (bThrState == THR_STATE_ACQUIRE_LOCO_GET)
     b28:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <bThrState>
     b2c:	8a 30       	cpi	r24, 0x0A	; 10
     b2e:	91 f4       	brne	.+36     	; 0xb54 <vCopySlotFromRxPacket+0x2c>
  {
    rSlot.stat    = RxPacket->data[ 3];                 // slot status
     b30:	a0 91 c5 00 	lds	r26, 0x00C5	; 0x8000c5 <RxPacket>
     b34:	b0 91 c6 00 	lds	r27, 0x00C6	; 0x8000c6 <RxPacket+0x1>
     b38:	13 96       	adiw	r26, 0x03	; 3
     b3a:	8c 91       	ld	r24, X
     b3c:	13 97       	sbiw	r26, 0x03	; 3
     b3e:	e7 ec       	ldi	r30, 0xC7	; 199
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	83 83       	std	Z+3, r24	; 0x03
    rSlot.adr     = RxPacket->data[ 4];                 // loco address
     b44:	14 96       	adiw	r26, 0x04	; 4
     b46:	8c 91       	ld	r24, X
     b48:	14 97       	sbiw	r26, 0x04	; 4
     b4a:	84 83       	std	Z+4, r24	; 0x04
    rSlot.adr2    = RxPacket->data[ 9];                 // loco address high
     b4c:	19 96       	adiw	r26, 0x09	; 9
     b4e:	8c 91       	ld	r24, X
     b50:	81 87       	std	Z+9, r24	; 0x09
     b52:	0c c0       	rjmp	.+24     	; 0xb6c <vCopySlotFromRxPacket+0x44>
  }
  else
  {
    rSlot.stat    |= RxPacket->data[ 3] & ~DEC_MODE_MASK; // slot status
     b54:	e7 ec       	ldi	r30, 0xC7	; 199
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	a0 91 c5 00 	lds	r26, 0x00C5	; 0x8000c5 <RxPacket>
     b5c:	b0 91 c6 00 	lds	r27, 0x00C6	; 0x8000c6 <RxPacket+0x1>
     b60:	13 96       	adiw	r26, 0x03	; 3
     b62:	8c 91       	ld	r24, X
     b64:	88 7f       	andi	r24, 0xF8	; 248
     b66:	93 81       	ldd	r25, Z+3	; 0x03
     b68:	89 2b       	or	r24, r25
     b6a:	83 83       	std	Z+3, r24	; 0x03
  }

  rSlot.slot      = RxPacket->data[ 2];                 // slot number for this request
     b6c:	e0 91 c5 00 	lds	r30, 0x00C5	; 0x8000c5 <RxPacket>
     b70:	f0 91 c6 00 	lds	r31, 0x00C6	; 0x8000c6 <RxPacket+0x1>
     b74:	82 81       	ldd	r24, Z+2	; 0x02
     b76:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <rSlot+0x2>

  if (  (bFrediVersion == FREDI_VERSION_INCREMENT_SWITCH)      
        || (bFrediVersion == FREDI_VERSION_ANALOG          ))
     b7a:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <bFrediVersion>
    rSlot.stat    |= RxPacket->data[ 3] & ~DEC_MODE_MASK; // slot status
  }

  rSlot.slot      = RxPacket->data[ 2];                 // slot number for this request

  if (  (bFrediVersion == FREDI_VERSION_INCREMENT_SWITCH)      
     b7e:	9e ef       	ldi	r25, 0xFE	; 254
     b80:	98 0f       	add	r25, r24
     b82:	92 30       	cpi	r25, 0x02	; 2
     b84:	10 f5       	brcc	.+68     	; 0xbca <vCopySlotFromRxPacket+0xa2>
        || (bFrediVersion == FREDI_VERSION_ANALOG          ))
  {
    rSlot.dirf = RxPacket->data[ 6] & ~0x20;            // get direction by switch position                          
     b86:	96 81       	ldd	r25, Z+6	; 0x06
     b88:	9f 7d       	andi	r25, 0xDF	; 223
     b8a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <rSlot+0x6>

    if (bCurrentKey & Key_Dir)
     b8e:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <bCurrentKey>
     b92:	22 23       	and	r18, r18
     b94:	1c f4       	brge	.+6      	; 0xb9c <vCopySlotFromRxPacket+0x74>
    {
      rSlot.dirf |=  0x20;                                    
     b96:	90 62       	ori	r25, 0x20	; 32
     b98:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <rSlot+0x6>
    }

    if ((rSlot.dirf & 0x20) != (RxPacket->data[ 6] & 0x20)) // compare Fredi direction with slot direction
     b9c:	20 91 cd 00 	lds	r18, 0x00CD	; 0x8000cd <rSlot+0x6>
     ba0:	96 81       	ldd	r25, Z+6	; 0x06
     ba2:	92 27       	eor	r25, r18
     ba4:	95 ff       	sbrs	r25, 5
     ba6:	06 c0       	rjmp	.+12     	; 0xbb4 <vCopySlotFromRxPacket+0x8c>
    {
      rSlot.spd = 1;                                    // direction isn't matching so stop train 
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <rSlot+0x5>
      fSetSpeed = FALSE;                                // and show blinking
     bae:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <fSetSpeed>
     bb2:	14 c0       	rjmp	.+40     	; 0xbdc <vCopySlotFromRxPacket+0xb4>
    }
    else if (bFrediVersion == FREDI_VERSION_ANALOG)
     bb4:	83 30       	cpi	r24, 0x03	; 3
     bb6:	29 f4       	brne	.+10     	; 0xbc2 <vCopySlotFromRxPacket+0x9a>
    {
      rSlot.spd = potAdcSpeedValue;                     // direction is matching, get speed by poti
     bb8:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <potAdcSpeedValue>
     bbc:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <rSlot+0x5>
     bc0:	0d c0       	rjmp	.+26     	; 0xbdc <vCopySlotFromRxPacket+0xb4>
    }
    else
    {
      rSlot.spd = RxPacket->data[ 5];                   // a increment-switch-Fredi takes speed from slot
     bc2:	85 81       	ldd	r24, Z+5	; 0x05
     bc4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <rSlot+0x5>
     bc8:	09 c0       	rjmp	.+18     	; 0xbdc <vCopySlotFromRxPacket+0xb4>
    }                                                         
  }
  else
  {
    rSlot.spd   = RxPacket->data[ 5];                   // command speed
     bca:	85 81       	ldd	r24, Z+5	; 0x05
     bcc:	a7 ec       	ldi	r26, 0xC7	; 199
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	15 96       	adiw	r26, 0x05	; 5
     bd2:	8c 93       	st	X, r24
     bd4:	15 97       	sbiw	r26, 0x05	; 5
    rSlot.dirf  = RxPacket->data[ 6];                   // direction and function keys
     bd6:	86 81       	ldd	r24, Z+6	; 0x06
     bd8:	16 96       	adiw	r26, 0x06	; 6
     bda:	8c 93       	st	X, r24
  }                                                           

  rSlot.trk       = RxPacket->data[ 7];                 // track status
     bdc:	a0 91 c5 00 	lds	r26, 0x00C5	; 0x8000c5 <RxPacket>
     be0:	b0 91 c6 00 	lds	r27, 0x00C6	; 0x8000c6 <RxPacket+0x1>
     be4:	17 96       	adiw	r26, 0x07	; 7
     be6:	8c 91       	ld	r24, X
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	e7 ec       	ldi	r30, 0xC7	; 199
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	87 83       	std	Z+7, r24	; 0x07
  rSlot.ss2       = RxPacket->data[ 8];                 // slot status 2 (tells how to use ID1/ID2 & ADV Consist
     bf0:	18 96       	adiw	r26, 0x08	; 8
     bf2:	8c 91       	ld	r24, X
     bf4:	18 97       	sbiw	r26, 0x08	; 8
     bf6:	80 87       	std	Z+8, r24	; 0x08
  rSlot.snd       = RxPacket->data[10];                 // Sound 1-4 / F5-F8
     bf8:	1a 96       	adiw	r26, 0x0a	; 10
     bfa:	8c 91       	ld	r24, X
     bfc:	82 87       	std	Z+10, r24	; 0x0a

  GET_SPDCNT_BY_SLOTSPD                                 // calculate real speed
     bfe:	81 e2       	ldi	r24, 0x21	; 33
     c00:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <bSpdCnt>
     c04:	25 81       	ldd	r18, Z+5	; 0x05
     c06:	e8 e6       	ldi	r30, 0x68	; 104
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	91 91       	ld	r25, Z+
     c0e:	29 17       	cp	r18, r25
     c10:	28 f0       	brcs	.+10     	; 0xc1c <vCopySlotFromRxPacket+0xf4>
     c12:	90 81       	ld	r25, Z
     c14:	29 17       	cp	r18, r25
     c16:	10 f4       	brcc	.+4      	; 0xc1c <vCopySlotFromRxPacket+0xf4>
     c18:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <bSpdCnt>
     c1c:	8f 5f       	subi	r24, 0xFF	; 255
     c1e:	81 32       	cpi	r24, 0x21	; 33
     c20:	a9 f7       	brne	.-22     	; 0xc0c <vCopySlotFromRxPacket+0xe4>
}
     c22:	08 95       	ret

00000c24 <vSetUnconnected>:
 * ARGUMENTS   : none
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void vSetUnconnected(void)
{
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
  rSlot.adr   = 0;
     c28:	c7 ec       	ldi	r28, 0xC7	; 199
     c2a:	d0 e0       	ldi	r29, 0x00	; 0
     c2c:	1c 82       	std	Y+4, r1	; 0x04
  rSlot.adr2  = 0;
     c2e:	19 86       	std	Y+9, r1	; 0x09

  eeprom_write_byte(&abEEPROM[EEPROM_ADR_LOCO_LB],  rSlot.adr);
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	83 e0       	ldi	r24, 0x03	; 3
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	ea d6       	rcall	.+3540   	; 0x1a0c <eeprom_write_byte>
  eeprom_write_byte(&abEEPROM[EEPROM_ADR_LOCO_HB],  rSlot.adr2);
     c38:	69 85       	ldd	r22, Y+9	; 0x09
     c3a:	82 e0       	ldi	r24, 0x02	; 2
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	e6 d6       	rcall	.+3532   	; 0x1a0c <eeprom_write_byte>
  eeprom_write_byte(&abEEPROM[EEPROM_DECODER_TYPE], EEPROM_DECODER_TYPE_DEFAULT);
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	84 e0       	ldi	r24, 0x04	; 4
     c44:	90 e0       	ldi	r25, 0x00	; 0

  vSetState(THR_STATE_UNCONNECTED);
     c46:	e2 d6       	rcall	.+3524   	; 0x1a0c <eeprom_write_byte>
     c48:	80 e2       	ldi	r24, 0x20	; 32
     c4a:	e1 db       	rcall	.-2110   	; 0x40e <vSetState>
}
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	08 95       	ret

00000c52 <vProcessRxLoconetMessage>:
 * ARGUMENTS   : none
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void vProcessRxLoconetMessage(void)
{
     c52:	cf 93       	push	r28
  RxPacket = recvLocoNetPacket() ;
     c54:	df 93       	push	r29
     c56:	6a d6       	rcall	.+3284   	; 0x192c <recvLocoNetPacket>
     c58:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <RxPacket+0x1>
     c5c:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <RxPacket>

  if (RxPacket)
     c60:	00 97       	sbiw	r24, 0x00	; 0
     c62:	09 f4       	brne	.+2      	; 0xc66 <vProcessRxLoconetMessage+0x14>
  {
    switch (RxPacket->data[0]) // OP_CODE
     c64:	1a c1       	rjmp	.+564    	; 0xe9a <vProcessRxLoconetMessage+0x248>
     c66:	dc 01       	movw	r26, r24
     c68:	2c 91       	ld	r18, X
     c6a:	22 3a       	cpi	r18, 0xA2	; 162
     c6c:	09 f4       	brne	.+2      	; 0xc70 <vProcessRxLoconetMessage+0x1e>
     c6e:	01 c1       	rjmp	.+514    	; 0xe72 <vProcessRxLoconetMessage+0x220>
     c70:	38 f4       	brcc	.+14     	; 0xc80 <vProcessRxLoconetMessage+0x2e>
     c72:	20 3a       	cpi	r18, 0xA0	; 160
     c74:	09 f4       	brne	.+2      	; 0xc78 <vProcessRxLoconetMessage+0x26>
     c76:	a5 c0       	rjmp	.+330    	; 0xdc2 <vProcessRxLoconetMessage+0x170>
     c78:	21 3a       	cpi	r18, 0xA1	; 161
     c7a:	09 f4       	brne	.+2      	; 0xc7e <vProcessRxLoconetMessage+0x2c>
     c7c:	c2 c0       	rjmp	.+388    	; 0xe02 <vProcessRxLoconetMessage+0x1b0>
     c7e:	09 c1       	rjmp	.+530    	; 0xe92 <vProcessRxLoconetMessage+0x240>
     c80:	24 3b       	cpi	r18, 0xB4	; 180
     c82:	09 f4       	brne	.+2      	; 0xc86 <vProcessRxLoconetMessage+0x34>
     c84:	70 c0       	rjmp	.+224    	; 0xd66 <vProcessRxLoconetMessage+0x114>
     c86:	27 3e       	cpi	r18, 0xE7	; 231
     c88:	09 f0       	breq	.+2      	; 0xc8c <vProcessRxLoconetMessage+0x3a>
    {
/***************************************/
//  Slot Read Data
/***************************************/
    case OPC_SL_RD_DATA:
      switch (bThrState)
     c8a:	03 c1       	rjmp	.+518    	; 0xe92 <vProcessRxLoconetMessage+0x240>
     c8c:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <bThrState>
     c90:	24 31       	cpi	r18, 0x14	; 20
     c92:	89 f0       	breq	.+34     	; 0xcb6 <vProcessRxLoconetMessage+0x64>
     c94:	26 31       	cpi	r18, 0x16	; 22
     c96:	09 f4       	brne	.+2      	; 0xc9a <vProcessRxLoconetMessage+0x48>
     c98:	49 c0       	rjmp	.+146    	; 0xd2c <vProcessRxLoconetMessage+0xda>
     c9a:	2a 30       	cpi	r18, 0x0A	; 10
     c9c:	09 f0       	breq	.+2      	; 0xca0 <vProcessRxLoconetMessage+0x4e>
      {
      case THR_STATE_ACQUIRE_LOCO_GET: // response of Dispatch Get
        {
          if ((RxPacket->data[3] & LOCO_IDLE) == LOCO_IDLE)
     c9e:	f9 c0       	rjmp	.+498    	; 0xe92 <vProcessRxLoconetMessage+0x240>
     ca0:	fc 01       	movw	r30, r24
     ca2:	83 81       	ldd	r24, Z+3	; 0x03
          {
            vCopySlotFromRxPacket();
     ca4:	85 ff       	sbrs	r24, 5
            vSetState(THR_STATE_ACQUIRE_LOCO_WRITE);
     ca6:	f5 c0       	rjmp	.+490    	; 0xe92 <vProcessRxLoconetMessage+0x240>
     ca8:	3f df       	rcall	.-386    	; 0xb28 <vCopySlotFromRxPacket>
            sendLocoNetWriteSlotData(&rSlot);
     caa:	8b e0       	ldi	r24, 0x0B	; 11
     cac:	b0 db       	rcall	.-2208   	; 0x40e <vSetState>
     cae:	87 ec       	ldi	r24, 0xC7	; 199
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	67 dc       	rcall	.-1842   	; 0x582 <sendLocoNetWriteSlotData>
          }
        }
        break;
      case THR_STATE_RECONNECT_GET_SLOT: // response of Get Slot By Adress
        {
          if (  (rSlot.adr  == RxPacket->data[4])
     cb4:	ee c0       	rjmp	.+476    	; 0xe92 <vProcessRxLoconetMessage+0x240>
     cb6:	30 91 cb 00 	lds	r19, 0x00CB	; 0x8000cb <rSlot+0x4>
     cba:	dc 01       	movw	r26, r24
     cbc:	14 96       	adiw	r26, 0x04	; 4
     cbe:	2c 91       	ld	r18, X
     cc0:	14 97       	sbiw	r26, 0x04	; 4
     cc2:	32 13       	cpse	r19, r18
             && (rSlot.adr2 == RxPacket->data[9]))
     cc4:	e6 c0       	rjmp	.+460    	; 0xe92 <vProcessRxLoconetMessage+0x240>
     cc6:	30 91 d0 00 	lds	r19, 0x00D0	; 0x8000d0 <rSlot+0x9>
     cca:	19 96       	adiw	r26, 0x09	; 9
     ccc:	2c 91       	ld	r18, X
     cce:	19 97       	sbiw	r26, 0x09	; 9
     cd0:	32 13       	cpse	r19, r18
          { // slot not changed and in use , so we can use this slot further on
            if ((RxPacket->data[3] & LOCO_IN_USE) == LOCO_IN_USE)
     cd2:	df c0       	rjmp	.+446    	; 0xe92 <vProcessRxLoconetMessage+0x240>
     cd4:	13 96       	adiw	r26, 0x03	; 3
     cd6:	2c 91       	ld	r18, X
     cd8:	13 97       	sbiw	r26, 0x03	; 3
     cda:	20 73       	andi	r18, 0x30	; 48
     cdc:	20 33       	cpi	r18, 0x30	; 48
            {
              if (  (  (rSlot.id1 == RxPacket->data[11]) && (rSlot.id2 == RxPacket->data[12]))
     cde:	e1 f4       	brne	.+56     	; 0xd18 <vProcessRxLoconetMessage+0xc6>
     ce0:	1b 96       	adiw	r26, 0x0b	; 11
     ce2:	2c 91       	ld	r18, X
     ce4:	1b 97       	sbiw	r26, 0x0b	; 11
     ce6:	30 91 d2 00 	lds	r19, 0x00D2	; 0x8000d2 <rSlot+0xb>
     cea:	32 13       	cpse	r19, r18
     cec:	06 c0       	rjmp	.+12     	; 0xcfa <vProcessRxLoconetMessage+0xa8>
     cee:	40 91 d3 00 	lds	r20, 0x00D3	; 0x8000d3 <rSlot+0xc>
     cf2:	1c 96       	adiw	r26, 0x0c	; 12
     cf4:	3c 91       	ld	r19, X
     cf6:	43 17       	cp	r20, r19
                 || (  (0         == RxPacket->data[11]) && (0         == RxPacket->data[12])))
     cf8:	31 f0       	breq	.+12     	; 0xd06 <vProcessRxLoconetMessage+0xb4>
     cfa:	21 11       	cpse	r18, r1
     cfc:	0b c0       	rjmp	.+22     	; 0xd14 <vProcessRxLoconetMessage+0xc2>
              {
                vCopySlotFromRxPacket();
     cfe:	fc 01       	movw	r30, r24
                vSetState(THR_STATE_RECONNECT_WRITE);
     d00:	84 85       	ldd	r24, Z+12	; 0x0c
     d02:	81 11       	cpse	r24, r1
                sendLocoNetWriteSlotData(&rSlot);
     d04:	07 c0       	rjmp	.+14     	; 0xd14 <vProcessRxLoconetMessage+0xc2>
     d06:	10 df       	rcall	.-480    	; 0xb28 <vCopySlotFromRxPacket>
     d08:	88 e1       	ldi	r24, 0x18	; 24
     d0a:	81 db       	rcall	.-2302   	; 0x40e <vSetState>
              }
              else
              {
                vSetUnconnected();
     d0c:	87 ec       	ldi	r24, 0xC7	; 199
     d0e:	90 e0       	ldi	r25, 0x00	; 0
              }
            }
            else
            {
              vSetState(THR_STATE_RECONNECT_NULL_MOVE);
     d10:	38 dc       	rcall	.-1936   	; 0x582 <sendLocoNetWriteSlotData>
     d12:	bf c0       	rjmp	.+382    	; 0xe92 <vProcessRxLoconetMessage+0x240>
              sendLocoNetMove(RxPacket->data[2], RxPacket->data[2]);
     d14:	87 df       	rcall	.-242    	; 0xc24 <vSetUnconnected>
     d16:	bd c0       	rjmp	.+378    	; 0xe92 <vProcessRxLoconetMessage+0x240>
     d18:	86 e1       	ldi	r24, 0x16	; 22
     d1a:	79 db       	rcall	.-2318   	; 0x40e <vSetState>
     d1c:	e0 91 c5 00 	lds	r30, 0x00C5	; 0x8000c5 <RxPacket>
     d20:	f0 91 c6 00 	lds	r31, 0x00C6	; 0x8000c6 <RxPacket+0x1>
     d24:	82 81       	ldd	r24, Z+2	; 0x02
          }
        }
        break;
      case THR_STATE_RECONNECT_NULL_MOVE:
        {
          if (  (rSlot.adr  == RxPacket->data[4]) 
     d26:	68 2f       	mov	r22, r24
     d28:	78 dc       	rcall	.-1808   	; 0x61a <sendLocoNetMove>
     d2a:	b3 c0       	rjmp	.+358    	; 0xe92 <vProcessRxLoconetMessage+0x240>
     d2c:	30 91 cb 00 	lds	r19, 0x00CB	; 0x8000cb <rSlot+0x4>
     d30:	dc 01       	movw	r26, r24
     d32:	14 96       	adiw	r26, 0x04	; 4
     d34:	2c 91       	ld	r18, X
             && (rSlot.adr2 == RxPacket->data[9]))
     d36:	14 97       	sbiw	r26, 0x04	; 4
     d38:	32 13       	cpse	r19, r18
     d3a:	ab c0       	rjmp	.+342    	; 0xe92 <vProcessRxLoconetMessage+0x240>
     d3c:	30 91 d0 00 	lds	r19, 0x00D0	; 0x8000d0 <rSlot+0x9>
          { // slot not changed and in use , so we can use this slot further on
            if ((RxPacket->data[3] & LOCO_IN_USE) == LOCO_IN_USE)
     d40:	19 96       	adiw	r26, 0x09	; 9
     d42:	2c 91       	ld	r18, X
            {
              vCopySlotFromRxPacket();
     d44:	19 97       	sbiw	r26, 0x09	; 9
     d46:	32 13       	cpse	r19, r18
              vSetState(THR_STATE_RECONNECT_WRITE);
     d48:	a4 c0       	rjmp	.+328    	; 0xe92 <vProcessRxLoconetMessage+0x240>
     d4a:	13 96       	adiw	r26, 0x03	; 3
     d4c:	8c 91       	ld	r24, X
              sendLocoNetWriteSlotData(&rSlot);
     d4e:	80 73       	andi	r24, 0x30	; 48
     d50:	80 33       	cpi	r24, 0x30	; 48
     d52:	39 f4       	brne	.+14     	; 0xd62 <vProcessRxLoconetMessage+0x110>
     d54:	e9 de       	rcall	.-558    	; 0xb28 <vCopySlotFromRxPacket>
     d56:	88 e1       	ldi	r24, 0x18	; 24
            }
            else
            {
              vSetUnconnected();
     d58:	5a db       	rcall	.-2380   	; 0x40e <vSetState>
     d5a:	87 ec       	ldi	r24, 0xC7	; 199
     d5c:	90 e0       	ldi	r25, 0x00	; 0
      break;
/***************************************/
//  Long Acknowledge
/***************************************/
    case OPC_LONG_ACK:
      switch (bThrState)
     d5e:	11 dc       	rcall	.-2014   	; 0x582 <sendLocoNetWriteSlotData>
     d60:	98 c0       	rjmp	.+304    	; 0xe92 <vProcessRxLoconetMessage+0x240>
     d62:	60 df       	rcall	.-320    	; 0xc24 <vSetUnconnected>
     d64:	96 c0       	rjmp	.+300    	; 0xe92 <vProcessRxLoconetMessage+0x240>
     d66:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <bThrState>
     d6a:	2b 30       	cpi	r18, 0x0B	; 11
     d6c:	81 f0       	breq	.+32     	; 0xd8e <vProcessRxLoconetMessage+0x13c>
     d6e:	18 f4       	brcc	.+6      	; 0xd76 <vProcessRxLoconetMessage+0x124>
     d70:	2a 30       	cpi	r18, 0x0A	; 10
     d72:	29 f1       	breq	.+74     	; 0xdbe <vProcessRxLoconetMessage+0x16c>
     d74:	8e c0       	rjmp	.+284    	; 0xe92 <vProcessRxLoconetMessage+0x240>
      {
      case THR_STATE_UNCONNECTED_WRITE:
        if (RxPacket->data[1] == (OPC_WR_SL_DATA & 0x7f))
     d76:	28 31       	cpi	r18, 0x18	; 24
     d78:	51 f0       	breq	.+20     	; 0xd8e <vProcessRxLoconetMessage+0x13c>
     d7a:	2e 31       	cpi	r18, 0x1E	; 30
     d7c:	09 f0       	breq	.+2      	; 0xd80 <vProcessRxLoconetMessage+0x12e>
        {
          vSetUnconnected();
     d7e:	89 c0       	rjmp	.+274    	; 0xe92 <vProcessRxLoconetMessage+0x240>
     d80:	fc 01       	movw	r30, r24
        }
        break;
      case THR_STATE_RECONNECT_WRITE: // response of Get Slot By Adress
      case THR_STATE_ACQUIRE_LOCO_WRITE:
        if (RxPacket->data[1] == (OPC_WR_SL_DATA & 0x7f))
     d82:	81 81       	ldd	r24, Z+1	; 0x01
     d84:	8f 36       	cpi	r24, 0x6F	; 111
     d86:	09 f0       	breq	.+2      	; 0xd8a <vProcessRxLoconetMessage+0x138>
     d88:	84 c0       	rjmp	.+264    	; 0xe92 <vProcessRxLoconetMessage+0x240>
        {
          eeprom_write_byte(&abEEPROM[EEPROM_ADR_LOCO_LB],  rSlot.adr);
     d8a:	4c df       	rcall	.-360    	; 0xc24 <vSetUnconnected>
     d8c:	82 c0       	rjmp	.+260    	; 0xe92 <vProcessRxLoconetMessage+0x240>
     d8e:	dc 01       	movw	r26, r24
     d90:	11 96       	adiw	r26, 0x01	; 1
     d92:	8c 91       	ld	r24, X
          eeprom_write_byte(&abEEPROM[EEPROM_ADR_LOCO_HB],  rSlot.adr2);
     d94:	8f 36       	cpi	r24, 0x6F	; 111
     d96:	09 f0       	breq	.+2      	; 0xd9a <vProcessRxLoconetMessage+0x148>
     d98:	7c c0       	rjmp	.+248    	; 0xe92 <vProcessRxLoconetMessage+0x240>
     d9a:	c7 ec       	ldi	r28, 0xC7	; 199
     d9c:	d0 e0       	ldi	r29, 0x00	; 0
          eeprom_write_byte(&abEEPROM[EEPROM_DECODER_TYPE], rSlot.stat & DEC_MODE_MASK);
     d9e:	6c 81       	ldd	r22, Y+4	; 0x04
     da0:	83 e0       	ldi	r24, 0x03	; 3
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	33 d6       	rcall	.+3174   	; 0x1a0c <eeprom_write_byte>
     da6:	69 85       	ldd	r22, Y+9	; 0x09
     da8:	82 e0       	ldi	r24, 0x02	; 2

          vSetState(THR_STATE_CONNECTED);
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	2f d6       	rcall	.+3166   	; 0x1a0c <eeprom_write_byte>
     dae:	6b 81       	ldd	r22, Y+3	; 0x03
     db0:	67 70       	andi	r22, 0x07	; 7
        }
        break;
      case THR_STATE_ACQUIRE_LOCO_GET: // response of Dispatch Get
        vSetUnconnected();
     db2:	84 e0       	ldi	r24, 0x04	; 4
     db4:	90 e0       	ldi	r25, 0x00	; 0
        break;
     db6:	2a d6       	rcall	.+3156   	; 0x1a0c <eeprom_write_byte>
      break;
/***************************************/
//  Set Slot Speed
/***************************************/
    case OPC_LOCO_SPD:
      if (  (bThrState         == THR_STATE_CONNECTED)
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	29 db       	rcall	.-2478   	; 0x40e <vSetState>
     dbc:	6a c0       	rjmp	.+212    	; 0xe92 <vProcessRxLoconetMessage+0x240>
     dbe:	32 df       	rcall	.-412    	; 0xc24 <vSetUnconnected>
     dc0:	68 c0       	rjmp	.+208    	; 0xe92 <vProcessRxLoconetMessage+0x240>
         && (RxPacket->data[1] == rSlot.slot         ))
     dc2:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <bThrState>
     dc6:	21 30       	cpi	r18, 0x01	; 1
     dc8:	09 f0       	breq	.+2      	; 0xdcc <vProcessRxLoconetMessage+0x17a>
     dca:	63 c0       	rjmp	.+198    	; 0xe92 <vProcessRxLoconetMessage+0x240>
     dcc:	fc 01       	movw	r30, r24
      {
        int i;

        rSlot.spd = RxPacket->data[2];
     dce:	31 81       	ldd	r19, Z+1	; 0x01
     dd0:	20 91 c9 00 	lds	r18, 0x00C9	; 0x8000c9 <rSlot+0x2>
        
        GET_SPDCNT_BY_SLOTSPD
     dd4:	32 13       	cpse	r19, r18
     dd6:	5d c0       	rjmp	.+186    	; 0xe92 <vProcessRxLoconetMessage+0x240>
     dd8:	22 81       	ldd	r18, Z+2	; 0x02
     dda:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <rSlot+0x5>
     dde:	81 e2       	ldi	r24, 0x21	; 33
     de0:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <bSpdCnt>
     de4:	e8 e6       	ldi	r30, 0x68	; 104
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	91 91       	ld	r25, Z+
     dec:	29 17       	cp	r18, r25
     dee:	28 f0       	brcs	.+10     	; 0xdfa <vProcessRxLoconetMessage+0x1a8>
     df0:	90 81       	ld	r25, Z
     df2:	29 17       	cp	r18, r25
     df4:	10 f4       	brcc	.+4      	; 0xdfa <vProcessRxLoconetMessage+0x1a8>
     df6:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <bSpdCnt>
      break;
/***************************************/
//  Set Slot Direction and F0 to F4
/***************************************/
    case OPC_LOCO_DIRF:
      if (  (bThrState         == THR_STATE_CONNECTED)
     dfa:	8f 5f       	subi	r24, 0xFF	; 255
     dfc:	81 32       	cpi	r24, 0x21	; 33
     dfe:	a9 f7       	brne	.-22     	; 0xdea <vProcessRxLoconetMessage+0x198>
     e00:	48 c0       	rjmp	.+144    	; 0xe92 <vProcessRxLoconetMessage+0x240>
         && (RxPacket->data[1] == rSlot.slot         ))
     e02:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <bThrState>
     e06:	21 30       	cpi	r18, 0x01	; 1
     e08:	09 f0       	breq	.+2      	; 0xe0c <vProcessRxLoconetMessage+0x1ba>
     e0a:	43 c0       	rjmp	.+134    	; 0xe92 <vProcessRxLoconetMessage+0x240>
     e0c:	dc 01       	movw	r26, r24
     e0e:	11 96       	adiw	r26, 0x01	; 1
     e10:	3c 91       	ld	r19, X
      {

        if (  (bFrediVersion == FREDI_VERSION_INCREMENT_SWITCH)
     e12:	11 97       	sbiw	r26, 0x01	; 1
     e14:	20 91 c9 00 	lds	r18, 0x00C9	; 0x8000c9 <rSlot+0x2>
     e18:	32 13       	cpse	r19, r18
              || (bFrediVersion == FREDI_VERSION_ANALOG          ))
        {
          // if switch is not in direction of direction flag, so change 
          // directionflag to synchronize the direction
          if ( (rSlot.dirf & 0x20) != (RxPacket->data[2] & 0x20))
     e1a:	3b c0       	rjmp	.+118    	; 0xe92 <vProcessRxLoconetMessage+0x240>
     e1c:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <bFrediVersion>
     e20:	22 50       	subi	r18, 0x02	; 2
     e22:	22 30       	cpi	r18, 0x02	; 2
     e24:	c0 f4       	brcc	.+48     	; 0xe56 <vProcessRxLoconetMessage+0x204>
     e26:	20 91 cd 00 	lds	r18, 0x00CD	; 0x8000cd <rSlot+0x6>
     e2a:	12 96       	adiw	r26, 0x02	; 2
          {
            rSlot.dirf &= 0x20;                       // get direction of fredi
     e2c:	3c 91       	ld	r19, X
     e2e:	12 97       	sbiw	r26, 0x02	; 2
     e30:	42 2f       	mov	r20, r18
     e32:	43 27       	eor	r20, r19
            rSlot.dirf |= (RxPacket->data[2] & ~0x20); // and add F0..F4
     e34:	45 ff       	sbrs	r20, 5
     e36:	0c c0       	rjmp	.+24     	; 0xe50 <vProcessRxLoconetMessage+0x1fe>
     e38:	20 72       	andi	r18, 0x20	; 32
     e3a:	e7 ec       	ldi	r30, 0xC7	; 199
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
            sendLocoNetDirf(&rSlot);
     e3e:	26 83       	std	Z+6, r18	; 0x06
     e40:	12 96       	adiw	r26, 0x02	; 2
     e42:	8c 91       	ld	r24, X
     e44:	8f 7d       	andi	r24, 0xDF	; 223
          }
          else
          {
            rSlot.dirf = RxPacket->data[2];          // direction is equal, so take F0..F4
     e46:	28 2b       	or	r18, r24
     e48:	26 83       	std	Z+6, r18	; 0x06
     e4a:	cf 01       	movw	r24, r30
          }
        }
        else
        { // take direction as new one
          rSlot.dirf = RxPacket->data[2];
     e4c:	8c db       	rcall	.-2280   	; 0x566 <sendLocoNetDirf>
     e4e:	07 c0       	rjmp	.+14     	; 0xe5e <vProcessRxLoconetMessage+0x20c>
     e50:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <rSlot+0x6>
        }

        if (rSlot.dirf & 0x20)
     e54:	04 c0       	rjmp	.+8      	; 0xe5e <vProcessRxLoconetMessage+0x20c>
     e56:	fc 01       	movw	r30, r24
     e58:	82 81       	ldd	r24, Z+2	; 0x02
     e5a:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <rSlot+0x6>
        {
          LED_PORT &= ~_BV(LED_GREEN_R);
          LED_PORT |=  _BV(LED_GREEN_L); 
     e5e:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <rSlot+0x6>
        }
        else
        {
          LED_PORT &= ~_BV(LED_GREEN_L); 
     e62:	85 ff       	sbrs	r24, 5
          LED_PORT |=  _BV(LED_GREEN_R);
     e64:	03 c0       	rjmp	.+6      	; 0xe6c <vProcessRxLoconetMessage+0x21a>
     e66:	aa 98       	cbi	0x15, 2	; 21
      break;
/***************************************/
//  Set Slot Sound Functions, 
/***************************************/
    case OPC_LOCO_SND:
      if (  (bThrState         == THR_STATE_CONNECTED)
     e68:	ab 9a       	sbi	0x15, 3	; 21
     e6a:	13 c0       	rjmp	.+38     	; 0xe92 <vProcessRxLoconetMessage+0x240>
     e6c:	ab 98       	cbi	0x15, 3	; 21
     e6e:	aa 9a       	sbi	0x15, 2	; 21
         && (RxPacket->data[1] == rSlot.slot         ))
     e70:	10 c0       	rjmp	.+32     	; 0xe92 <vProcessRxLoconetMessage+0x240>
     e72:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <bThrState>
     e76:	21 30       	cpi	r18, 0x01	; 1
     e78:	61 f4       	brne	.+24     	; 0xe92 <vProcessRxLoconetMessage+0x240>
     e7a:	dc 01       	movw	r26, r24
     e7c:	11 96       	adiw	r26, 0x01	; 1
     e7e:	3c 91       	ld	r19, X
      {
        rSlot.snd = RxPacket->data[2];
     e80:	11 97       	sbiw	r26, 0x01	; 1
     e82:	20 91 c9 00 	lds	r18, 0x00C9	; 0x8000c9 <rSlot+0x2>
     e86:	32 13       	cpse	r19, r18
/***************************************/
    default:
      break;
    }

    RxPacket = 0;  
     e88:	04 c0       	rjmp	.+8      	; 0xe92 <vProcessRxLoconetMessage+0x240>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	8c 91       	ld	r24, X
     e8e:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <rSlot+0xa>
  }
}
     e92:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <RxPacket+0x1>
     e96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <RxPacket>
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	08 95       	ret

00000ea0 <main>:
 * RETURN VALUE: int, never reached, cause of endless loop
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
int main(void)
{
  RESET_RESET_SOURCE(); // Clear Reset Status Register (WDRF,BORF,EXTRF,PORF)
     ea0:	14 be       	out	0x34, r1	; 52
  /***************************************/
  //  init analog input for getting 
  //  FrediVersion
  /***************************************/

  DDRC  &= ~_BV(DDC5); // set version detector to tristate to get kind of fredi
     ea2:	a5 98       	cbi	0x14, 5	; 20
  PORTC |=  _BV(PC5);
     ea4:	ad 9a       	sbi	0x15, 5	; 21

  if ( bit_is_set(PINC, PINC5))
     ea6:	9d 9b       	sbis	0x13, 5	; 19
     ea8:	04 c0       	rjmp	.+8      	; 0xeb2 <main+0x12>
  {
    bFrediVersion = FREDI_VERSION_ANALOG;
     eaa:	83 e0       	ldi	r24, 0x03	; 3
     eac:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <bFrediVersion>
     eb0:	03 c0       	rjmp	.+6      	; 0xeb8 <main+0x18>
  }
  else
  {
    bFrediVersion = FREDI_VERSION_INCREMENT;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <bFrediVersion>
  
  /***************************************/
  //  init throttle slot
  /***************************************/

  bSpdCnt = 0;
     eb8:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <bSpdCnt>

  rSlot.command   = OPC_WR_SL_DATA;
     ebc:	e7 ec       	ldi	r30, 0xC7	; 199
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	8f ee       	ldi	r24, 0xEF	; 239
     ec2:	80 83       	st	Z, r24
  rSlot.mesg_size = 14;
     ec4:	8e e0       	ldi	r24, 0x0E	; 14
     ec6:	81 83       	std	Z+1, r24	; 0x01
  rSlot.slot      = 0;                        /* slot number for this request                         */
     ec8:	12 82       	std	Z+2, r1	; 0x02
  rSlot.stat      = 0;                        /* slot status                                          */
     eca:	13 82       	std	Z+3, r1	; 0x03
  rSlot.adr       = 0;                        /* loco address                                         */
     ecc:	14 82       	std	Z+4, r1	; 0x04
  rSlot.spd       = 0;                        /* command speed                                        */
     ece:	15 82       	std	Z+5, r1	; 0x05
  rSlot.dirf      = 0;                        /* direction and F0-F4 bits                             */
     ed0:	16 82       	std	Z+6, r1	; 0x06
  rSlot.trk       = 0;                        /* track status                                         */
     ed2:	17 82       	std	Z+7, r1	; 0x07
  rSlot.ss2       = 0;                        /* slot status 2 (tells how to use ID1/ID2 & ADV Consist*/
     ed4:	10 86       	std	Z+8, r1	; 0x08
  rSlot.adr2      = 0;                        /* loco address high                                    */
     ed6:	11 86       	std	Z+9, r1	; 0x09
  rSlot.snd       = 0;                        /* Sound 1-4 / F5-F8                                    */
     ed8:	12 86       	std	Z+10, r1	; 0x0a

  if ((eeprom_read_byte(&abEEPROM[EEPROM_IMAGE]) != EEPROM_IMAGE_DEFAULT))
     eda:	85 e0       	ldi	r24, 0x05	; 5
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	8e d5       	rcall	.+2844   	; 0x19fc <eeprom_read_byte>
     ee0:	85 35       	cpi	r24, 0x55	; 85
  {
    vSetState(THR_STATE_SELFTEST);
     ee2:	41 f1       	breq	.+80     	; 0xf34 <main+0x94>
     ee4:	84 e6       	ldi	r24, 0x64	; 100

    eeprom_write_byte(&abEEPROM[EEPROM_ADR_LOCO_LB], 0);                 // no loco active at selftest
     ee6:	93 da       	rcall	.-2778   	; 0x40e <vSetState>
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	83 e0       	ldi	r24, 0x03	; 3
    eeprom_write_byte(&abEEPROM[EEPROM_ADR_LOCO_HB], 0);
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	8e d5       	rcall	.+2844   	; 0x1a0c <eeprom_write_byte>
     ef0:	60 e0       	ldi	r22, 0x00	; 0

    eeprom_write_byte(&abEEPROM[EEPROM_DECODER_TYPE], EEPROM_DECODER_TYPE_DEFAULT);
     ef2:	82 e0       	ldi	r24, 0x02	; 2
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	8a d5       	rcall	.+2836   	; 0x1a0c <eeprom_write_byte>
     ef8:	60 e0       	ldi	r22, 0x00	; 0

    eeprom_write_byte(&abEEPROM[EEPROM_SW_INDEX_HB], HIBYTE(SW_INDEX));  // write Version in EEPROM on first startup
     efa:	84 e0       	ldi	r24, 0x04	; 4
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	86 d5       	rcall	.+2828   	; 0x1a0c <eeprom_write_byte>
     f00:	61 e0       	ldi	r22, 0x01	; 1
    eeprom_write_byte(&abEEPROM[EEPROM_SW_INDEX_LB], LOBYTE(SW_INDEX));
     f02:	87 e0       	ldi	r24, 0x07	; 7
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	82 d5       	rcall	.+2820   	; 0x1a0c <eeprom_write_byte>

    eeprom_write_byte(&abEEPROM[EEPROM_SW_DAY],      SW_DAY);            // write date of SW in EEPROM
     f08:	66 e0       	ldi	r22, 0x06	; 6
     f0a:	88 e0       	ldi	r24, 0x08	; 8
     f0c:	90 e0       	ldi	r25, 0x00	; 0
    eeprom_write_byte(&abEEPROM[EEPROM_SW_MONTH],    SW_MONTH);
     f0e:	7e d5       	rcall	.+2812   	; 0x1a0c <eeprom_write_byte>
     f10:	66 e0       	ldi	r22, 0x06	; 6
     f12:	89 e0       	ldi	r24, 0x09	; 9
     f14:	90 e0       	ldi	r25, 0x00	; 0
    eeprom_write_byte(&abEEPROM[EEPROM_SW_YEAR],     SW_YEAR);
     f16:	7a d5       	rcall	.+2804   	; 0x1a0c <eeprom_write_byte>
     f18:	64 e0       	ldi	r22, 0x04	; 4
     f1a:	8a e0       	ldi	r24, 0x0A	; 10
     f1c:	90 e0       	ldi	r25, 0x00	; 0

    eeprom_write_byte(&abEEPROM[EEPROM_VERSION],     bFrediVersion);     // store detected HW version
     f1e:	76 d5       	rcall	.+2796   	; 0x1a0c <eeprom_write_byte>
     f20:	60 e1       	ldi	r22, 0x10	; 16
     f22:	8b e0       	ldi	r24, 0x0B	; 11
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	72 d5       	rcall	.+2788   	; 0x1a0c <eeprom_write_byte>
     f28:	60 91 96 00 	lds	r22, 0x0096	; 0x800096 <bFrediVersion>
  }
  else
  { // selftest was successful before
    if (  (eeprom_read_byte(&abEEPROM[EEPROM_SW_INDEX_HB]) != HIBYTE(SW_INDEX))
     f2c:	86 e0       	ldi	r24, 0x06	; 6
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	6d d5       	rcall	.+2778   	; 0x1a0c <eeprom_write_byte>
          || (eeprom_read_byte(&abEEPROM[EEPROM_SW_INDEX_LB]) != LOBYTE(SW_INDEX))
     f32:	3d c0       	rjmp	.+122    	; 0xfae <main+0x10e>
     f34:	87 e0       	ldi	r24, 0x07	; 7
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	61 d5       	rcall	.+2754   	; 0x19fc <eeprom_read_byte>
          || (eeprom_read_byte(&abEEPROM[EEPROM_SW_DAY])      != SW_DAY)
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	a1 f4       	brne	.+40     	; 0xf66 <main+0xc6>
     f3e:	88 e0       	ldi	r24, 0x08	; 8
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	5c d5       	rcall	.+2744   	; 0x19fc <eeprom_read_byte>
          || (eeprom_read_byte(&abEEPROM[EEPROM_SW_MONTH])    != SW_MONTH)
     f44:	86 30       	cpi	r24, 0x06	; 6
     f46:	79 f4       	brne	.+30     	; 0xf66 <main+0xc6>
     f48:	89 e0       	ldi	r24, 0x09	; 9
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	57 d5       	rcall	.+2734   	; 0x19fc <eeprom_read_byte>
          || (eeprom_read_byte(&abEEPROM[EEPROM_SW_YEAR])     != SW_YEAR))
     f4e:	86 30       	cpi	r24, 0x06	; 6
     f50:	51 f4       	brne	.+20     	; 0xf66 <main+0xc6>
     f52:	8a e0       	ldi	r24, 0x0A	; 10
     f54:	90 e0       	ldi	r25, 0x00	; 0
    { // sw index or date has changed
      eeprom_write_byte(&abEEPROM[EEPROM_SW_INDEX_HB], HIBYTE(SW_INDEX));// write Version in EEPROM on first startup
     f56:	52 d5       	rcall	.+2724   	; 0x19fc <eeprom_read_byte>
     f58:	84 30       	cpi	r24, 0x04	; 4
     f5a:	29 f4       	brne	.+10     	; 0xf66 <main+0xc6>
      eeprom_write_byte(&abEEPROM[EEPROM_SW_INDEX_LB], LOBYTE(SW_INDEX));
     f5c:	8b e0       	ldi	r24, 0x0B	; 11
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	4d d5       	rcall	.+2714   	; 0x19fc <eeprom_read_byte>

      eeprom_write_byte(&abEEPROM[EEPROM_SW_DAY],      SW_DAY);          // write date of SW in EEPROM
     f62:	80 31       	cpi	r24, 0x10	; 16
     f64:	a1 f0       	breq	.+40     	; 0xf8e <main+0xee>
     f66:	61 e0       	ldi	r22, 0x01	; 1
     f68:	87 e0       	ldi	r24, 0x07	; 7
      eeprom_write_byte(&abEEPROM[EEPROM_SW_MONTH],    SW_MONTH);
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	4f d5       	rcall	.+2718   	; 0x1a0c <eeprom_write_byte>
     f6e:	66 e0       	ldi	r22, 0x06	; 6
     f70:	88 e0       	ldi	r24, 0x08	; 8
      eeprom_write_byte(&abEEPROM[EEPROM_SW_YEAR],     SW_YEAR);
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	4b d5       	rcall	.+2710   	; 0x1a0c <eeprom_write_byte>
     f76:	66 e0       	ldi	r22, 0x06	; 6
     f78:	89 e0       	ldi	r24, 0x09	; 9
    }

    vSetState(THR_STATE_INIT);
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	47 d5       	rcall	.+2702   	; 0x1a0c <eeprom_write_byte>
     f7e:	64 e0       	ldi	r22, 0x04	; 4
    rSlot.adr   = eeprom_read_byte(&abEEPROM[EEPROM_ADR_LOCO_LB]);
     f80:	8a e0       	ldi	r24, 0x0A	; 10
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	43 d5       	rcall	.+2694   	; 0x1a0c <eeprom_write_byte>
     f86:	60 e1       	ldi	r22, 0x10	; 16
     f88:	8b e0       	ldi	r24, 0x0B	; 11
     f8a:	90 e0       	ldi	r25, 0x00	; 0
    rSlot.adr2  = eeprom_read_byte(&abEEPROM[EEPROM_ADR_LOCO_HB]);
     f8c:	3f d5       	rcall	.+2686   	; 0x1a0c <eeprom_write_byte>
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	3e da       	rcall	.-2948   	; 0x40e <vSetState>
     f92:	83 e0       	ldi	r24, 0x03	; 3
     f94:	90 e0       	ldi	r25, 0x00	; 0
    rSlot.stat  = eeprom_read_byte(&abEEPROM[EEPROM_DECODER_TYPE]);
     f96:	32 d5       	rcall	.+2660   	; 0x19fc <eeprom_read_byte>
     f98:	c7 ec       	ldi	r28, 0xC7	; 199
     f9a:	d0 e0       	ldi	r29, 0x00	; 0
     f9c:	8c 83       	std	Y+4, r24	; 0x04
     f9e:	82 e0       	ldi	r24, 0x02	; 2
  }

  rSlot.id1   = eeprom_read_byte(&abEEPROM[EEPROM_ID1]); // get ID from EEPROM
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	2c d5       	rcall	.+2648   	; 0x19fc <eeprom_read_byte>
     fa4:	89 87       	std	Y+9, r24	; 0x09
     fa6:	84 e0       	ldi	r24, 0x04	; 4
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	28 d5       	rcall	.+2640   	; 0x19fc <eeprom_read_byte>
  rSlot.id2   = eeprom_read_byte(&abEEPROM[EEPROM_ID2]);
     fac:	8b 83       	std	Y+3, r24	; 0x03
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	24 d5       	rcall	.+2632   	; 0x19fc <eeprom_read_byte>
     fb4:	c8 2f       	mov	r28, r24

  if ((rSlot.id1 & 0x80) || (rSlot.id2 & 0x80))
     fb6:	07 ec       	ldi	r16, 0xC7	; 199
     fb8:	10 e0       	ldi	r17, 0x00	; 0
     fba:	f8 01       	movw	r30, r16
     fbc:	83 87       	std	Z+11, r24	; 0x0b
  { // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    // if no slot ID was programmed, you get the ID "0xff 0xff"
		// or if an unguilty ID was programmed
    // stop program at this point and switch all leds on
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    LED_DDR  |= _BV(LED_GREEN_L); 
     fbe:	80 e0       	ldi	r24, 0x00	; 0
    LED_PORT |= _BV(LED_GREEN_L); 
     fc0:	90 e0       	ldi	r25, 0x00	; 0
    LED_DDR  |= _BV(LED_GREEN_R); 
     fc2:	1c d5       	rcall	.+2616   	; 0x19fc <eeprom_read_byte>
    LED_PORT |= _BV(LED_GREEN_R); 
     fc4:	f8 01       	movw	r30, r16
    LED_DDR  |= _BV(LED_RED); 
     fc6:	84 87       	std	Z+12, r24	; 0x0c
    LED_PORT |= _BV(LED_RED);
     fc8:	cc 23       	and	r28, r28
     fca:	14 f0       	brlt	.+4      	; 0xfd0 <main+0x130>

  /***************************************/
  //  init loconet
  /***************************************/

  initLocoNet(&RxBuffer) ;
     fcc:	88 23       	and	r24, r24
     fce:	3c f4       	brge	.+14     	; 0xfde <main+0x13e>

  /***************************************/
  //  init keys and timer
  /***************************************/

  initKeys();
     fd0:	a3 9a       	sbi	0x14, 3	; 20
  initTimer();
     fd2:	ab 9a       	sbi	0x15, 3	; 21

  addTimerAction(&MessageTimer, 0, MessageTimerAction, 0, TIMER_SLOW ) ;
     fd4:	a2 9a       	sbi	0x14, 2	; 20
     fd6:	aa 9a       	sbi	0x15, 2	; 21
     fd8:	a4 9a       	sbi	0x14, 4	; 20
     fda:	ac 9a       	sbi	0x15, 4	; 21
     fdc:	ff cf       	rjmp	.-2      	; 0xfdc <main+0x13c>
     fde:	85 ed       	ldi	r24, 0xD5	; 213
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	9e d4       	rcall	.+2364   	; 0x1920 <initLocoNet>

  /***************************************/
  //  set state and start interrupts
  /***************************************/

  sei();
     fe4:	84 d9       	rcall	.-3320   	; 0x2ee <initKeys>

  if (bThrState < THR_STATE_SELFTEST)
     fe6:	ed d2       	rcall	.+1498   	; 0x15c2 <initTimer>
     fe8:	00 e0       	ldi	r16, 0x00	; 0
     fea:	20 e0       	ldi	r18, 0x00	; 0
  {
    // if a address for a loco is available, show blinking state
    if ((rSlot.adr != 0) || (rSlot.adr2 != 0))
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	47 e4       	ldi	r20, 0x47	; 71
     ff0:	52 e0       	ldi	r21, 0x02	; 2
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	89 ea       	ldi	r24, 0xA9	; 169
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	f1 d2       	rcall	.+1506   	; 0x15dc <addTimerAction>
    {
      vSetState(THR_STATE_RECONNECT_GET_SLOT);
     ffa:	78 94       	sei
     ffc:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <bThrState>
    }
    else
    {
      vSetState(THR_STATE_UNCONNECTED);
    1000:	84 36       	cpi	r24, 0x64	; 100
    }

    while (bit_is_clear(ACSR, ACO))     // wait for start of loconet
    1002:	68 f5       	brcc	.+90     	; 0x105e <main+0x1be>
    1004:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <rSlot+0x4>
      processTimerActions();
    }
    // loconet is available, now
    for (bCount =0;bCount < 50;bCount++)
    {
      delayTimer( 10 );                 // wait a little bit longer
    1008:	81 11       	cpse	r24, r1
      processTimerActions();
    100a:	04 c0       	rjmp	.+8      	; 0x1014 <main+0x174>
    while (bit_is_clear(ACSR, ACO))     // wait for start of loconet
    {
      processTimerActions();
    }
    // loconet is available, now
    for (bCount =0;bCount < 50;bCount++)
    100c:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <rSlot+0x9>
    {
      delayTimer( 10 );                 // wait a little bit longer
      processTimerActions();
    }

    if (rSlot.adr)                      // wait for a pseudo random time
    1010:	88 23       	and	r24, r24
    1012:	19 f0       	breq	.+6      	; 0x101a <main+0x17a>
    1014:	84 e1       	ldi	r24, 0x14	; 20
    {
      delayTimer(rSlot.adr);
    1016:	fb d9       	rcall	.-3082   	; 0x40e <vSetState>
    1018:	02 c0       	rjmp	.+4      	; 0x101e <main+0x17e>
    101a:	80 e2       	ldi	r24, 0x20	; 32
    }

    if (rSlot.adr2)
    101c:	f8 d9       	rcall	.-3088   	; 0x40e <vSetState>
    101e:	45 99       	sbic	0x08, 5	; 8
    1020:	2d c0       	rjmp	.+90     	; 0x107c <main+0x1dc>
    1022:	0d d3       	rcall	.+1562   	; 0x163e <processTimerActions>
    {
      delayTimer(rSlot.adr2);
    1024:	45 9b       	sbis	0x08, 5	; 8
    1026:	fd cf       	rjmp	.-6      	; 0x1022 <main+0x182>
    1028:	29 c0       	rjmp	.+82     	; 0x107c <main+0x1dc>
    }

    // if a address for a loco is available, try to reconnect
    if (bThrState == THR_STATE_RECONNECT_GET_SLOT)
    102a:	8a e0       	ldi	r24, 0x0A	; 10
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	fc d2       	rcall	.+1528   	; 0x1628 <delayTimer>
    1030:	06 d3       	rcall	.+1548   	; 0x163e <processTimerActions>
    {
      sendLocoNetAdr(&rSlot);
    1032:	c1 50       	subi	r28, 0x01	; 1
    1034:	d1 f7       	brne	.-12     	; 0x102a <main+0x18a>
    1036:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <rSlot+0x4>
    103a:	88 23       	and	r24, r24
    }
  }
  else
  {
    sendLocoNetFredCd( bCount );
    103c:	11 f0       	breq	.+4      	; 0x1042 <main+0x1a2>
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	f3 d2       	rcall	.+1510   	; 0x1628 <delayTimer>
// main endless loop 
/******************************************************************************/

  while (1)
  {
    vProcessRxLoconetMessage();
    1042:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <rSlot+0x9>
    vProcessKey();
    1046:	88 23       	and	r24, r24
    1048:	11 f0       	breq	.+4      	; 0x104e <main+0x1ae>
    vProcessRxLoconetMessage();
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	ed d2       	rcall	.+1498   	; 0x1628 <delayTimer>

    if (bFrediVersion == FREDI_VERSION_ANALOG)
    104e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <bThrState>
    1052:	84 31       	cpi	r24, 0x14	; 20
    1054:	31 f4       	brne	.+12     	; 0x1062 <main+0x1c2>
    {
      vProcessPoti();
    1056:	87 ec       	ldi	r24, 0xC7	; 199
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	f9 da       	rcall	.-2574   	; 0x64e <sendLocoNetAdr>
    }
    else
    {
      vProcessEncoder();
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <main+0x1c2>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    }
    vProcessRxLoconetMessage();
    1060:	16 db       	rcall	.-2516   	; 0x68e <sendLocoNetFredCd>
    1062:	f7 dd       	rcall	.-1042   	; 0xc52 <vProcessRxLoconetMessage>
    processTimerActions();
    1064:	5d db       	rcall	.-2374   	; 0x720 <vProcessKey>
    1066:	f5 dd       	rcall	.-1046   	; 0xc52 <vProcessRxLoconetMessage>
  } // end of while(1)
    1068:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <bFrediVersion>
 * ARGUMENTS   : none
 * RETURN VALUE: int, never reached, cause of endless loop
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
int main(void)
{
    106c:	83 30       	cpi	r24, 0x03	; 3
    106e:	11 f4       	brne	.+4      	; 0x1074 <main+0x1d4>
    1070:	fb dc       	rcall	.-1546   	; 0xa68 <vProcessPoti>
    1072:	01 c0       	rjmp	.+2      	; 0x1076 <main+0x1d6>
    1074:	84 dc       	rcall	.-1784   	; 0x97e <vProcessEncoder>
    1076:	ed dd       	rcall	.-1062   	; 0xc52 <vProcessRxLoconetMessage>
    1078:	e2 d2       	rcall	.+1476   	; 0x163e <processTimerActions>
    107a:	f3 cf       	rjmp	.-26     	; 0x1062 <main+0x1c2>
    107c:	c2 e3       	ldi	r28, 0x32	; 50
    107e:	d5 cf       	rjmp	.-86     	; 0x102a <main+0x18a>

00001080 <potAdcPowerOff>:
}

// functions -------------------------------------------------------------------

void potAdcPowerOff(void) {
  ADCSRA = (0<<ADEN); // disable ADC
    1080:	16 b8       	out	0x06, r1	; 6
    1082:	08 95       	ret

00001084 <potAdcInit>:
    PRR   &= ~(1<<PRADC); // enable ADC in Power Reduction Register.
    DIDR0 |= (1<<ADC0D);  // disable digital input buffer to reduce
                          // power consumption
  #endif

  ADMUX  = (0<<REFS1) | (1<<REFS0) // AVCC pin as reference
    1084:	80 e4       	ldi	r24, 0x40	; 64
    1086:	87 b9       	out	0x07, r24	; 7
    | defined(__AVR_ATmega48P__) | defined(__AVR_ATmega88__)   \
    | defined(__AVR_ATmega88A__) | defined(__AVR_ATmega88P__)  \
    | defined(__AVR_ATmega168__) | defined(__AVR_ATmega168A__) \
    | defined(__AVR_ATmega168P__)| defined(__AVR_ATmega328__)  \
    | defined(__AVR_ATmega328P__) | defined(__AVR_ATmega16__)
    ADCSRA = (1<<ADEN)  // Enable ADC
    1088:	86 ec       	ldi	r24, 0xC6	; 198
    108a:	86 b9       	out	0x06, r24	; 6
           | ADPS;      // ADC precaler selection
  #else
    #error "unknown mcu"
  #endif

  while (bit_is_set(ADCSRA, ADSC)); // wait for measurement
    108c:	36 99       	sbic	0x06, 6	; 6
    108e:	fe cf       	rjmp	.-4      	; 0x108c <potAdcInit+0x8>
  ADCH;                             // throw away first analog value
    1090:	85 b1       	in	r24, 0x05	; 5
  potAdcSpeedValue = 0;             // ignore first analog value
    1092:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <potAdcSpeedValue>
  ADCSRA      |= _BV(ADSC);         // start new measurement
    1096:	36 9a       	sbi	0x06, 6	; 6
    1098:	08 95       	ret

0000109a <potAdcTimerAction>:
  #define NB_SAMPLES_LOG2 0 // log to basis 2 of number of samples
                            // 3: take arithmetic mean of 8 samples
                            // 2: four samples
                            // 0: single sample

  if (bit_is_clear(ADCSRA, ADSC)) // measurement done
    109a:	36 99       	sbic	0x06, 6	; 6
    109c:	46 c0       	rjmp	.+140    	; 0x112a <potAdcTimerAction+0x90>
  {
    potAdcRawValue = ADCW;
    109e:	84 b1       	in	r24, 0x04	; 4
    10a0:	95 b1       	in	r25, 0x05	; 5
    10a2:	90 93 9c 00 	sts	0x009C, r25	; 0x80009c <potAdcRawValue+0x1>
    10a6:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <potAdcRawValue>
    ADCSRA |= _BV(ADSC);          // start new measurement
    10aa:	36 9a       	sbi	0x06, 6	; 6

    #if NB_SAMPLES_LOG2 == 0

      potAdcSpeedValue
                = timeFilter( mapSpeedVal( deltaFilter( potAdcRawValue ) ) );
    10ac:	40 91 9b 00 	lds	r20, 0x009B	; 0x80009b <potAdcRawValue>
    10b0:	50 91 9c 00 	lds	r21, 0x009C	; 0x80009c <potAdcRawValue+0x1>
                            // 0: disable filter (for testing)

  static uint16_t deltaFilterState = 0;

  int16_t delta = abs( (int16_t)deltaFilterState - (int16_t)adcVal);
  if( delta >= FILTER_DELTA ) {
    10b4:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <deltaFilterState.1786>
    10b8:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <deltaFilterState.1786+0x1>
    10bc:	84 1b       	sub	r24, r20
    10be:	95 0b       	sbc	r25, r21
    10c0:	9c 01       	movw	r18, r24
    10c2:	22 f4       	brpl	.+8      	; 0x10cc <potAdcTimerAction+0x32>
    10c4:	22 27       	eor	r18, r18
    10c6:	33 27       	eor	r19, r19
    10c8:	28 1b       	sub	r18, r24
    10ca:	39 0b       	sbc	r19, r25
    10cc:	23 30       	cpi	r18, 0x03	; 3
    10ce:	31 05       	cpc	r19, r1
    10d0:	24 f0       	brlt	.+8      	; 0x10da <potAdcTimerAction+0x40>
    deltaFilterState = adcVal;
    10d2:	50 93 9a 00 	sts	0x009A, r21	; 0x80009a <deltaFilterState.1786+0x1>
    10d6:	40 93 99 00 	sts	0x0099, r20	; 0x800099 <deltaFilterState.1786>
 * Map pot values 0..1023 to dcc/loconet speed 0,2..126
 * @param speed
 * @return
 */
static inline uint8_t mapSpeedVal( uint16_t adcValue ) {
  uint8_t speedVal = (uint8_t) (adcValue >> 3);
    10da:	20 91 99 00 	lds	r18, 0x0099	; 0x800099 <deltaFilterState.1786>
    10de:	30 91 9a 00 	lds	r19, 0x009A	; 0x80009a <deltaFilterState.1786+0x1>
    10e2:	36 95       	lsr	r19
    10e4:	27 95       	ror	r18
    10e6:	36 95       	lsr	r19
    10e8:	27 95       	ror	r18
    10ea:	36 95       	lsr	r19
    10ec:	27 95       	ror	r18
    10ee:	82 2f       	mov	r24, r18
  if( speedVal > 0 ) {
    10f0:	22 23       	and	r18, r18
    10f2:	11 f0       	breq	.+4      	; 0x10f8 <potAdcTimerAction+0x5e>
    speedVal++; //skip E_STOP
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	82 0f       	add	r24, r18
                         // time. potAdcTimerAction() is called every
                         // KEY_POLL_TIME ms. (-> sysdef.h)

  static uint8_t timeFilterState = 0;
  static uint8_t count = 0;
  if( count > 0 ) {
    10f8:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <count.1796>
    10fc:	99 23       	and	r25, r25
    10fe:	29 f0       	breq	.+10     	; 0x110a <potAdcTimerAction+0x70>
    count--;
    1100:	91 50       	subi	r25, 0x01	; 1
    1102:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <count.1796>
  }
  if( count == 0 && speedVal != timeFilterState ) {
    1106:	91 11       	cpse	r25, r1
    1108:	0c c0       	rjmp	.+24     	; 0x1122 <potAdcTimerAction+0x88>
    110a:	8f 37       	cpi	r24, 0x7F	; 127
    110c:	08 f0       	brcs	.+2      	; 0x1110 <potAdcTimerAction+0x76>
    110e:	8e e7       	ldi	r24, 0x7E	; 126
    1110:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <timeFilterState.1795>
    1114:	98 17       	cp	r25, r24
    1116:	29 f0       	breq	.+10     	; 0x1122 <potAdcTimerAction+0x88>
    timeFilterState = speedVal;
    1118:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <timeFilterState.1795>
    count = FILTER_TIME;
    111c:	8a e0       	ldi	r24, 0x0A	; 10
    111e:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <count.1796>
  }
  return timeFilterState;
    1122:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <timeFilterState.1795>
    ADCSRA |= _BV(ADSC);          // start new measurement

    #if NB_SAMPLES_LOG2 == 0

      potAdcSpeedValue
                = timeFilter( mapSpeedVal( deltaFilter( potAdcRawValue ) ) );
    1126:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <potAdcSpeedValue>
    112a:	08 95       	ret

0000112c <__vector_5>:
* incoming data.
*
**************************************************************************/

ISR(LN_SB_SIGNAL)
{
    112c:	1f 92       	push	r1
    112e:	0f 92       	push	r0
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	0f 92       	push	r0
    1134:	11 24       	eor	r1, r1
    1136:	8f 93       	push	r24
    1138:	9f 93       	push	r25
    // Disable the Input Comparator Interrupt
  cbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT );     
    113a:	89 b7       	in	r24, 0x39	; 57
    113c:	8f 7d       	andi	r24, 0xDF	; 223
    113e:	89 bf       	out	0x39, r24	; 57
#ifdef RX_MONITOR
  cbi(PORTD, PD1);
#endif

    // Get the Current Timer1 Count and Add the offset for the Compare target
  lnCompareTarget = LN_TMR_INP_CAPT_REG + LN_TIMER_RX_START_PERIOD ;
    1140:	86 b5       	in	r24, 0x26	; 38
    1142:	97 b5       	in	r25, 0x27	; 39
    1144:	89 56       	subi	r24, 0x69	; 105
    1146:	9d 4f       	sbci	r25, 0xFD	; 253
    1148:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <lnCompareTarget+0x1>
    114c:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <lnCompareTarget>
  LN_TMR_OUTP_CAPT_REG = lnCompareTarget ;
    1150:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <lnCompareTarget>
    1154:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <lnCompareTarget+0x1>
    1158:	9b bd       	out	0x2b, r25	; 43
    115a:	8a bd       	out	0x2a, r24	; 42

    // Clear the current Compare interrupt status bit and enable the Compare interrupt
  sbi(LN_TMR_INT_STATUS_REG, LN_TMR_INT_STATUS_BIT) ;
    115c:	88 b7       	in	r24, 0x38	; 56
    115e:	80 61       	ori	r24, 0x10	; 16
    1160:	88 bf       	out	0x38, r24	; 56
  sbi(LN_TMR_INT_ENABLE_REG, LN_TMR_INT_ENABLE_BIT) ; 
    1162:	89 b7       	in	r24, 0x39	; 57
    1164:	80 61       	ori	r24, 0x10	; 16
    1166:	89 bf       	out	0x39, r24	; 57

    // Set the State to indicate that we have begun to Receive
  lnState = LN_ST_RX ;
    1168:	84 e0       	ldi	r24, 0x04	; 4
    116a:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <lnState>

    // Reset the bit counter so that on first increment it is on 0
  lnBitCount = 0;
    116e:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <lnBitCount>
}
    1172:	9f 91       	pop	r25
    1174:	8f 91       	pop	r24
    1176:	0f 90       	pop	r0
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	0f 90       	pop	r0
    117c:	1f 90       	pop	r1
    117e:	18 95       	reti

00001180 <__vector_6>:
* it samples the bit and shifts it into the buffer.
*
**************************************************************************/

ISR(LN_TMR_SIGNAL)     /* signal handler for timer0 overflow */
{
    1180:	1f 92       	push	r1
    1182:	0f 92       	push	r0
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	0f 92       	push	r0
    1188:	11 24       	eor	r1, r1
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	2f 93       	push	r18
    1190:	3f 93       	push	r19
    1192:	4f 93       	push	r20
    1194:	5f 93       	push	r21
    1196:	6f 93       	push	r22
    1198:	7f 93       	push	r23
    119a:	8f 93       	push	r24
    119c:	9f 93       	push	r25
    119e:	af 93       	push	r26
    11a0:	bf 93       	push	r27
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	ef 93       	push	r30
    11a8:	ff 93       	push	r31
    // Advance the Compare Target
  lnCompareTarget += LN_TIMER_RX_RELOAD_PERIOD ;
    11aa:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <lnCompareTarget>
    11ae:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <lnCompareTarget+0x1>
    11b2:	86 54       	subi	r24, 0x46	; 70
    11b4:	9e 4f       	sbci	r25, 0xFE	; 254
    11b6:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <lnCompareTarget+0x1>
    11ba:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <lnCompareTarget>
  LN_TMR_OUTP_CAPT_REG = lnCompareTarget ;
    11be:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <lnCompareTarget>
    11c2:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <lnCompareTarget+0x1>
    11c6:	9b bd       	out	0x2b, r25	; 43
    11c8:	8a bd       	out	0x2a, r24	; 42

  lnBitCount++;                         //Increment bit_counter
    11ca:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <lnBitCount>
    11ce:	8f 5f       	subi	r24, 0xFF	; 255
    11d0:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <lnBitCount>

    // Are we in the RX State
  if( lnState == LN_ST_RX )                // Are we in RX mode
    11d4:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <lnState>
    11d8:	84 30       	cpi	r24, 0x04	; 4
    11da:	09 f0       	breq	.+2      	; 0x11de <__vector_6+0x5e>
    11dc:	3f c0       	rjmp	.+126    	; 0x125c <__vector_6+0xdc>
  {
    if( lnBitCount < 9)               // Are we in the Stop Bits phase
    11de:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <lnBitCount>
    11e2:	89 30       	cpi	r24, 0x09	; 9
    11e4:	68 f4       	brcc	.+26     	; 0x1200 <__vector_6+0x80>
    {
      lnCurrentByte >>= 1;
    11e6:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <lnCurrentByte>
    11ea:	86 95       	lsr	r24
    11ec:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <lnCurrentByte>
#ifdef LN_SW_UART_RX_INVERTED
      if( bit_is_clear(LN_RX_PORT, LN_RX_BIT))
#else
      if( bit_is_set(LN_RX_PORT, LN_RX_BIT))
    11f0:	45 9b       	sbis	0x08, 5	; 8
    11f2:	ec c0       	rjmp	.+472    	; 0x13cc <__vector_6+0x24c>
#endif

        lnCurrentByte |= 0x80;
    11f4:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <lnCurrentByte>
    11f8:	80 68       	ori	r24, 0x80	; 128
    11fa:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <lnCurrentByte>
    11fe:	e6 c0       	rjmp	.+460    	; 0x13cc <__vector_6+0x24c>
      return ;
    }

      // Clear the Start Bit Interrupt Status Flag and Enable ready to 
      // detect the next Start Bit
    sbi( LN_SB_INT_STATUS_REG, LN_SB_INT_STATUS_BIT ) ;
    1200:	88 b7       	in	r24, 0x38	; 56
    1202:	80 62       	ori	r24, 0x20	; 32
    1204:	88 bf       	out	0x38, r24	; 56
    sbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT ) ;
    1206:	89 b7       	in	r24, 0x39	; 57
    1208:	80 62       	ori	r24, 0x20	; 32
    120a:	89 bf       	out	0x39, r24	; 57

      // If the Stop bit is not Set then we have a Framing Error
#ifdef LN_SW_UART_RX_INVERTED
    if( bit_is_set(LN_RX_PORT,LN_RX_BIT) )
#else
    if( bit_is_clear(LN_RX_PORT,LN_RX_BIT) )
    120c:	45 99       	sbic	0x08, 5	; 8
    120e:	0a c0       	rjmp	.+20     	; 0x1224 <__vector_6+0xa4>
#endif
      lnRxBuffer->Stats.RxErrors++ ;
    1210:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <lnRxBuffer>
    1214:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <lnRxBuffer+0x1>
    1218:	e9 57       	subi	r30, 0x79	; 121
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	80 81       	ld	r24, Z
    121e:	8f 5f       	subi	r24, 0xFF	; 255
    1220:	80 83       	st	Z, r24
    1222:	17 c0       	rjmp	.+46     	; 0x1252 <__vector_6+0xd2>

    else
        // Put the received byte in the buffer
      addByteLnBuf( lnRxBuffer, lnCurrentByte ) ;
    1224:	40 91 7b 01 	lds	r20, 0x017B	; 0x80017b <lnCurrentByte>
    1228:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <lnRxBuffer>
    122c:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <lnRxBuffer+0x1>
void addByteLnBuf( LnBuf *Buffer, byte newByte );
void addMsgLnBuf( LnBuf *Buffer, volatile lnMsg * newMsg );
#else
static inline void addByteLnBuf( LnBuf *Buffer, byte newByte )
{
	Buffer->Buf[ Buffer->WriteIndex++ ] = newByte ;
    1230:	fc 01       	movw	r30, r24
    1232:	e0 58       	subi	r30, 0x80	; 128
    1234:	ff 4f       	sbci	r31, 0xFF	; 255
    1236:	30 81       	ld	r19, Z
    1238:	21 e0       	ldi	r18, 0x01	; 1
    123a:	23 0f       	add	r18, r19
    123c:	20 83       	st	Z, r18
    123e:	fc 01       	movw	r30, r24
    1240:	e3 0f       	add	r30, r19
    1242:	f1 1d       	adc	r31, r1
    1244:	40 83       	st	Z, r20
	if( Buffer->WriteIndex >= LN_BUF_SIZE )
    1246:	22 23       	and	r18, r18
    1248:	24 f4       	brge	.+8      	; 0x1252 <__vector_6+0xd2>
		Buffer->WriteIndex = 0 ;
    124a:	fc 01       	movw	r30, r24
    124c:	e0 58       	subi	r30, 0x80	; 128
    124e:	ff 4f       	sbci	r31, 0xFF	; 255
    1250:	10 82       	st	Z, r1

    lnBitCount = 0 ;
    1252:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <lnBitCount>
    lnState = LN_ST_CD_BACKOFF ;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <lnState>
  }


    // Are we in the TX State
  if( lnState == LN_ST_TX )
    125c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <lnState>
    1260:	83 30       	cpi	r24, 0x03	; 3
    1262:	09 f0       	breq	.+2      	; 0x1266 <__vector_6+0xe6>
    1264:	7e c0       	rjmp	.+252    	; 0x1362 <__vector_6+0x1e2>
  #endif
#else  // inverted is the normal case, just a NPN between TX pin and LN:
  #ifdef LN_SW_UART_RX_INVERTED
    if( ( ( LN_TX_PORT >> LN_TX_BIT ) & 0x01 ) != ( ( LN_RX_PORT >> LN_RX_BIT ) & 0x01 ) )
  #else
    if( ( ( LN_TX_PORT >> LN_TX_BIT ) & 0x01 ) == ( ( LN_RX_PORT >> LN_RX_BIT ) & 0x01 ) )
    1266:	92 b3       	in	r25, 0x12	; 18
    1268:	88 b1       	in	r24, 0x08	; 8
    126a:	92 95       	swap	r25
    126c:	9f 70       	andi	r25, 0x0F	; 15
    126e:	82 95       	swap	r24
    1270:	86 95       	lsr	r24
    1272:	87 70       	andi	r24, 0x07	; 7
    1274:	89 27       	eor	r24, r25
    1276:	80 fd       	sbrc	r24, 0
    1278:	06 c0       	rjmp	.+12     	; 0x1286 <__vector_6+0x106>
  #endif
#endif
    {
      lnBitCount = 0 ;
    127a:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <lnBitCount>
      lnState = LN_ST_TX_COLLISION ;
    127e:	82 e0       	ldi	r24, 0x02	; 2
    1280:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <lnState>
    1284:	6e c0       	rjmp	.+220    	; 0x1362 <__vector_6+0x1e2>
    }
      // Send each Bit
    else if( lnBitCount < 9)
    1286:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <lnBitCount>
    128a:	89 30       	cpi	r24, 0x09	; 9
    128c:	68 f4       	brcc	.+26     	; 0x12a8 <__vector_6+0x128>
    {
#ifdef TX_START_MEASUREMENT
			cbi(TX_MEASUREMENT_PORT, TX_MEASUREMENT_PIN);
#endif
			
      if( lnCurrentByte & 0x01 )
    128e:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <lnCurrentByte>
    1292:	80 ff       	sbrs	r24, 0
    1294:	02 c0       	rjmp	.+4      	; 0x129a <__vector_6+0x11a>
        LN_SW_UART_SET_TX_HIGH
    1296:	94 98       	cbi	0x12, 4	; 18
    1298:	01 c0       	rjmp	.+2      	; 0x129c <__vector_6+0x11c>

      else
        LN_SW_UART_SET_TX_LOW
    129a:	94 9a       	sbi	0x12, 4	; 18

      lnCurrentByte >>= 1;
    129c:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <lnCurrentByte>
    12a0:	86 95       	lsr	r24
    12a2:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <lnCurrentByte>
    12a6:	5d c0       	rjmp	.+186    	; 0x1362 <__vector_6+0x1e2>
    }
      // When the Data Bits are done, generate stop-bit
    else if( lnBitCount ==  9)
    12a8:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <lnBitCount>
    12ac:	89 30       	cpi	r24, 0x09	; 9
    12ae:	11 f4       	brne	.+4      	; 0x12b4 <__vector_6+0x134>
      LN_SW_UART_SET_TX_HIGH
    12b0:	94 98       	cbi	0x12, 4	; 18
    12b2:	57 c0       	rjmp	.+174    	; 0x1362 <__vector_6+0x1e2>

      // Any more bytes in buffer
    else if( ++lnTxIndex < lnTxLength )
    12b4:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <lnTxIndex>
    12b8:	8f 5f       	subi	r24, 0xFF	; 255
    12ba:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <lnTxIndex>
    12be:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <lnTxLength>
    12c2:	89 17       	cp	r24, r25
    12c4:	e8 f4       	brcc	.+58     	; 0x1300 <__vector_6+0x180>
    {
        // Setup for the next byte
      lnBitCount = 0 ;
    12c6:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <lnBitCount>
      lnCurrentByte = lnTxData->data[ lnTxIndex ] ;
    12ca:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <lnTxData>
    12ce:	f0 91 83 01 	lds	r31, 0x0183	; 0x800183 <lnTxData+0x1>
    12d2:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <lnTxIndex>
    12d6:	e8 0f       	add	r30, r24
    12d8:	f1 1d       	adc	r31, r1
    12da:	80 81       	ld	r24, Z
    12dc:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <lnCurrentByte>

        // Begin the Start Bit
      LN_SW_UART_SET_TX_LOW
    12e0:	94 9a       	sbi	0x12, 4	; 18
			sbi(TX_MEASUREMENT_PORT, TX_MEASUREMENT_PIN);
#endif

        // Get the Current Timer1 Count and Add the offset for the Compare target
        // added adjustment value for bugfix (Olaf Funke)
      lnCompareTarget = LN_TMR_COUNT_REG + LN_TIMER_TX_RELOAD_PERIOD - LN_TIMER_TX_RELOAD_ADJUST; 
    12e2:	8c b5       	in	r24, 0x2c	; 44
    12e4:	9d b5       	in	r25, 0x2d	; 45
    12e6:	88 5a       	subi	r24, 0xA8	; 168
    12e8:	9e 4f       	sbci	r25, 0xFE	; 254
    12ea:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <lnCompareTarget+0x1>
    12ee:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <lnCompareTarget>
      LN_TMR_OUTP_CAPT_REG = lnCompareTarget ;
    12f2:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <lnCompareTarget>
    12f6:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <lnCompareTarget+0x1>
    12fa:	9b bd       	out	0x2b, r25	; 43
    12fc:	8a bd       	out	0x2a, r24	; 42
    12fe:	31 c0       	rjmp	.+98     	; 0x1362 <__vector_6+0x1e2>
    }
    else
    {
        // Successfully Sent all bytes in the buffer
        // so set the Packet Status to Done
      lnTxSuccess = 1 ;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <lnTxSuccess>

        // Now copy the TX Packet into the RX Buffer
      addMsgLnBuf( lnRxBuffer, lnTxData );
    1306:	c0 91 82 01 	lds	r28, 0x0182	; 0x800182 <lnTxData>
    130a:	d0 91 83 01 	lds	r29, 0x0183	; 0x800183 <lnTxData+0x1>
    130e:	00 91 7e 01 	lds	r16, 0x017E	; 0x80017e <lnRxBuffer>
    1312:	10 91 7f 01 	lds	r17, 0x017F	; 0x80017f <lnRxBuffer+0x1>
static inline void addMsgLnBuf( LnBuf *Buffer, volatile lnMsg * newMsg )
{
	byte	Index ;
	byte 	Length ;

	Length = getLnMsgSize( newMsg ) ;
    1316:	ce 01       	movw	r24, r28
    1318:	f6 d2       	rcall	.+1516   	; 0x1906 <getLnMsgSize>
	for( Index = 0; Index < Length; Index++ )
    131a:	88 23       	and	r24, r24
    131c:	e9 f0       	breq	.+58     	; 0x1358 <__vector_6+0x1d8>
    131e:	81 50       	subi	r24, 0x01	; 1
    1320:	68 2f       	mov	r22, r24
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	6f 5f       	subi	r22, 0xFF	; 255
    1326:	7f 4f       	sbci	r23, 0xFF	; 255
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
void addByteLnBuf( LnBuf *Buffer, byte newByte );
void addMsgLnBuf( LnBuf *Buffer, volatile lnMsg * newMsg );
#else
static inline void addByteLnBuf( LnBuf *Buffer, byte newByte )
{
	Buffer->Buf[ Buffer->WriteIndex++ ] = newByte ;
    132c:	f8 01       	movw	r30, r16
    132e:	e0 58       	subi	r30, 0x80	; 128
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
	byte	Index ;
	byte 	Length ;

	Length = getLnMsgSize( newMsg ) ;
	for( Index = 0; Index < Length; Index++ )
		addByteLnBuf(Buffer, newMsg->data[ Index ] ) ;
    1332:	de 01       	movw	r26, r28
    1334:	a8 0f       	add	r26, r24
    1336:	b9 1f       	adc	r27, r25
    1338:	4c 91       	ld	r20, X
void addByteLnBuf( LnBuf *Buffer, byte newByte );
void addMsgLnBuf( LnBuf *Buffer, volatile lnMsg * newMsg );
#else
static inline void addByteLnBuf( LnBuf *Buffer, byte newByte )
{
	Buffer->Buf[ Buffer->WriteIndex++ ] = newByte ;
    133a:	30 81       	ld	r19, Z
    133c:	21 e0       	ldi	r18, 0x01	; 1
    133e:	23 0f       	add	r18, r19
    1340:	20 83       	st	Z, r18
    1342:	d8 01       	movw	r26, r16
    1344:	a3 0f       	add	r26, r19
    1346:	b1 1d       	adc	r27, r1
    1348:	4c 93       	st	X, r20
	if( Buffer->WriteIndex >= LN_BUF_SIZE )
    134a:	22 23       	and	r18, r18
    134c:	0c f4       	brge	.+2      	; 0x1350 <__vector_6+0x1d0>
		Buffer->WriteIndex = 0 ;
    134e:	10 82       	st	Z, r1
    1350:	01 96       	adiw	r24, 0x01	; 1
{
	byte	Index ;
	byte 	Length ;

	Length = getLnMsgSize( newMsg ) ;
	for( Index = 0; Index < Length; Index++ )
    1352:	86 17       	cp	r24, r22
    1354:	97 07       	cpc	r25, r23
    1356:	69 f7       	brne	.-38     	; 0x1332 <__vector_6+0x1b2>

        // Begin CD Backoff state
      lnBitCount = 0 ;
    1358:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <lnBitCount>
      lnState = LN_ST_CD_BACKOFF ;      
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <lnState>
    }
  }

    // Note we may have got here from a failed TX cycle, if so BitCount will be 0
  if( lnState == LN_ST_TX_COLLISION )
    1362:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <lnState>
    1366:	82 30       	cpi	r24, 0x02	; 2
    1368:	c9 f4       	brne	.+50     	; 0x139c <__vector_6+0x21c>
  {
    if( lnBitCount == 0 )
    136a:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <lnBitCount>
    136e:	81 11       	cpse	r24, r1
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <__vector_6+0x1f6>
    {
        // Pull the TX Line low to indicate Collision
      LN_SW_UART_SET_TX_LOW
    1372:	94 9a       	sbi	0x12, 4	; 18
    1374:	13 c0       	rjmp	.+38     	; 0x139c <__vector_6+0x21c>
#ifdef COLLISION_MONITOR
      cbi( COLLISION_MONITOR_PORT,COLLISION_MONITOR_BIT ) ;
#endif
    }
    else if( lnBitCount >= LN_COLLISION_TICKS )
    1376:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <lnBitCount>
    137a:	8f 30       	cpi	r24, 0x0F	; 15
    137c:	78 f0       	brcs	.+30     	; 0x139c <__vector_6+0x21c>
    {
        // Release the TX Line
      LN_SW_UART_SET_TX_HIGH
    137e:	94 98       	cbi	0x12, 4	; 18
#ifdef COLLISION_MONITOR
      sbi( COLLISION_MONITOR_PORT,COLLISION_MONITOR_BIT ) ;
#endif

      lnBitCount = 0 ;
    1380:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <lnBitCount>
      lnState = LN_ST_CD_BACKOFF ;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <lnState>

      lnRxBuffer->Stats.Collisions++ ;
    138a:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <lnRxBuffer>
    138e:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <lnRxBuffer+0x1>
    1392:	e5 57       	subi	r30, 0x75	; 117
    1394:	ff 4f       	sbci	r31, 0xFF	; 255
    1396:	80 81       	ld	r24, Z
    1398:	8f 5f       	subi	r24, 0xFF	; 255
    139a:	80 83       	st	Z, r24
    }
  }

  if( lnState == LN_ST_CD_BACKOFF )
    139c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <lnState>
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	a1 f4       	brne	.+40     	; 0x13cc <__vector_6+0x24c>
  {
    if( lnBitCount == 0 )
    13a4:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <lnBitCount>
    13a8:	81 11       	cpse	r24, r1
    13aa:	07 c0       	rjmp	.+14     	; 0x13ba <__vector_6+0x23a>
    {
        // Even though we are waiting, other nodes may try and transmit early
        // so Clear the Start Bit Interrupt Status Flag and Enable ready to 
        // detect the next Start Bit
      sbi( LN_SB_INT_STATUS_REG, LN_SB_INT_STATUS_BIT ) ;
    13ac:	88 b7       	in	r24, 0x38	; 56
    13ae:	80 62       	ori	r24, 0x20	; 32
    13b0:	88 bf       	out	0x38, r24	; 56
      sbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT ) ;
    13b2:	89 b7       	in	r24, 0x39	; 57
    13b4:	80 62       	ori	r24, 0x20	; 32
    13b6:	89 bf       	out	0x39, r24	; 57
    13b8:	09 c0       	rjmp	.+18     	; 0x13cc <__vector_6+0x24c>
    }
    else if( lnBitCount >= LN_BACKOFF_MAX )
    13ba:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <lnBitCount>
    13be:	88 33       	cpi	r24, 0x38	; 56
    13c0:	28 f0       	brcs	.+10     	; 0x13cc <__vector_6+0x24c>
    { // declare network to free after maximum backoff delay
      lnState = LN_ST_IDLE ;
    13c2:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <lnState>
      cbi( LN_TMR_INT_ENABLE_REG, LN_TMR_INT_ENABLE_BIT ) ;
    13c6:	89 b7       	in	r24, 0x39	; 57
    13c8:	8f 7e       	andi	r24, 0xEF	; 239
    13ca:	89 bf       	out	0x39, r24	; 57
    }
  }
}
    13cc:	ff 91       	pop	r31
    13ce:	ef 91       	pop	r30
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	bf 91       	pop	r27
    13d6:	af 91       	pop	r26
    13d8:	9f 91       	pop	r25
    13da:	8f 91       	pop	r24
    13dc:	7f 91       	pop	r23
    13de:	6f 91       	pop	r22
    13e0:	5f 91       	pop	r21
    13e2:	4f 91       	pop	r20
    13e4:	3f 91       	pop	r19
    13e6:	2f 91       	pop	r18
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	0f 90       	pop	r0
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	0f 90       	pop	r0
    13f2:	1f 90       	pop	r1
    13f4:	18 95       	reti

000013f6 <initLocoNetHardware>:
  sbi(TX_MEASUREMENT_DDR, TX_MEASUREMENT_PIN);
  cbi(TX_MEASUREMENT_PORT, TX_MEASUREMENT_PIN);
#endif

	
	lnRxBuffer = RxBuffer ;
    13f6:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <lnRxBuffer+0x1>
    13fa:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <lnRxBuffer>

    // Set the TX line to Inactive
  LN_SW_UART_SET_TX_HIGH
    13fe:	94 98       	cbi	0x12, 4	; 18
  sbi( LN_TX_DDR, LN_TX_BIT ) ;
    1400:	8c 9a       	sbi	0x11, 4	; 17
	ACSR |= (1<<ACBG)|(1<<ACO)|(1<<ACIC);	// turn on comparitor, bandgap, output, input capture
	ADMUX |= (1<<REFS0)|(1<<REFS1)|1;		//choose internal 2.56V source and Chl 1
	TCCR1B = (TCCR1B & 0xF8) | (1<<ICES1) | LN_TMR_PRESCALER ;    		// Set Rising Edge and Timer Clock Source 
#elif (defined wBOARD_FREDI || defined LN_SW_USE_AC_AS_IN_FREDI)
	// Enable Analog Comparator to Trigger the Input Capture unit
	ACSR = (1<<ACI) | (1<<ACIS1) | (1<<ACIS0) | (1<<ACIC) ;
    1402:	87 e1       	ldi	r24, 0x17	; 23
    1404:	88 b9       	out	0x08, r24	; 8
    ACSR = 1<<ACD ;
  #endif
//	TCCR1B |= (1<<ICNC1) ;    		// Enable Noise Canceller 
#endif

  lnState = LN_ST_IDLE ;
    1406:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <lnState>

    //Clear StartBit Interrupt flag
  sbi( LN_SB_INT_STATUS_REG, LN_SB_INT_STATUS_BIT ) ;
    140a:	88 b7       	in	r24, 0x38	; 56
    140c:	80 62       	ori	r24, 0x20	; 32
    140e:	88 bf       	out	0x38, r24	; 56

    //Enable StartBit Interrupt
  sbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT ) ;
    1410:	89 b7       	in	r24, 0x39	; 57
    1412:	80 62       	ori	r24, 0x20	; 32
    1414:	89 bf       	out	0x39, r24	; 57

    // Set Timer Clock Source 
  LN_TMR_CONTROL_REG = (LN_TMR_CONTROL_REG & 0xF8) | LN_TMR_PRESCALER ;
    1416:	8e b5       	in	r24, 0x2e	; 46
    1418:	88 7f       	andi	r24, 0xF8	; 248
    141a:	81 60       	ori	r24, 0x01	; 1
    141c:	8e bd       	out	0x2e, r24	; 46
    141e:	08 95       	ret

00001420 <sendLocoNetPacketTry>:
}


LN_STATUS sendLocoNetPacketTry(lnMsg *TxData, unsigned char ucPrioDelay)
{
    1420:	1f 93       	push	r17
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	ec 01       	movw	r28, r24
  byte  CheckSum ;
  byte  CheckLength ;

  lnTxLength = getLnMsgSize( TxData ) ;
    1428:	16 2f       	mov	r17, r22
    142a:	6d d2       	rcall	.+1242   	; 0x1906 <getLnMsgSize>
    142c:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <lnTxLength>

  // First calculate the checksum as it may not have been done
  CheckLength = lnTxLength - 1 ;
    1430:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <lnTxLength>
  CheckSum = 0xFF ;

  for( lnTxIndex = 0; lnTxIndex < CheckLength; lnTxIndex++ )
    1434:	21 50       	subi	r18, 0x01	; 1
    1436:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <lnTxIndex>
    143a:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <lnTxIndex>
    143e:	82 17       	cp	r24, r18
    1440:	90 f4       	brcc	.+36     	; 0x1466 <sendLocoNetPacketTry+0x46>
      CheckSum ^= TxData->data[ lnTxIndex ] ;
    1442:	9f ef       	ldi	r25, 0xFF	; 255
    1444:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <lnTxIndex>
    1448:	fe 01       	movw	r30, r28
    144a:	e8 0f       	add	r30, r24
    144c:	f1 1d       	adc	r31, r1
    144e:	80 81       	ld	r24, Z

  // First calculate the checksum as it may not have been done
  CheckLength = lnTxLength - 1 ;
  CheckSum = 0xFF ;

  for( lnTxIndex = 0; lnTxIndex < CheckLength; lnTxIndex++ )
    1450:	98 27       	eor	r25, r24
    1452:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <lnTxIndex>
    1456:	8f 5f       	subi	r24, 0xFF	; 255
    1458:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <lnTxIndex>
    145c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <lnTxIndex>
    1460:	82 17       	cp	r24, r18
    1462:	80 f3       	brcs	.-32     	; 0x1444 <sendLocoNetPacketTry+0x24>

  lnTxLength = getLnMsgSize( TxData ) ;

  // First calculate the checksum as it may not have been done
  CheckLength = lnTxLength - 1 ;
  CheckSum = 0xFF ;
    1464:	01 c0       	rjmp	.+2      	; 0x1468 <sendLocoNetPacketTry+0x48>

  for( lnTxIndex = 0; lnTxIndex < CheckLength; lnTxIndex++ )
      CheckSum ^= TxData->data[ lnTxIndex ] ;
  
  TxData->data[ CheckLength ] = CheckSum ; 
    1466:	9f ef       	ldi	r25, 0xFF	; 255
    1468:	fe 01       	movw	r30, r28
    146a:	e2 0f       	add	r30, r18
    146c:	f1 1d       	adc	r31, r1
  // clip maximum prio delay
  if (ucPrioDelay > LN_BACKOFF_MAX)
    ucPrioDelay = LN_BACKOFF_MAX;

  // if priority delay was waited now, declare net as free for this try
  cli();  // disabling interrupt to avoid confusion by ISR changing lnState while we want to do it
    146e:	90 83       	st	Z, r25
  if (lnState == LN_ST_CD_BACKOFF)
    1470:	f8 94       	cli
    1472:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <lnState>
    1476:	81 30       	cpi	r24, 0x01	; 1
  {
    if (lnBitCount >= ucPrioDelay)  // Likely we don't want to wait as long as
    1478:	61 f4       	brne	.+24     	; 0x1492 <sendLocoNetPacketTry+0x72>
    147a:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <lnBitCount>
    147e:	19 33       	cpi	r17, 0x39	; 57
    1480:	08 f0       	brcs	.+2      	; 0x1484 <sendLocoNetPacketTry+0x64>
    1482:	18 e3       	ldi	r17, 0x38	; 56
    1484:	81 17       	cp	r24, r17
    {                               // the timer ISR waits its maximum delay.
      lnState = LN_ST_IDLE ;
    1486:	28 f0       	brcs	.+10     	; 0x1492 <sendLocoNetPacketTry+0x72>
    1488:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <lnState>
      cbi( LN_TMR_INT_ENABLE_REG, LN_TMR_INT_ENABLE_BIT ) ;
    148c:	89 b7       	in	r24, 0x39	; 57
    148e:	8f 7e       	andi	r24, 0xEF	; 239
    }
  }
  sei();  // a delayed start bit interrupt will happen now,
    1490:	89 bf       	out	0x39, r24	; 57
          // a delayed timer interrupt was stalled

  // If the Network is not Idle, don't start the packet
  if (lnState == LN_ST_CD_BACKOFF)
    1492:	78 94       	sei
    1494:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <lnState>
    1498:	81 30       	cpi	r24, 0x01	; 1
  {
    if (lnBitCount < LN_CARRIER_TICKS)   // in carrier detect timer?
    149a:	39 f4       	brne	.+14     	; 0x14aa <sendLocoNetPacketTry+0x8a>
    149c:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <lnBitCount>
      return LN_CD_BACKOFF;
    14a0:	94 31       	cpi	r25, 0x14	; 20
    14a2:	08 f0       	brcs	.+2      	; 0x14a6 <sendLocoNetPacketTry+0x86>
    14a4:	57 c0       	rjmp	.+174    	; 0x1554 <sendLocoNetPacketTry+0x134>
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    else
      return LN_PRIO_BACKOFF;
  }

  if( lnState != LN_ST_IDLE )
    14a8:	55 c0       	rjmp	.+170    	; 0x1554 <sendLocoNetPacketTry+0x134>
    14aa:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <lnState>
    14ae:	81 11       	cpse	r24, r1
    return LN_NETWORK_BUSY;  // neither idle nor backoff -> busy

  // We need to do this with interrupts off.
  // The last time we check for free net until sending our start bit
  // must be as short as possible, not interrupted.
  cli() ;
    14b0:	4e c0       	rjmp	.+156    	; 0x154e <sendLocoNetPacketTry+0x12e>
  // Before we do anything else - Disable StartBit Interrupt
  cbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT ) ;
    14b2:	f8 94       	cli
    14b4:	89 b7       	in	r24, 0x39	; 57
    14b6:	8f 7d       	andi	r24, 0xDF	; 223
  if (bit_is_set(LN_SB_INT_STATUS_REG, LN_SB_INT_STATUS_BIT))
    14b8:	89 bf       	out	0x39, r24	; 57
    14ba:	08 b6       	in	r0, 0x38	; 56
    14bc:	05 fe       	sbrs	r0, 5
  {
    // first we disabled it, than before sending the start bit, we found out
    // that somebody was faster by examining the start bit interrupt request flag
    sbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT ) ;
    14be:	06 c0       	rjmp	.+12     	; 0x14cc <sendLocoNetPacketTry+0xac>
    14c0:	89 b7       	in	r24, 0x39	; 57
    14c2:	80 62       	ori	r24, 0x20	; 32
    sei() ;  // receive now what our rival is sending
    14c4:	89 bf       	out	0x39, r24	; 57
    return LN_NETWORK_BUSY;
    14c6:	78 94       	sei
    14c8:	82 e0       	ldi	r24, 0x02	; 2
  }

  LN_SW_UART_SET_TX_LOW        // Begin the Start Bit
    14ca:	44 c0       	rjmp	.+136    	; 0x1554 <sendLocoNetPacketTry+0x134>
  // added adjustment value for bugfix (Olaf Funke)
#ifdef TX_START_MEASUREMENT
	sbi(TX_MEASUREMENT_PORT, TX_MEASUREMENT_PIN);
#endif
	
  lnCompareTarget = LN_TMR_COUNT_REG + LN_TIMER_TX_RELOAD_PERIOD - LN_TIMER_TX_RELOAD_ADJUST;
    14cc:	94 9a       	sbi	0x12, 4	; 18
    14ce:	8c b5       	in	r24, 0x2c	; 44
    14d0:	9d b5       	in	r25, 0x2d	; 45
    14d2:	88 5a       	subi	r24, 0xA8	; 168
    14d4:	9e 4f       	sbci	r25, 0xFE	; 254
    14d6:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <lnCompareTarget+0x1>
    14da:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <lnCompareTarget>
  LN_TMR_OUTP_CAPT_REG = lnCompareTarget ;
    14de:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <lnCompareTarget>
    14e2:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <lnCompareTarget+0x1>
    14e6:	9b bd       	out	0x2b, r25	; 43

  sei() ;
    14e8:	8a bd       	out	0x2a, r24	; 42

  lnTxData = TxData ;
    14ea:	78 94       	sei
    14ec:	d0 93 83 01 	sts	0x0183, r29	; 0x800183 <lnTxData+0x1>
    14f0:	c0 93 82 01 	sts	0x0182, r28	; 0x800182 <lnTxData>
  lnTxIndex = 0 ;
    14f4:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <lnTxIndex>
  lnTxSuccess = 0 ;
    14f8:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <lnTxSuccess>

    // Load the first Byte
  lnCurrentByte = TxData->data[ 0 ] ;
    14fc:	88 81       	ld	r24, Y
    14fe:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <lnCurrentByte>

    // Set the State to Transmit
  lnState = LN_ST_TX ;                      
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <lnState>

    // Reset the bit counter
  lnBitCount = 0 ;                          
    1508:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <lnBitCount>

    // Clear the current Compare interrupt status bit and enable the Compare interrupt
  sbi(LN_TMR_INT_STATUS_REG, LN_TMR_INT_STATUS_BIT) ;
    150c:	88 b7       	in	r24, 0x38	; 56
    150e:	80 61       	ori	r24, 0x10	; 16
  sbi(LN_TMR_INT_ENABLE_REG, LN_TMR_INT_ENABLE_BIT) ; 
    1510:	88 bf       	out	0x38, r24	; 56
    1512:	89 b7       	in	r24, 0x39	; 57
    1514:	80 61       	ori	r24, 0x10	; 16

  // now busy waiting until the interrupts did the rest
  while (lnState == LN_ST_TX) {}
    1516:	89 bf       	out	0x39, r24	; 57
    1518:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <lnState>
    151c:	83 30       	cpi	r24, 0x03	; 3

  if (lnTxSuccess)
    151e:	e1 f3       	breq	.-8      	; 0x1518 <sendLocoNetPacketTry+0xf8>
    1520:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <lnTxSuccess>
    1524:	88 23       	and	r24, r24
  {
    lnRxBuffer->Stats.TxPackets++ ;
    1526:	69 f0       	breq	.+26     	; 0x1542 <sendLocoNetPacketTry+0x122>
    1528:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <lnRxBuffer>
    152c:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <lnRxBuffer+0x1>
    1530:	e8 57       	subi	r30, 0x78	; 120
    1532:	ff 4f       	sbci	r31, 0xFF	; 255
    1534:	80 81       	ld	r24, Z
    1536:	91 81       	ldd	r25, Z+1	; 0x01
    1538:	01 96       	adiw	r24, 0x01	; 1
    153a:	91 83       	std	Z+1, r25	; 0x01
    return LN_DONE;
    153c:	80 83       	st	Z, r24
    153e:	83 e0       	ldi	r24, 0x03	; 3
  }

  if (lnState == LN_ST_TX_COLLISION)
    1540:	09 c0       	rjmp	.+18     	; 0x1554 <sendLocoNetPacketTry+0x134>
    1542:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <lnState>
    1546:	82 30       	cpi	r24, 0x02	; 2
  {
    return LN_COLLISION;
  }

  return LN_UNKNOWN_ERROR; // everything else is an error
    1548:	21 f0       	breq	.+8      	; 0x1552 <sendLocoNetPacketTry+0x132>
    154a:	85 e0       	ldi	r24, 0x05	; 5
    else
      return LN_PRIO_BACKOFF;
  }

  if( lnState != LN_ST_IDLE )
    return LN_NETWORK_BUSY;  // neither idle nor backoff -> busy
    154c:	03 c0       	rjmp	.+6      	; 0x1554 <sendLocoNetPacketTry+0x134>
    154e:	82 e0       	ldi	r24, 0x02	; 2
    return LN_DONE;
  }

  if (lnState == LN_ST_TX_COLLISION)
  {
    return LN_COLLISION;
    1550:	01 c0       	rjmp	.+2      	; 0x1554 <sendLocoNetPacketTry+0x134>
  }

  return LN_UNKNOWN_ERROR; // everything else is an error
}
    1552:	84 e0       	ldi	r24, 0x04	; 4
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	08 95       	ret

0000155c <__vector_9>:
volatile byte SlowTimerTicks = 0 ;
volatile byte FastTimerTicks = 0 ;
volatile word DelayTimerTicks = 0 ;

ISR(TIMER0_OVF_vect)
{
    155c:	1f 92       	push	r1
    155e:	0f 92       	push	r0
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	0f 92       	push	r0
    1564:	11 24       	eor	r1, r1
    1566:	8f 93       	push	r24
    1568:	9f 93       	push	r25
  TCNT0 = (byte) TICK_RELOAD ;
    156a:	84 ee       	ldi	r24, 0xE4	; 228
    156c:	82 bf       	out	0x32, r24	; 50

  FastTimerTicks++;
    156e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <FastTimerTicks>
    1572:	8f 5f       	subi	r24, 0xFF	; 255
    1574:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <FastTimerTicks>

  if( ++SlowTimerAccumulator >= 100 )
    1578:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <SlowTimerAccumulator>
    157c:	8f 5f       	subi	r24, 0xFF	; 255
    157e:	84 36       	cpi	r24, 0x64	; 100
    1580:	18 f4       	brcc	.+6      	; 0x1588 <__vector_9+0x2c>
    1582:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <SlowTimerAccumulator>
    1586:	07 c0       	rjmp	.+14     	; 0x1596 <__vector_9+0x3a>
  {
    SlowTimerAccumulator = 0 ;
    1588:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <SlowTimerAccumulator>

    SlowTimerTicks++;
    158c:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <SlowTimerTicks>
    1590:	8f 5f       	subi	r24, 0xFF	; 255
    1592:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <SlowTimerTicks>
  }
	
	if( DelayTimerTicks )
    1596:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <DelayTimerTicks>
    159a:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <DelayTimerTicks+0x1>
    159e:	89 2b       	or	r24, r25
    15a0:	49 f0       	breq	.+18     	; 0x15b4 <__vector_9+0x58>
		DelayTimerTicks--;
    15a2:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <DelayTimerTicks>
    15a6:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <DelayTimerTicks+0x1>
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <DelayTimerTicks+0x1>
    15b0:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <DelayTimerTicks>
}
    15b4:	9f 91       	pop	r25
    15b6:	8f 91       	pop	r24
    15b8:	0f 90       	pop	r0
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	0f 90       	pop	r0
    15be:	1f 90       	pop	r1
    15c0:	18 95       	reti

000015c2 <initTimer>:
void initTimer()
{
	#if defined (__AVR_ATmega16__)
	
	    // Get the Current Timer1 Count and Add the offset for the Compare target
	  TCNT0 = (byte) TICK_RELOAD ;
    15c2:	84 ee       	ldi	r24, 0xE4	; 228
    15c4:	82 bf       	out	0x32, r24	; 50
	
	    // Clear the Overflow interrupt status bit and enable the overflow interrupt
	  sbi(TIFR, TOV0) ;
    15c6:	88 b7       	in	r24, 0x38	; 56
    15c8:	81 60       	ori	r24, 0x01	; 1
    15ca:	88 bf       	out	0x38, r24	; 56
	  sbi(TIMSK, TOIE0) ; 
    15cc:	89 b7       	in	r24, 0x39	; 57
    15ce:	81 60       	ori	r24, 0x01	; 1
    15d0:	89 bf       	out	0x39, r24	; 57
	
	    // Set Timer Clock Source 
	  TCCR0 = (TCCR0 & 0xF8) | TIMER_PRESCALER_CODE ;
    15d2:	83 b7       	in	r24, 0x33	; 51
    15d4:	88 7f       	andi	r24, 0xF8	; 248
    15d6:	84 60       	ori	r24, 0x04	; 4
    15d8:	83 bf       	out	0x33, r24	; 51
    15da:	08 95       	ret

000015dc <addTimerAction>:
	#endif	  
	  
}

void addTimerAction( TimerAction *pAction, byte Ticks, byte (*TickAction) ( void *UserPointer ), void *UserPointer, byte Fast )
{
    15dc:	0f 93       	push	r16
    15de:	fc 01       	movw	r30, r24
  byte  StatusReg ;

    // This needs to be done with Interrupts off, save Status reg,
    // disable interrupts and then restore the previous Status reg
    // to enable interrupts again if they were off 
  StatusReg = SREG ;
    15e0:	8f b7       	in	r24, 0x3f	; 63
  cli() ;
    15e2:	f8 94       	cli

  if(Fast)
    15e4:	00 23       	and	r16, r16
    15e6:	59 f0       	breq	.+22     	; 0x15fe <addTimerAction+0x22>
  {
    pAction->Next = FastTimerActionList ;
    15e8:	a0 91 a3 00 	lds	r26, 0x00A3	; 0x8000a3 <FastTimerActionList>
    15ec:	b0 91 a4 00 	lds	r27, 0x00A4	; 0x8000a4 <FastTimerActionList+0x1>
    15f0:	b6 83       	std	Z+6, r27	; 0x06
    15f2:	a5 83       	std	Z+5, r26	; 0x05
    FastTimerActionList = pAction ;
    15f4:	f0 93 a4 00 	sts	0x00A4, r31	; 0x8000a4 <FastTimerActionList+0x1>
    15f8:	e0 93 a3 00 	sts	0x00A3, r30	; 0x8000a3 <FastTimerActionList>
    15fc:	0a c0       	rjmp	.+20     	; 0x1612 <addTimerAction+0x36>
  }
  else
  {
    pAction->Next = SlowTimerActionList ;
    15fe:	a0 91 a5 00 	lds	r26, 0x00A5	; 0x8000a5 <SlowTimerActionList>
    1602:	b0 91 a6 00 	lds	r27, 0x00A6	; 0x8000a6 <SlowTimerActionList+0x1>
    1606:	b6 83       	std	Z+6, r27	; 0x06
    1608:	a5 83       	std	Z+5, r26	; 0x05
    SlowTimerActionList = pAction ;
    160a:	f0 93 a6 00 	sts	0x00A6, r31	; 0x8000a6 <SlowTimerActionList+0x1>
    160e:	e0 93 a5 00 	sts	0x00A5, r30	; 0x8000a5 <SlowTimerActionList>
  }

  pAction->Ticks = Ticks ;
    1612:	60 83       	st	Z, r22
  pAction->TickAction = TickAction ;
    1614:	54 83       	std	Z+4, r21	; 0x04
    1616:	43 83       	std	Z+3, r20	; 0x03
  pAction->UserPointer = UserPointer ;
    1618:	32 83       	std	Z+2, r19	; 0x02
    161a:	21 83       	std	Z+1, r18	; 0x01
  
    // Enable Interrupts if they were on to start with
  SREG = StatusReg ;
    161c:	8f bf       	out	0x3f, r24	; 63
}
    161e:	0f 91       	pop	r16
    1620:	08 95       	ret

00001622 <resetTimerAction>:

void resetTimerAction( TimerAction *pAction, byte Ticks )
{
  pAction->Ticks = Ticks ;
    1622:	fc 01       	movw	r30, r24
    1624:	60 83       	st	Z, r22
    1626:	08 95       	ret

00001628 <delayTimer>:
}

void delayTimer( word delayTicks )
{
	DelayTimerTicks = delayTicks ;
    1628:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <DelayTimerTicks+0x1>
    162c:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <DelayTimerTicks>
	
	while( DelayTimerTicks )
    1630:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <DelayTimerTicks>
    1634:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <DelayTimerTicks+0x1>
    1638:	89 2b       	or	r24, r25
    163a:	d1 f7       	brne	.-12     	; 0x1630 <delayTimer+0x8>
		; // Sit and wait for the interrupt handler to decrement the ticks to 0
}
    163c:	08 95       	ret

0000163e <processTimerActions>:

void processTimerActions(void)
{
    163e:	0f 93       	push	r16
    1640:	1f 93       	push	r17
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
  byte SlowTicks ;
  
    // This needs to be done with Interrupts off, save Status reg,
    // disable interrupts and then restore the previous Status reg
    // to enable interrupts again if they were off 
  StatusReg = SREG ;
    1646:	8f b7       	in	r24, 0x3f	; 63
  cli() ;
    1648:	f8 94       	cli

  FastTicks = FastTimerTicks ;   
    164a:	00 91 a0 00 	lds	r16, 0x00A0	; 0x8000a0 <FastTimerTicks>
  FastTimerTicks = 0 ;
    164e:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <FastTimerTicks>

  SlowTicks = SlowTimerTicks ;   
    1652:	10 91 a1 00 	lds	r17, 0x00A1	; 0x8000a1 <SlowTimerTicks>
  SlowTimerTicks = 0 ;
    1656:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <SlowTimerTicks>

    // Enable Interrupts if they were on to start with
  SREG = StatusReg ;
    165a:	8f bf       	out	0x3f, r24	; 63

  if( FastTicks && FastTimerActionList )
    165c:	00 23       	and	r16, r16
    165e:	01 f1       	breq	.+64     	; 0x16a0 <processTimerActions+0x62>
    1660:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <FastTimerActionList>
    1664:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <FastTimerActionList+0x1>
    1668:	89 2b       	or	r24, r25
    166a:	d1 f0       	breq	.+52     	; 0x16a0 <processTimerActions+0x62>
  {
    while( FastTicks-- )
    {
      pAction = FastTimerActionList ;
    166c:	c0 91 a3 00 	lds	r28, 0x00A3	; 0x8000a3 <FastTimerActionList>
    1670:	d0 91 a4 00 	lds	r29, 0x00A4	; 0x8000a4 <FastTimerActionList+0x1>

      while( pAction )
    1674:	20 97       	sbiw	r28, 0x00	; 0
    1676:	91 f0       	breq	.+36     	; 0x169c <processTimerActions+0x5e>
      {
        if( pAction->Ticks )
    1678:	88 81       	ld	r24, Y
    167a:	88 23       	and	r24, r24
    167c:	51 f0       	breq	.+20     	; 0x1692 <processTimerActions+0x54>
        {
           pAction->Ticks--;
    167e:	81 50       	subi	r24, 0x01	; 1
    1680:	88 83       	st	Y, r24
          // If we have gone from > 0 to 0 then set done and possibly reload
          if( !pAction->Ticks )
    1682:	81 11       	cpse	r24, r1
    1684:	06 c0       	rjmp	.+12     	; 0x1692 <processTimerActions+0x54>
            pAction->Ticks = (*pAction->TickAction) ( pAction->UserPointer ) ;
    1686:	eb 81       	ldd	r30, Y+3	; 0x03
    1688:	fc 81       	ldd	r31, Y+4	; 0x04
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	9a 81       	ldd	r25, Y+2	; 0x02
    168e:	09 95       	icall
    1690:	88 83       	st	Y, r24
        }

        pAction = pAction->Next ;
    1692:	0d 80       	ldd	r0, Y+5	; 0x05
    1694:	de 81       	ldd	r29, Y+6	; 0x06
    1696:	c0 2d       	mov	r28, r0
  {
    while( FastTicks-- )
    {
      pAction = FastTimerActionList ;

      while( pAction )
    1698:	20 97       	sbiw	r28, 0x00	; 0
    169a:	71 f7       	brne	.-36     	; 0x1678 <processTimerActions+0x3a>
    169c:	01 50       	subi	r16, 0x01	; 1
    // Enable Interrupts if they were on to start with
  SREG = StatusReg ;

  if( FastTicks && FastTimerActionList )
  {
    while( FastTicks-- )
    169e:	31 f7       	brne	.-52     	; 0x166c <processTimerActions+0x2e>
        pAction = pAction->Next ;
      }
    }
  }

  if( SlowTicks && SlowTimerActionList )
    16a0:	11 23       	and	r17, r17
    16a2:	01 f1       	breq	.+64     	; 0x16e4 <processTimerActions+0xa6>
    16a4:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <SlowTimerActionList>
    16a8:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <SlowTimerActionList+0x1>
    16ac:	89 2b       	or	r24, r25
    16ae:	d1 f0       	breq	.+52     	; 0x16e4 <processTimerActions+0xa6>
  {
    while( SlowTicks-- )
    {
      pAction = SlowTimerActionList ;
    16b0:	c0 91 a5 00 	lds	r28, 0x00A5	; 0x8000a5 <SlowTimerActionList>
    16b4:	d0 91 a6 00 	lds	r29, 0x00A6	; 0x8000a6 <SlowTimerActionList+0x1>

      while( pAction )
    16b8:	20 97       	sbiw	r28, 0x00	; 0
    16ba:	91 f0       	breq	.+36     	; 0x16e0 <processTimerActions+0xa2>
      {
        if( pAction->Ticks )
    16bc:	88 81       	ld	r24, Y
    16be:	88 23       	and	r24, r24
    16c0:	51 f0       	breq	.+20     	; 0x16d6 <processTimerActions+0x98>
        {
           pAction->Ticks--;
    16c2:	81 50       	subi	r24, 0x01	; 1
    16c4:	88 83       	st	Y, r24
          // If we have gone from > 0 to 0 then set done and possibly reload
          if( !pAction->Ticks )
    16c6:	81 11       	cpse	r24, r1
    16c8:	06 c0       	rjmp	.+12     	; 0x16d6 <processTimerActions+0x98>
            pAction->Ticks = (*pAction->TickAction) ( pAction->UserPointer ) ;
    16ca:	eb 81       	ldd	r30, Y+3	; 0x03
    16cc:	fc 81       	ldd	r31, Y+4	; 0x04
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	9a 81       	ldd	r25, Y+2	; 0x02
    16d2:	09 95       	icall
    16d4:	88 83       	st	Y, r24
        }

        pAction = pAction->Next ;
    16d6:	0d 80       	ldd	r0, Y+5	; 0x05
    16d8:	de 81       	ldd	r29, Y+6	; 0x06
    16da:	c0 2d       	mov	r28, r0
  {
    while( SlowTicks-- )
    {
      pAction = SlowTimerActionList ;

      while( pAction )
    16dc:	20 97       	sbiw	r28, 0x00	; 0
    16de:	71 f7       	brne	.-36     	; 0x16bc <processTimerActions+0x7e>
    16e0:	11 50       	subi	r17, 0x01	; 1
    }
  }

  if( SlowTicks && SlowTimerActionList )
  {
    while( SlowTicks-- )
    16e2:	31 f7       	brne	.-52     	; 0x16b0 <processTimerActions+0x72>

        pAction = pAction->Next ;
      }
    }
  }
}                                                                                                                 
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	1f 91       	pop	r17
    16ea:	0f 91       	pop	r16
    16ec:	08 95       	ret

000016ee <recvLnMsg>:
}

LnBufStats *getLnBufStats( LnBuf *Buffer )
{
	return 0 ;
}
    16ee:	2f 92       	push	r2
    16f0:	3f 92       	push	r3
    16f2:	4f 92       	push	r4
    16f4:	5f 92       	push	r5
    16f6:	6f 92       	push	r6
    16f8:	7f 92       	push	r7
    16fa:	8f 92       	push	r8
    16fc:	9f 92       	push	r9
    16fe:	af 92       	push	r10
    1700:	bf 92       	push	r11
    1702:	cf 92       	push	r12
    1704:	df 92       	push	r13
    1706:	ef 92       	push	r14
    1708:	ff 92       	push	r15
    170a:	0f 93       	push	r16
    170c:	1f 93       	push	r17
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
    1712:	00 d0       	rcall	.+0      	; 0x1714 <recvLnMsg+0x26>
    1714:	00 d0       	rcall	.+0      	; 0x1716 <recvLnMsg+0x28>
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	5c 01       	movw	r10, r24
    171c:	fc 01       	movw	r30, r24
    171e:	ef 57       	subi	r30, 0x7F	; 127
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	90 81       	ld	r25, Z
    1724:	31 97       	sbiw	r30, 0x01	; 1
    1726:	80 81       	ld	r24, Z
    1728:	98 17       	cp	r25, r24
    172a:	09 f4       	brne	.+2      	; 0x172e <recvLnMsg+0x40>
    172c:	cc c0       	rjmp	.+408    	; 0x18c6 <recvLnMsg+0x1d8>
    172e:	85 01       	movw	r16, r10
    1730:	0e 57       	subi	r16, 0x7E	; 126
    1732:	1f 4f       	sbci	r17, 0xFF	; 255
    1734:	65 01       	movw	r12, r10
    1736:	23 e8       	ldi	r18, 0x83	; 131
    1738:	c2 0e       	add	r12, r18
    173a:	d1 1c       	adc	r13, r1
    173c:	75 01       	movw	r14, r10
    173e:	34 e8       	ldi	r19, 0x84	; 132
    1740:	e3 0e       	add	r14, r19
    1742:	f1 1c       	adc	r15, r1
    1744:	35 01       	movw	r6, r10
    1746:	87 e8       	ldi	r24, 0x87	; 135
    1748:	68 0e       	add	r6, r24
    174a:	71 1c       	adc	r7, r1
    174c:	68 94       	set
    174e:	22 24       	eor	r2, r2
    1750:	27 f8       	bld	r2, 7
    1752:	4f 01       	movw	r8, r30
    1754:	95 01       	movw	r18, r10
    1756:	2f 57       	subi	r18, 0x7F	; 127
    1758:	3f 4f       	sbci	r19, 0xFF	; 255
    175a:	3c 83       	std	Y+4, r19	; 0x04
    175c:	2b 83       	std	Y+3, r18	; 0x03
    175e:	35 96       	adiw	r30, 0x05	; 5
    1760:	fa 83       	std	Y+2, r31	; 0x02
    1762:	e9 83       	std	Y+1, r30	; 0x01
    1764:	f5 01       	movw	r30, r10
    1766:	e9 0f       	add	r30, r25
    1768:	f1 1d       	adc	r31, r1
    176a:	30 80       	ld	r3, Z
    176c:	33 20       	and	r3, r3
    176e:	d4 f4       	brge	.+52     	; 0x17a4 <recvLnMsg+0xb6>
    1770:	f8 01       	movw	r30, r16
    1772:	80 81       	ld	r24, Z
    1774:	89 17       	cp	r24, r25
    1776:	21 f0       	breq	.+8      	; 0x1780 <recvLnMsg+0x92>
    1778:	f3 01       	movw	r30, r6
    177a:	80 81       	ld	r24, Z
    177c:	8f 5f       	subi	r24, 0xFF	; 255
    177e:	80 83       	st	Z, r24
    1780:	f8 01       	movw	r30, r16
    1782:	90 83       	st	Z, r25
    1784:	2f ef       	ldi	r18, 0xFF	; 255
    1786:	f6 01       	movw	r30, r12
    1788:	20 83       	st	Z, r18
    178a:	83 2d       	mov	r24, r3
    178c:	80 76       	andi	r24, 0x60	; 96
    178e:	80 36       	cpi	r24, 0x60	; 96
    1790:	09 f4       	brne	.+2      	; 0x1794 <recvLnMsg+0xa6>
    1792:	9f c0       	rjmp	.+318    	; 0x18d2 <recvLnMsg+0x1e4>
    1794:	82 95       	swap	r24
    1796:	8f 70       	andi	r24, 0x0F	; 15
    1798:	8e 5f       	subi	r24, 0xFE	; 254
    179a:	f7 01       	movw	r30, r14
    179c:	80 83       	st	Z, r24
    179e:	81 11       	cpse	r24, r1
    17a0:	06 c0       	rjmp	.+12     	; 0x17ae <recvLnMsg+0xc0>
    17a2:	51 c0       	rjmp	.+162    	; 0x1846 <recvLnMsg+0x158>
    17a4:	f7 01       	movw	r30, r14
    17a6:	80 81       	ld	r24, Z
    17a8:	81 11       	cpse	r24, r1
    17aa:	4d c0       	rjmp	.+154    	; 0x1846 <recvLnMsg+0x158>
    17ac:	30 82       	st	Z, r3
    17ae:	f8 01       	movw	r30, r16
    17b0:	20 81       	ld	r18, Z
    17b2:	f7 01       	movw	r30, r14
    17b4:	30 81       	ld	r19, Z
    17b6:	82 2f       	mov	r24, r18
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	83 0f       	add	r24, r19
    17bc:	91 1d       	adc	r25, r1
    17be:	81 38       	cpi	r24, 0x81	; 129
    17c0:	91 05       	cpc	r25, r1
    17c2:	0c f4       	brge	.+2      	; 0x17c6 <recvLnMsg+0xd8>
    17c4:	40 c0       	rjmp	.+128    	; 0x1846 <recvLnMsg+0x158>
    17c6:	42 2c       	mov	r4, r2
    17c8:	42 1a       	sub	r4, r18
    17ca:	f8 94       	cli
    17cc:	f4 01       	movw	r30, r8
    17ce:	40 81       	ld	r20, Z
    17d0:	eb 81       	ldd	r30, Y+3	; 0x03
    17d2:	fc 81       	ldd	r31, Y+4	; 0x04
    17d4:	80 81       	ld	r24, Z
    17d6:	84 17       	cp	r24, r20
    17d8:	40 f4       	brcc	.+16     	; 0x17ea <recvLnMsg+0xfc>
    17da:	f8 01       	movw	r30, r16
    17dc:	80 81       	ld	r24, Z
    17de:	f4 2f       	mov	r31, r20
    17e0:	f8 1b       	sub	r31, r24
    17e2:	8f 2f       	mov	r24, r31
    17e4:	f4 01       	movw	r30, r8
    17e6:	80 83       	st	Z, r24
    17e8:	04 c0       	rjmp	.+8      	; 0x17f2 <recvLnMsg+0x104>
    17ea:	84 2d       	mov	r24, r4
    17ec:	84 0f       	add	r24, r20
    17ee:	f4 01       	movw	r30, r8
    17f0:	80 83       	st	Z, r24
    17f2:	78 94       	sei
    17f4:	eb 81       	ldd	r30, Y+3	; 0x03
    17f6:	fc 81       	ldd	r31, Y+4	; 0x04
    17f8:	80 81       	ld	r24, Z
    17fa:	48 17       	cp	r20, r24
    17fc:	80 f4       	brcc	.+32     	; 0x181e <recvLnMsg+0x130>
    17fe:	51 2c       	mov	r5, r1
    1800:	50 e0       	ldi	r21, 0x00	; 0
    1802:	b5 01       	movw	r22, r10
    1804:	c5 01       	movw	r24, r10
    1806:	84 0d       	add	r24, r4
    1808:	95 1d       	adc	r25, r5
    180a:	ef d0       	rcall	.+478    	; 0x19ea <memcpy>
    180c:	f8 01       	movw	r30, r16
    180e:	80 81       	ld	r24, Z
    1810:	b5 01       	movw	r22, r10
    1812:	68 0f       	add	r22, r24
    1814:	71 1d       	adc	r23, r1
    1816:	a2 01       	movw	r20, r4
    1818:	c5 01       	movw	r24, r10
    181a:	e7 d0       	rcall	.+462    	; 0x19ea <memcpy>
    181c:	09 c0       	rjmp	.+18     	; 0x1830 <recvLnMsg+0x142>
    181e:	f8 01       	movw	r30, r16
    1820:	80 81       	ld	r24, Z
    1822:	48 1b       	sub	r20, r24
    1824:	50 e0       	ldi	r21, 0x00	; 0
    1826:	b5 01       	movw	r22, r10
    1828:	68 0f       	add	r22, r24
    182a:	71 1d       	adc	r23, r1
    182c:	c5 01       	movw	r24, r10
    182e:	dd d0       	rcall	.+442    	; 0x19ea <memcpy>
    1830:	eb 81       	ldd	r30, Y+3	; 0x03
    1832:	fc 81       	ldd	r31, Y+4	; 0x04
    1834:	80 81       	ld	r24, Z
    1836:	f8 01       	movw	r30, r16
    1838:	90 81       	ld	r25, Z
    183a:	89 1b       	sub	r24, r25
    183c:	eb 81       	ldd	r30, Y+3	; 0x03
    183e:	fc 81       	ldd	r31, Y+4	; 0x04
    1840:	80 83       	st	Z, r24
    1842:	f8 01       	movw	r30, r16
    1844:	10 82       	st	Z, r1
    1846:	eb 81       	ldd	r30, Y+3	; 0x03
    1848:	fc 81       	ldd	r31, Y+4	; 0x04
    184a:	80 81       	ld	r24, Z
    184c:	8f 5f       	subi	r24, 0xFF	; 255
    184e:	80 83       	st	Z, r24
    1850:	f8 01       	movw	r30, r16
    1852:	90 81       	ld	r25, Z
    1854:	28 2f       	mov	r18, r24
    1856:	29 1b       	sub	r18, r25
    1858:	88 23       	and	r24, r24
    185a:	1c f4       	brge	.+6      	; 0x1862 <recvLnMsg+0x174>
    185c:	eb 81       	ldd	r30, Y+3	; 0x03
    185e:	fc 81       	ldd	r31, Y+4	; 0x04
    1860:	10 82       	st	Z, r1
    1862:	f7 01       	movw	r30, r14
    1864:	80 81       	ld	r24, Z
    1866:	28 13       	cpse	r18, r24
    1868:	20 c0       	rjmp	.+64     	; 0x18aa <recvLnMsg+0x1bc>
    186a:	f6 01       	movw	r30, r12
    186c:	80 81       	ld	r24, Z
    186e:	38 12       	cpse	r3, r24
    1870:	13 c0       	rjmp	.+38     	; 0x1898 <recvLnMsg+0x1aa>
    1872:	95 01       	movw	r18, r10
    1874:	29 0f       	add	r18, r25
    1876:	31 1d       	adc	r19, r1
    1878:	e9 81       	ldd	r30, Y+1	; 0x01
    187a:	fa 81       	ldd	r31, Y+2	; 0x02
    187c:	80 81       	ld	r24, Z
    187e:	91 81       	ldd	r25, Z+1	; 0x01
    1880:	01 96       	adiw	r24, 0x01	; 1
    1882:	91 83       	std	Z+1, r25	; 0x01
    1884:	80 83       	st	Z, r24
    1886:	eb 81       	ldd	r30, Y+3	; 0x03
    1888:	fc 81       	ldd	r31, Y+4	; 0x04
    188a:	80 81       	ld	r24, Z
    188c:	f8 01       	movw	r30, r16
    188e:	80 83       	st	Z, r24
    1890:	21 15       	cp	r18, r1
    1892:	31 05       	cpc	r19, r1
    1894:	51 f0       	breq	.+20     	; 0x18aa <recvLnMsg+0x1bc>
    1896:	1a c0       	rjmp	.+52     	; 0x18cc <recvLnMsg+0x1de>
    1898:	f3 01       	movw	r30, r6
    189a:	80 81       	ld	r24, Z
    189c:	8f 5f       	subi	r24, 0xFF	; 255
    189e:	80 83       	st	Z, r24
    18a0:	eb 81       	ldd	r30, Y+3	; 0x03
    18a2:	fc 81       	ldd	r31, Y+4	; 0x04
    18a4:	80 81       	ld	r24, Z
    18a6:	f8 01       	movw	r30, r16
    18a8:	80 83       	st	Z, r24
    18aa:	f6 01       	movw	r30, r12
    18ac:	80 81       	ld	r24, Z
    18ae:	38 26       	eor	r3, r24
    18b0:	30 82       	st	Z, r3
    18b2:	eb 81       	ldd	r30, Y+3	; 0x03
    18b4:	fc 81       	ldd	r31, Y+4	; 0x04
    18b6:	90 81       	ld	r25, Z
    18b8:	f4 01       	movw	r30, r8
    18ba:	80 81       	ld	r24, Z
    18bc:	98 13       	cpse	r25, r24
    18be:	52 cf       	rjmp	.-348    	; 0x1764 <recvLnMsg+0x76>
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	09 c0       	rjmp	.+18     	; 0x18d8 <recvLnMsg+0x1ea>
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	06 c0       	rjmp	.+12     	; 0x18d8 <recvLnMsg+0x1ea>
    18cc:	82 2f       	mov	r24, r18
    18ce:	93 2f       	mov	r25, r19
    18d0:	03 c0       	rjmp	.+6      	; 0x18d8 <recvLnMsg+0x1ea>
    18d2:	f7 01       	movw	r30, r14
    18d4:	10 82       	st	Z, r1
    18d6:	b7 cf       	rjmp	.-146    	; 0x1846 <recvLnMsg+0x158>
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	df 91       	pop	r29
    18e2:	cf 91       	pop	r28
    18e4:	1f 91       	pop	r17
    18e6:	0f 91       	pop	r16
    18e8:	ff 90       	pop	r15
    18ea:	ef 90       	pop	r14
    18ec:	df 90       	pop	r13
    18ee:	cf 90       	pop	r12
    18f0:	bf 90       	pop	r11
    18f2:	af 90       	pop	r10
    18f4:	9f 90       	pop	r9
    18f6:	8f 90       	pop	r8
    18f8:	7f 90       	pop	r7
    18fa:	6f 90       	pop	r6
    18fc:	5f 90       	pop	r5
    18fe:	4f 90       	pop	r4
    1900:	3f 90       	pop	r3
    1902:	2f 90       	pop	r2
    1904:	08 95       	ret

00001906 <getLnMsgSize>:

byte getLnMsgSize( volatile lnMsg * Msg )
{
    1906:	fc 01       	movw	r30, r24
	return ( ( Msg->sz.command & (byte)0x60 ) == (byte)0x60 ) ? Msg->sz.mesg_size : ( ( Msg->sz.command & (byte)0x60 ) >> (byte)4 ) + 2 ;
    1908:	90 81       	ld	r25, Z
    190a:	90 76       	andi	r25, 0x60	; 96
    190c:	90 36       	cpi	r25, 0x60	; 96
    190e:	11 f4       	brne	.+4      	; 0x1914 <getLnMsgSize+0xe>
    1910:	81 81       	ldd	r24, Z+1	; 0x01
    1912:	08 95       	ret
    1914:	80 81       	ld	r24, Z
    1916:	80 76       	andi	r24, 0x60	; 96
    1918:	82 95       	swap	r24
    191a:	8f 70       	andi	r24, 0x0F	; 15
    191c:	8e 5f       	subi	r24, 0xFE	; 254
}
    191e:	08 95       	ret

00001920 <initLocoNet>:
static LnBuf *pstLnRxBuffer;  // this queue eats received LN messages


void initLocoNet(LnBuf *RxBuffer)
{
	pstLnRxBuffer = RxBuffer;
    1920:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <pstLnRxBuffer+0x1>
    1924:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <pstLnRxBuffer>
	initLocoNetHardware(RxBuffer);
    1928:	66 cd       	rjmp	.-1332   	; 0x13f6 <initLocoNetHardware>
    192a:	08 95       	ret

0000192c <recvLocoNetPacket>:
}


lnMsg * recvLocoNetPacket( void )
{
	return recvLnMsg(pstLnRxBuffer);
    192c:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <pstLnRxBuffer>
    1930:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <pstLnRxBuffer+0x1>
    1934:	dc ce       	rjmp	.-584    	; 0x16ee <recvLnMsg>
}
    1936:	08 95       	ret

00001938 <sendLocoNetPacket>:


#define   LN_TX_RETRIES_MAX  25
// this function should be moved to a hardware independant module
LN_STATUS sendLocoNetPacket( lnMsg *punTxData )
{
    1938:	df 92       	push	r13
    193a:	ef 92       	push	r14
    193c:	ff 92       	push	r15
    193e:	0f 93       	push	r16
    1940:	1f 93       	push	r17
    1942:	cf 93       	push	r28
    1944:	df 93       	push	r29
    1946:	8c 01       	movw	r16, r24

      if (enReturn == LN_DONE)  // success?
        return LN_DONE;

      if (enReturn == LN_PRIO_BACKOFF)
        ucWaitForEnterBackoff = 0; // now entered backoff -> next state != LN_BACKOFF is worth incrementing the try counter
    1948:	0f 2e       	mov	r0, r31
    194a:	f9 e1       	ldi	r31, 0x19	; 25
    194c:	ef 2e       	mov	r14, r31
    194e:	f0 2d       	mov	r31, r0
#define   LN_TX_RETRIES_MAX  25
// this function should be moved to a hardware independant module
LN_STATUS sendLocoNetPacket( lnMsg *punTxData )
{
  unsigned char ucTry;
  unsigned char ucPrioDelay = LN_BACKOFF_INITIAL;
    1950:	ce e2       	ldi	r28, 0x2E	; 46

      if (enReturn == LN_DONE)  // success?
        return LN_DONE;

      if (enReturn == LN_PRIO_BACKOFF)
        ucWaitForEnterBackoff = 0; // now entered backoff -> next state != LN_BACKOFF is worth incrementing the try counter
    1952:	dd 24       	eor	r13, r13
    1954:	d3 94       	inc	r13
    1956:	f1 2c       	mov	r15, r1
    1958:	13 c0       	rjmp	.+38     	; 0x1980 <sendLocoNetPacket+0x48>
    195a:	df 2d       	mov	r29, r15

    // wait previous traffic and than prio delay and than try tx
    ucWaitForEnterBackoff = 1;  // don't want to abort do/while loop before
    do                          // we did not see the backoff state once
    {
      enReturn = sendLocoNetPacketTry(punTxData, ucPrioDelay);
    195c:	6c 2f       	mov	r22, r28
    195e:	c8 01       	movw	r24, r16
    1960:	5f dd       	rcall	.-1346   	; 0x1420 <sendLocoNetPacketTry>

      if (enReturn == LN_DONE)  // success?
    1962:	83 30       	cpi	r24, 0x03	; 3
    1964:	d1 f0       	breq	.+52     	; 0x199a <sendLocoNetPacket+0x62>
        return LN_DONE;

      if (enReturn == LN_PRIO_BACKOFF)
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	c1 f3       	breq	.-16     	; 0x195a <sendLocoNetPacket+0x22>
        ucWaitForEnterBackoff = 0; // now entered backoff -> next state != LN_BACKOFF is worth incrementing the try counter
    }
    while ((enReturn == LN_CD_BACKOFF) ||                             // waiting CD backoff
           (enReturn == LN_PRIO_BACKOFF) ||                           // waiting master+prio backoff
           ((enReturn == LN_NETWORK_BUSY) && ucWaitForEnterBackoff)); // or within any traffic unfinished
    196a:	c0 f3       	brcs	.-16     	; 0x195c <sendLocoNetPacket+0x24>

      if (enReturn == LN_PRIO_BACKOFF)
        ucWaitForEnterBackoff = 0; // now entered backoff -> next state != LN_BACKOFF is worth incrementing the try counter
    }
    while ((enReturn == LN_CD_BACKOFF) ||                             // waiting CD backoff
           (enReturn == LN_PRIO_BACKOFF) ||                           // waiting master+prio backoff
    196c:	82 30       	cpi	r24, 0x02	; 2
    196e:	11 f4       	brne	.+4      	; 0x1974 <sendLocoNetPacket+0x3c>
           ((enReturn == LN_NETWORK_BUSY) && ucWaitForEnterBackoff)); // or within any traffic unfinished
    1970:	d1 11       	cpse	r29, r1
    1972:	f4 cf       	rjmp	.-24     	; 0x195c <sendLocoNetPacket+0x24>
    // failed -> next try going to higher prio = smaller prio delay
    if (ucPrioDelay > LN_BACKOFF_MIN)
    1974:	cb 31       	cpi	r28, 0x1B	; 27
    1976:	08 f0       	brcs	.+2      	; 0x197a <sendLocoNetPacket+0x42>
      ucPrioDelay--;
    1978:	c1 50       	subi	r28, 0x01	; 1
    197a:	ea 94       	dec	r14
  unsigned char ucTry;
  unsigned char ucPrioDelay = LN_BACKOFF_INITIAL;
  LN_STATUS enReturn;
  unsigned char ucWaitForEnterBackoff;

  for (ucTry = 0; ucTry < LN_TX_RETRIES_MAX; ucTry++)
    197c:	ee 20       	and	r14, r14
    197e:	11 f0       	breq	.+4      	; 0x1984 <sendLocoNetPacket+0x4c>

      if (enReturn == LN_DONE)  // success?
        return LN_DONE;

      if (enReturn == LN_PRIO_BACKOFF)
        ucWaitForEnterBackoff = 0; // now entered backoff -> next state != LN_BACKOFF is worth incrementing the try counter
    1980:	dd 2d       	mov	r29, r13
    1982:	ec cf       	rjmp	.-40     	; 0x195c <sendLocoNetPacket+0x24>
           ((enReturn == LN_NETWORK_BUSY) && ucWaitForEnterBackoff)); // or within any traffic unfinished
    // failed -> next try going to higher prio = smaller prio delay
    if (ucPrioDelay > LN_BACKOFF_MIN)
      ucPrioDelay--;
  }
  pstLnRxBuffer->Stats.TxError++ ;
    1984:	e0 91 a7 00 	lds	r30, 0x00A7	; 0x8000a7 <pstLnRxBuffer>
    1988:	f0 91 a8 00 	lds	r31, 0x00A8	; 0x8000a8 <pstLnRxBuffer+0x1>
    198c:	e6 57       	subi	r30, 0x76	; 118
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	80 81       	ld	r24, Z
    1992:	8f 5f       	subi	r24, 0xFF	; 255
    1994:	80 83       	st	Z, r24
  return LN_RETRY_ERROR;
    1996:	86 e0       	ldi	r24, 0x06	; 6
    1998:	01 c0       	rjmp	.+2      	; 0x199c <sendLocoNetPacket+0x64>
    do                          // we did not see the backoff state once
    {
      enReturn = sendLocoNetPacketTry(punTxData, ucPrioDelay);

      if (enReturn == LN_DONE)  // success?
        return LN_DONE;
    199a:	83 e0       	ldi	r24, 0x03	; 3
    if (ucPrioDelay > LN_BACKOFF_MIN)
      ucPrioDelay--;
  }
  pstLnRxBuffer->Stats.TxError++ ;
  return LN_RETRY_ERROR;
}
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	1f 91       	pop	r17
    19a2:	0f 91       	pop	r16
    19a4:	ff 90       	pop	r15
    19a6:	ef 90       	pop	r14
    19a8:	df 90       	pop	r13
    19aa:	08 95       	ret

000019ac <sendLocoNet4BytePacket>:


LN_STATUS sendLocoNet4BytePacket( byte OpCode, byte Data1, byte Data2 )
{
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	60 97       	sbiw	r28, 0x10	; 16
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	de bf       	out	0x3e, r29	; 62
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	cd bf       	out	0x3d, r28	; 61
  lnMsg SendPacket ;

  SendPacket.data[ 0 ] = OpCode ;
    19c0:	89 83       	std	Y+1, r24	; 0x01
  SendPacket.data[ 1 ] = Data1 ;
    19c2:	6a 83       	std	Y+2, r22	; 0x02
  SendPacket.data[ 2 ] = Data2 ;
    19c4:	4b 83       	std	Y+3, r20	; 0x03

  return sendLocoNetPacket( &SendPacket ) ;
    19c6:	ce 01       	movw	r24, r28
    19c8:	01 96       	adiw	r24, 0x01	; 1
    19ca:	b6 df       	rcall	.-148    	; 0x1938 <sendLocoNetPacket>
}
    19cc:	60 96       	adiw	r28, 0x10	; 16
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	cd bf       	out	0x3d, r28	; 61
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	08 95       	ret

000019de <__tablejump2__>:
    19de:	ee 0f       	add	r30, r30
    19e0:	ff 1f       	adc	r31, r31
    19e2:	05 90       	lpm	r0, Z+
    19e4:	f4 91       	lpm	r31, Z
    19e6:	e0 2d       	mov	r30, r0
    19e8:	09 94       	ijmp

000019ea <memcpy>:
    19ea:	fb 01       	movw	r30, r22
    19ec:	dc 01       	movw	r26, r24
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <memcpy+0xa>
    19f0:	01 90       	ld	r0, Z+
    19f2:	0d 92       	st	X+, r0
    19f4:	41 50       	subi	r20, 0x01	; 1
    19f6:	50 40       	sbci	r21, 0x00	; 0
    19f8:	d8 f7       	brcc	.-10     	; 0x19f0 <memcpy+0x6>
    19fa:	08 95       	ret

000019fc <eeprom_read_byte>:
    19fc:	e1 99       	sbic	0x1c, 1	; 28
    19fe:	fe cf       	rjmp	.-4      	; 0x19fc <eeprom_read_byte>
    1a00:	9f bb       	out	0x1f, r25	; 31
    1a02:	8e bb       	out	0x1e, r24	; 30
    1a04:	e0 9a       	sbi	0x1c, 0	; 28
    1a06:	99 27       	eor	r25, r25
    1a08:	8d b3       	in	r24, 0x1d	; 29
    1a0a:	08 95       	ret

00001a0c <eeprom_write_byte>:
    1a0c:	26 2f       	mov	r18, r22

00001a0e <eeprom_write_r18>:
    1a0e:	e1 99       	sbic	0x1c, 1	; 28
    1a10:	fe cf       	rjmp	.-4      	; 0x1a0e <eeprom_write_r18>
    1a12:	9f bb       	out	0x1f, r25	; 31
    1a14:	8e bb       	out	0x1e, r24	; 30
    1a16:	2d bb       	out	0x1d, r18	; 29
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	e2 9a       	sbi	0x1c, 2	; 28
    1a1e:	e1 9a       	sbi	0x1c, 1	; 28
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	01 96       	adiw	r24, 0x01	; 1
    1a24:	08 95       	ret

00001a26 <_exit>:
    1a26:	f8 94       	cli

00001a28 <__stop_program>:
    1a28:	ff cf       	rjmp	.-2      	; 0x1a28 <__stop_program>
