
ATMega16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000199e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  0000199e  00001a52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000105  0080008e  0080008e  00001a80  2**0
                  ALLOC
  3 .eeprom       0000000c  00810000  00810000  00001a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001a8c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001abc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000250  00000000  00000000  00001af8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000669a  00000000  00000000  00001d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000102e  00000000  00000000  000083e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000286b  00000000  00000000  00009410  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000056c  00000000  00000000  0000bc7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000939c  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001661  00000000  00000000  00015584  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001c8  00000000  00000000  00016be5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00003340  00000000  00000000  00016dad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ad c0       	rjmp	.+346    	; 0x15c <__ctors_end>
       2:	00 00       	nop
       4:	c7 c0       	rjmp	.+398    	; 0x194 <__bad_interrupt>
       6:	00 00       	nop
       8:	9a c1       	rjmp	.+820    	; 0x33e <__vector_2>
       a:	00 00       	nop
       c:	c3 c0       	rjmp	.+390    	; 0x194 <__bad_interrupt>
       e:	00 00       	nop
      10:	c1 c0       	rjmp	.+386    	; 0x194 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__vector_5>
      18:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__vector_6>
      1c:	bb c0       	rjmp	.+374    	; 0x194 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b9 c0       	rjmp	.+370    	; 0x194 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__vector_9>
      28:	b5 c0       	rjmp	.+362    	; 0x194 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b3 c0       	rjmp	.+358    	; 0x194 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b1 c0       	rjmp	.+354    	; 0x194 <__bad_interrupt>
      32:	00 00       	nop
      34:	af c0       	rjmp	.+350    	; 0x194 <__bad_interrupt>
      36:	00 00       	nop
      38:	ad c0       	rjmp	.+346    	; 0x194 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ab c0       	rjmp	.+342    	; 0x194 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a9 c0       	rjmp	.+338    	; 0x194 <__bad_interrupt>
      42:	00 00       	nop
      44:	a7 c0       	rjmp	.+334    	; 0x194 <__bad_interrupt>
      46:	00 00       	nop
      48:	a5 c0       	rjmp	.+330    	; 0x194 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a3 c0       	rjmp	.+326    	; 0x194 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a1 c0       	rjmp	.+322    	; 0x194 <__bad_interrupt>
      52:	00 00       	nop
      54:	d7 01       	movw	r26, r14
      56:	dd 01       	movw	r26, r26
      58:	02 02       	muls	r16, r18
      5a:	02 02       	muls	r16, r18
      5c:	02 02       	muls	r16, r18
      5e:	02 02       	muls	r16, r18
      60:	02 02       	muls	r16, r18
      62:	02 02       	muls	r16, r18
      64:	02 02       	muls	r16, r18
      66:	02 02       	muls	r16, r18
      68:	f6 01       	movw	r30, r12
      6a:	f6 01       	movw	r30, r12
      6c:	02 02       	muls	r16, r18
      6e:	02 02       	muls	r16, r18
      70:	02 02       	muls	r16, r18
      72:	02 02       	muls	r16, r18
      74:	02 02       	muls	r16, r18
      76:	02 02       	muls	r16, r18
      78:	02 02       	muls	r16, r18
      7a:	02 02       	muls	r16, r18
      7c:	f6 01       	movw	r30, r12
      7e:	02 02       	muls	r16, r18
      80:	f6 01       	movw	r30, r12
      82:	02 02       	muls	r16, r18
      84:	f6 01       	movw	r30, r12
      86:	02 02       	muls	r16, r18
      88:	02 02       	muls	r16, r18
      8a:	02 02       	muls	r16, r18
      8c:	02 02       	muls	r16, r18
      8e:	02 02       	muls	r16, r18
      90:	d7 01       	movw	r26, r14
      92:	02 02       	muls	r16, r18
      94:	d7 01       	movw	r26, r14
      96:	02 02       	muls	r16, r18
      98:	02 02       	muls	r16, r18
      9a:	02 02       	muls	r16, r18
      9c:	02 02       	muls	r16, r18
      9e:	02 02       	muls	r16, r18
      a0:	02 02       	muls	r16, r18
      a2:	02 02       	muls	r16, r18
      a4:	02 02       	muls	r16, r18
      a6:	02 02       	muls	r16, r18
      a8:	02 02       	muls	r16, r18
      aa:	02 02       	muls	r16, r18
      ac:	02 02       	muls	r16, r18
      ae:	02 02       	muls	r16, r18
      b0:	02 02       	muls	r16, r18
      b2:	02 02       	muls	r16, r18
      b4:	02 02       	muls	r16, r18
      b6:	02 02       	muls	r16, r18
      b8:	02 02       	muls	r16, r18
      ba:	02 02       	muls	r16, r18
      bc:	02 02       	muls	r16, r18
      be:	02 02       	muls	r16, r18
      c0:	02 02       	muls	r16, r18
      c2:	02 02       	muls	r16, r18
      c4:	02 02       	muls	r16, r18
      c6:	02 02       	muls	r16, r18
      c8:	02 02       	muls	r16, r18
      ca:	02 02       	muls	r16, r18
      cc:	02 02       	muls	r16, r18
      ce:	02 02       	muls	r16, r18
      d0:	02 02       	muls	r16, r18
      d2:	02 02       	muls	r16, r18
      d4:	02 02       	muls	r16, r18
      d6:	02 02       	muls	r16, r18
      d8:	02 02       	muls	r16, r18
      da:	02 02       	muls	r16, r18
      dc:	02 02       	muls	r16, r18
      de:	02 02       	muls	r16, r18
      e0:	02 02       	muls	r16, r18
      e2:	02 02       	muls	r16, r18
      e4:	02 02       	muls	r16, r18
      e6:	02 02       	muls	r16, r18
      e8:	02 02       	muls	r16, r18
      ea:	02 02       	muls	r16, r18
      ec:	02 02       	muls	r16, r18
      ee:	02 02       	muls	r16, r18
      f0:	02 02       	muls	r16, r18
      f2:	02 02       	muls	r16, r18
      f4:	02 02       	muls	r16, r18
      f6:	02 02       	muls	r16, r18
      f8:	02 02       	muls	r16, r18
      fa:	02 02       	muls	r16, r18
      fc:	02 02       	muls	r16, r18
      fe:	02 02       	muls	r16, r18
     100:	02 02       	muls	r16, r18
     102:	02 02       	muls	r16, r18
     104:	02 02       	muls	r16, r18
     106:	02 02       	muls	r16, r18
     108:	02 02       	muls	r16, r18
     10a:	02 02       	muls	r16, r18
     10c:	02 02       	muls	r16, r18
     10e:	02 02       	muls	r16, r18
     110:	02 02       	muls	r16, r18
     112:	02 02       	muls	r16, r18
     114:	02 02       	muls	r16, r18
     116:	02 02       	muls	r16, r18
     118:	02 02       	muls	r16, r18
     11a:	02 02       	muls	r16, r18
     11c:	fa 01       	movw	r30, r20
     11e:	fe 01       	movw	r30, r28
     120:	24 02       	muls	r18, r20
     122:	7a 02       	muls	r23, r26
     124:	7a 02       	muls	r23, r26
     126:	7a 02       	muls	r23, r26
     128:	7a 02       	muls	r23, r26
     12a:	7a 02       	muls	r23, r26
     12c:	7a 02       	muls	r23, r26
     12e:	7a 02       	muls	r23, r26
     130:	7a 02       	muls	r23, r26
     132:	33 02       	muls	r19, r19
     134:	33 02       	muls	r19, r19
     136:	7a 02       	muls	r23, r26
     138:	7a 02       	muls	r23, r26
     13a:	7a 02       	muls	r23, r26
     13c:	7a 02       	muls	r23, r26
     13e:	7a 02       	muls	r23, r26
     140:	7a 02       	muls	r23, r26
     142:	7a 02       	muls	r23, r26
     144:	7a 02       	muls	r23, r26
     146:	33 02       	muls	r19, r19
     148:	7a 02       	muls	r23, r26
     14a:	33 02       	muls	r19, r19
     14c:	7a 02       	muls	r23, r26
     14e:	33 02       	muls	r19, r19
     150:	7a 02       	muls	r23, r26
     152:	7a 02       	muls	r23, r26
     154:	7a 02       	muls	r23, r26
     156:	7a 02       	muls	r23, r26
     158:	7a 02       	muls	r23, r26
     15a:	4e 02       	muls	r20, r30

0000015c <__ctors_end>:
     15c:	11 24       	eor	r1, r1
     15e:	1f be       	out	0x3f, r1	; 63
     160:	cf e5       	ldi	r28, 0x5F	; 95
     162:	d4 e0       	ldi	r29, 0x04	; 4
     164:	de bf       	out	0x3e, r29	; 62
     166:	cd bf       	out	0x3d, r28	; 61

00000168 <__do_copy_data>:
     168:	10 e0       	ldi	r17, 0x00	; 0
     16a:	a0 e6       	ldi	r26, 0x60	; 96
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	ee e9       	ldi	r30, 0x9E	; 158
     170:	f9 e1       	ldi	r31, 0x19	; 25
     172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x10>
     174:	05 90       	lpm	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	ae 38       	cpi	r26, 0x8E	; 142
     17a:	b1 07       	cpc	r27, r17
     17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0xc>

0000017e <__do_clear_bss>:
     17e:	21 e0       	ldi	r18, 0x01	; 1
     180:	ae e8       	ldi	r26, 0x8E	; 142
     182:	b0 e0       	ldi	r27, 0x00	; 0
     184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
     186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
     188:	a3 39       	cpi	r26, 0x93	; 147
     18a:	b2 07       	cpc	r27, r18
     18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
     18e:	2e d6       	rcall	.+3164   	; 0xdec <main>
     190:	0c 94 cd 0c 	jmp	0x199a	; 0x199a <_exit>

00000194 <__bad_interrupt>:
     194:	35 cf       	rjmp	.-406    	; 0x0 <__vectors>

00000196 <IncrementTimerAction>:
			LED_PORT |=  _BV(LED_GREEN_R) ;
			LED_PORT |=  _BV(LED_GREEN_L) ;
		}
	}
	return bLEDReload;
}
     196:	83 9b       	sbis	0x10, 3	; 16
     198:	04 c0       	rjmp	.+8      	; 0x1a2 <IncrementTimerAction+0xc>
     19a:	85 b7       	in	r24, 0x35	; 53
     19c:	8b 7f       	andi	r24, 0xFB	; 251
     19e:	85 bf       	out	0x35, r24	; 53
     1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <IncrementTimerAction+0x12>
     1a2:	85 b7       	in	r24, 0x35	; 53
     1a4:	84 60       	ori	r24, 0x04	; 4
     1a6:	85 bf       	out	0x35, r24	; 53
     1a8:	8a b7       	in	r24, 0x3a	; 58
     1aa:	80 68       	ori	r24, 0x80	; 128
     1ac:	8a bf       	out	0x3a, r24	; 58
     1ae:	8b b7       	in	r24, 0x3b	; 59
     1b0:	80 68       	ori	r24, 0x80	; 128
     1b2:	8b bf       	out	0x3b, r24	; 59
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	08 95       	ret

000001b8 <ReleaseStopTimerAction>:
     1b8:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <bStopPressed>
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	08 95       	ret

000001c0 <KeyTimerAction>:
     1c0:	86 b3       	in	r24, 0x16	; 22
     1c2:	8f 73       	andi	r24, 0x3F	; 63
     1c4:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <bLastKey.2122>
     1c8:	89 17       	cp	r24, r25
     1ca:	99 f0       	breq	.+38     	; 0x1f2 <KeyTimerAction+0x32>
     1cc:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <bEvent>
     1d0:	91 60       	ori	r25, 0x01	; 1
     1d2:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <bEvent>
     1d6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <bLastKey.2122>
     1da:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <bCurrentKey>
     1de:	90 7c       	andi	r25, 0xC0	; 192
     1e0:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <bCurrentKey>
     1e4:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <bCurrentKey>
     1e8:	80 95       	com	r24
     1ea:	8f 73       	andi	r24, 0x3F	; 63
     1ec:	89 2b       	or	r24, r25
     1ee:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <bCurrentKey>
     1f2:	80 b3       	in	r24, 0x10	; 16
     1f4:	80 72       	andi	r24, 0x20	; 32
     1f6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <bLastEncSwitch.2120>
     1fa:	89 17       	cp	r24, r25
     1fc:	a1 f0       	breq	.+40     	; 0x226 <KeyTimerAction+0x66>
     1fe:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <bEvent>
     202:	91 60       	ori	r25, 0x01	; 1
     204:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <bEvent>
     208:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <bLastEncSwitch.2120>
     20c:	88 23       	and	r24, r24
     20e:	31 f0       	breq	.+12     	; 0x21c <KeyTimerAction+0x5c>
     210:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <bCurrentKey>
     214:	8f 7b       	andi	r24, 0xBF	; 191
     216:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <bCurrentKey>
     21a:	05 c0       	rjmp	.+10     	; 0x226 <KeyTimerAction+0x66>
     21c:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <bCurrentKey>
     220:	80 64       	ori	r24, 0x40	; 64
     222:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <bCurrentKey>
     226:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <bFrediVersion>
     22a:	9e ef       	ldi	r25, 0xFE	; 254
     22c:	98 0f       	add	r25, r24
     22e:	92 30       	cpi	r25, 0x02	; 2
     230:	d0 f4       	brcc	.+52     	; 0x266 <KeyTimerAction+0xa6>
     232:	93 b3       	in	r25, 0x13	; 19
     234:	92 70       	andi	r25, 0x02	; 2
     236:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <bLastDirSwitch.2124>
     23a:	92 17       	cp	r25, r18
     23c:	a1 f0       	breq	.+40     	; 0x266 <KeyTimerAction+0xa6>
     23e:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <bEvent>
     242:	21 60       	ori	r18, 0x01	; 1
     244:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <bEvent>
     248:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <bLastDirSwitch.2124>
     24c:	99 23       	and	r25, r25
     24e:	31 f0       	breq	.+12     	; 0x25c <KeyTimerAction+0x9c>
     250:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <bCurrentKey>
     254:	9f 77       	andi	r25, 0x7F	; 127
     256:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <bCurrentKey>
     25a:	05 c0       	rjmp	.+10     	; 0x266 <KeyTimerAction+0xa6>
     25c:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <bCurrentKey>
     260:	90 68       	ori	r25, 0x80	; 128
     262:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <bCurrentKey>
     266:	83 30       	cpi	r24, 0x03	; 3
     268:	09 f4       	brne	.+2      	; 0x26c <KeyTimerAction+0xac>
     26a:	d1 d6       	rcall	.+3490   	; 0x100e <potAdcTimerAction>
     26c:	8a e0       	ldi	r24, 0x0A	; 10
     26e:	08 95       	ret

00000270 <GET_SPDCNT_BY_SLOTSPD>:
     270:	21 e2       	ldi	r18, 0x21	; 33
     272:	20 93 95 00 	sts	0x0095, r18	; 0x800095 <bSpdCnt>
     276:	fc 01       	movw	r30, r24
     278:	25 81       	ldd	r18, Z+5	; 0x05
     27a:	e8 e6       	ldi	r30, 0x68	; 104
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	91 91       	ld	r25, Z+
     282:	29 17       	cp	r18, r25
     284:	28 f0       	brcs	.+10     	; 0x290 <GET_SPDCNT_BY_SLOTSPD+0x20>
     286:	90 81       	ld	r25, Z
     288:	29 17       	cp	r18, r25
     28a:	10 f4       	brcc	.+4      	; 0x290 <GET_SPDCNT_BY_SLOTSPD+0x20>
     28c:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <bSpdCnt>
     290:	8f 5f       	subi	r24, 0xFF	; 255
     292:	81 32       	cpi	r24, 0x21	; 33
     294:	a9 f7       	brne	.-22     	; 0x280 <GET_SPDCNT_BY_SLOTSPD+0x10>
     296:	08 95       	ret

00000298 <initKeys>:
 * ARGUMENTS   : none
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void initKeys( void )
{
     298:	0f 93       	push	r16
  /***************************************/
  //  init encoder or poti
  /***************************************/

  if (bFrediVersion == FREDI_VERSION_ANALOG)
     29a:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <bFrediVersion>
     29e:	83 30       	cpi	r24, 0x03	; 3
  {
    potAdcInit();
     2a0:	11 f4       	brne	.+4      	; 0x2a6 <initKeys+0xe>
  }
  else // FREDI_VERSION_INCREMENT or FREDI_VERSION_INCREMENT_SWITCH
  {
    potAdcPowerOff();
     2a2:	aa d6       	rcall	.+3412   	; 0xff8 <potAdcInit>
     2a4:	2f c0       	rjmp	.+94     	; 0x304 <initKeys+0x6c>
		bStopPressed = FALSE;
     2a6:	a6 d6       	rcall	.+3404   	; 0xff4 <potAdcPowerOff>
     2a8:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <bStopPressed>
		addTimerAction(&ReleaseStopTimer, 0, ReleaseStopTimerAction, 0, TIMER_SLOW ) ;
     2ac:	00 e0       	ldi	r16, 0x00	; 0
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	4c ed       	ldi	r20, 0xDC	; 220
     2b4:	50 e0       	ldi	r21, 0x00	; 0
     2b6:	60 e0       	ldi	r22, 0x00	; 0
     2b8:	82 e6       	ldi	r24, 0x62	; 98
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	0e 94 a8 0a 	call	0x1550	; 0x1550 <addTimerAction>
    // set data direction register for encoder
    ENC_DDR &= ~( _BV(ENC_BIT_0) | _BV(ENC_BIT_1) ) ;
     2c0:	81 b3       	in	r24, 0x11	; 17
     2c2:	83 7f       	andi	r24, 0xF3	; 243

    // Enable the pull-ups
    ENC_PORT |= ( _BV(ENC_BIT_0) | _BV(ENC_BIT_1) ) ;
     2c4:	81 bb       	out	0x11, r24	; 17
     2c6:	82 b3       	in	r24, 0x12	; 18
     2c8:	8c 60       	ori	r24, 0x0C	; 12

    addTimerAction(&IncrementTimer, 0, IncrementTimerAction, 0, TIMER_FAST) ;
     2ca:	82 bb       	out	0x12, r24	; 18
     2cc:	01 e0       	ldi	r16, 0x01	; 1
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	4b ec       	ldi	r20, 0xCB	; 203
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	81 eb       	ldi	r24, 0xB1	; 177
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 a8 0a 	call	0x1550	; 0x1550 <addTimerAction>

    // detect actual state of pin to set next interrupt edge
    ENC_ISC_REG |= _BV(ENC_ISC_BIT1);
     2e0:	85 b7       	in	r24, 0x35	; 53
     2e2:	88 60       	ori	r24, 0x08	; 8

    if (bit_is_set(ENC_PIN, ENC_BIT_1))
     2e4:	85 bf       	out	0x35, r24	; 53
     2e6:	83 9b       	sbis	0x10, 3	; 16
    { // set falling edge
      ENC_ISC_REG &= ~_BV(ENC_ISC_BIT0);
     2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <initKeys+0x5a>
     2ea:	85 b7       	in	r24, 0x35	; 53
     2ec:	8b 7f       	andi	r24, 0xFB	; 251
     2ee:	85 bf       	out	0x35, r24	; 53
    }
    else
    { // set rising edge
      ENC_ISC_REG |= _BV(ENC_ISC_BIT0);
     2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <initKeys+0x60>
     2f2:	85 b7       	in	r24, 0x35	; 53
     2f4:	84 60       	ori	r24, 0x04	; 4
    }

    // clear pending interrupt
    ENC_EIRF_REG |= _BV(ENC_EIRF_BIT);
     2f6:	85 bf       	out	0x35, r24	; 53
     2f8:	8a b7       	in	r24, 0x3a	; 58
     2fa:	80 68       	ori	r24, 0x80	; 128
    // set interrupt activ
    ENC_EIRE_REG |= _BV(ENC_EIRE_BIT);
     2fc:	8a bf       	out	0x3a, r24	; 58
     2fe:	8b b7       	in	r24, 0x3b	; 59
     300:	80 68       	ori	r24, 0x80	; 128
  /***************************************/
  //  init keys
  /***************************************/

  // set data direction register for encoder
  ENC_DDR &= ~( _BV(ENC_SWITCH) ) ;
     302:	8b bf       	out	0x3b, r24	; 59

  // Enable the pull-ups
  ENC_PORT |= ( _BV(ENC_SWITCH) ) ;
     304:	8d 98       	cbi	0x11, 5	; 17

  // set data direction register for encoder
  ENC_DDR &= ~( _BV(ENC_SWITCH) ) ;
     306:	95 9a       	sbi	0x12, 5	; 18

  // Enable the pull-ups
  ENC_PORT |= ( _BV(ENC_SWITCH) ) ;
     308:	8d 98       	cbi	0x11, 5	; 17

  // set data direction register for keys
  KEYPIN_DDR  &= ~KEYPIN_ALL ;
     30a:	95 9a       	sbi	0x12, 5	; 18
     30c:	87 b3       	in	r24, 0x17	; 23
     30e:	80 7c       	andi	r24, 0xC0	; 192
  // Enable the pull-ups
  KEYPIN_PORT |=  KEYPIN_ALL ;
     310:	87 bb       	out	0x17, r24	; 23
     312:	88 b3       	in	r24, 0x18	; 24
     314:	8f 63       	ori	r24, 0x3F	; 63

  if (  (bFrediVersion == FREDI_VERSION_INCREMENT_SWITCH)
     316:	88 bb       	out	0x18, r24	; 24
     318:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <bFrediVersion>
     31c:	82 50       	subi	r24, 0x02	; 2
     31e:	82 30       	cpi	r24, 0x02	; 2
        || (bFrediVersion == FREDI_VERSION_ANALOG          ))
  {
    // set data direction register for direction switch
    DIRSWITCH_DDR   &= ~( _BV(DIRSWITCH) );
     320:	10 f4       	brcc	.+4      	; 0x326 <initKeys+0x8e>
    // Enable the pull-up
    DIRSWITCH_PORT  |=  ( _BV(DIRSWITCH) );
     322:	a1 98       	cbi	0x14, 1	; 20
  }

  addTimerAction(&KeyTimer, KEY_POLL_TIME, KeyTimerAction, 0, TIMER_FAST ) ;
     324:	a9 9a       	sbi	0x15, 1	; 21
     326:	01 e0       	ldi	r16, 0x01	; 1
     328:	20 e0       	ldi	r18, 0x00	; 0
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	40 ee       	ldi	r20, 0xE0	; 224
     32e:	50 e0       	ldi	r21, 0x00	; 0
     330:	6a e0       	ldi	r22, 0x0A	; 10
     332:	8f eb       	ldi	r24, 0xBF	; 191
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 a8 0a 	call	0x1550	; 0x1550 <addTimerAction>

  LED_DDR  |=  _BV(LED_RED); 
  LED_PORT |= _BV(LED_RED);       // set red LED at startup
*/
 // addTimerAction(&LEDTimer, LED_BLINK_TIME, LEDTimerAction, 0, TIMER_SLOW ) ;
}
     33a:	0f 91       	pop	r16
     33c:	08 95       	ret

0000033e <__vector_2>:
 * ARGUMENTS   : none
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
ISR(ENC_INT_vect)
{
     33e:	1f 92       	push	r1
     340:	0f 92       	push	r0
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	0f 92       	push	r0
     346:	11 24       	eor	r1, r1
     348:	8f 93       	push	r24
  // set interrupt inactiv while debouncing is active
  ENC_EIRE_REG &= ~_BV(ENC_EIRE_BIT);
     34a:	8b b7       	in	r24, 0x3b	; 59
     34c:	8f 77       	andi	r24, 0x7F	; 127
     34e:	8b bf       	out	0x3b, r24	; 59

  if ( bit_is_set(ENC_ISC_REG, ENC_ISC_BIT0))
     350:	05 b6       	in	r0, 0x35	; 53
     352:	02 fe       	sbrs	r0, 2
     354:	0e c0       	rjmp	.+28     	; 0x372 <__vector_2+0x34>
  { // falling edge
    if ( bit_is_set(ENC_PIN, ENC_BIT_0))
     356:	82 9b       	sbis	0x10, 2	; 16
     358:	06 c0       	rjmp	.+12     	; 0x366 <__vector_2+0x28>
    { //++
      sEncDir--;
     35a:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <sEncDir>
     35e:	81 50       	subi	r24, 0x01	; 1
     360:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <sEncDir>
     364:	13 c0       	rjmp	.+38     	; 0x38c <__vector_2+0x4e>
    }
    else
    { //--
      sEncDir++;
     366:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <sEncDir>
     36a:	8f 5f       	subi	r24, 0xFF	; 255
     36c:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <sEncDir>
     370:	0d c0       	rjmp	.+26     	; 0x38c <__vector_2+0x4e>
    }
  }
  else
  { // rising edge
    if ( bit_is_set(ENC_PIN, ENC_BIT_0))
     372:	82 9b       	sbis	0x10, 2	; 16
     374:	06 c0       	rjmp	.+12     	; 0x382 <__vector_2+0x44>
    { //--
      sEncDir++;
     376:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <sEncDir>
     37a:	8f 5f       	subi	r24, 0xFF	; 255
     37c:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <sEncDir>
     380:	05 c0       	rjmp	.+10     	; 0x38c <__vector_2+0x4e>
    }
    else
    { //++
      sEncDir--;
     382:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <sEncDir>
     386:	81 50       	subi	r24, 0x01	; 1
     388:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <sEncDir>
    }
  }
}
     38c:	8f 91       	pop	r24
     38e:	0f 90       	pop	r0
     390:	0f be       	out	0x3f, r0	; 63
     392:	0f 90       	pop	r0
     394:	1f 90       	pop	r1
     396:	18 95       	reti

00000398 <vSetState>:
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void vSetState( byte bState, rwSlotDataMsg *currentSlot)
{
	bThrState = bState;
     398:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <bThrState>

	switch (bThrState)
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	86 36       	cpi	r24, 0x66	; 102
     3a0:	91 05       	cpc	r25, r1
     3a2:	80 f5       	brcc	.+96     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3a4:	fc 01       	movw	r30, r24
     3a6:	e6 5d       	subi	r30, 0xD6	; 214
     3a8:	ff 4f       	sbci	r31, 0xFF	; 255
     3aa:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <__tablejump2__>
	{
		case THR_STATE_UNCONNECTED:       // show red LED
		case THR_STATE_INIT:
		case THR_STATE_UNCONNECTED_WRITE:
		LED_PORT &= ~_BV(LED_GREEN_R);
     3ae:	aa 98       	cbi	0x15, 2	; 21
		LED_PORT &= ~_BV(LED_GREEN_L);
     3b0:	ab 98       	cbi	0x15, 3	; 21
		LED_PORT |=  _BV(LED_RED);
     3b2:	ac 9a       	sbi	0x15, 4	; 21
		bLEDReload = LED_ON;
     3b4:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <bLEDReload>
		break;
     3b8:	28 c0       	rjmp	.+80     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>

		case THR_STATE_CONNECTED:         // show direction at state connected
		if (currentSlot->dirf & 0x20)
     3ba:	fb 01       	movw	r30, r22
     3bc:	86 81       	ldd	r24, Z+6	; 0x06
     3be:	85 ff       	sbrs	r24, 5
     3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <vSetState+0x30>
		{
			LED_PORT &= ~_BV(LED_GREEN_R);
     3c2:	aa 98       	cbi	0x15, 2	; 21
			LED_PORT |=  _BV(LED_GREEN_L);
     3c4:	ab 9a       	sbi	0x15, 3	; 21
     3c6:	02 c0       	rjmp	.+4      	; 0x3cc <vSetState+0x34>
		}
		else
		{
			LED_PORT &= ~_BV(LED_GREEN_L);
     3c8:	ab 98       	cbi	0x15, 3	; 21
			LED_PORT |=  _BV(LED_GREEN_R);
     3ca:	aa 9a       	sbi	0x15, 2	; 21
		}
		LED_PORT &= ~_BV(LED_RED);
     3cc:	ac 98       	cbi	0x15, 4	; 21

		if (  (bFrediVersion == FREDI_VERSION_ANALOG)
     3ce:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <bFrediVersion>
     3d2:	83 30       	cpi	r24, 0x03	; 3
     3d4:	41 f4       	brne	.+16     	; 0x3e6 <vSetState+0x4e>
		&& (!fSetSpeed))                 // if analog value does not correspond, show blinking
     3d6:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <fSetSpeed>
     3da:	81 11       	cpse	r24, r1
     3dc:	04 c0       	rjmp	.+8      	; 0x3e6 <vSetState+0x4e>
		{
			bLEDReload = LED_BLINK_TIME;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <bLEDReload>
     3e4:	12 c0       	rjmp	.+36     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		}
		else
		{
			bLEDReload = LED_ON;
     3e6:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <bLEDReload>
     3ea:	0f c0       	rjmp	.+30     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		case THR_STATE_ACQUIRE_LOCO_GET:
		case THR_STATE_ACQUIRE_LOCO_WRITE:
		case THR_STATE_RECONNECT_GET_SLOT:
		case THR_STATE_RECONNECT_NULL_MOVE:
		case THR_STATE_RECONNECT_WRITE:
		bLEDReload = LED_BLINK_TIME;
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <bLEDReload>
		break;
     3f2:	0b c0       	rjmp	.+22     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		case THR_STATE_SELFTEST:
		bLEDReload = LED_SELFTEST_TIME;
     3f4:	84 e0       	ldi	r24, 0x04	; 4
     3f6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <bLEDReload>
		break;
     3fa:	07 c0       	rjmp	.+14     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		case THR_STATE_SELFTEST_DONE:
		bLEDReload = LED_SELFTEST_DONE_TIME;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <bLEDReload>
		break;
     402:	03 c0       	rjmp	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		default:                                 // not allowed state, show by slow blinking
		bLEDReload = (LED_BLINK_TIME*10);
     404:	8a e0       	ldi	r24, 0x0A	; 10
     406:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <bLEDReload>
		break;
	}

	resetTimerAction(&LEDTimer, bLEDReload);
     40a:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <bLEDReload>
     40e:	88 eb       	ldi	r24, 0xB8	; 184
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <resetTimerAction>
     416:	08 95       	ret

00000418 <MessageTimerAction>:
 *******************************************************************************
 * ARGUMENTS   : void *UserPointer
 * RETURN VALUE: byte
 *******************************************************FunctionHeaderEnd******/
byte MessageTimerAction( void *UserPointer)
{
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
     420:	60 97       	sbiw	r28, 0x10	; 16
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	f8 94       	cli
     426:	de bf       	out	0x3e, r29	; 62
     428:	0f be       	out	0x3f, r0	; 63
     42a:	cd bf       	out	0x3d, r28	; 61
	byte bRetVal = MESSAGE_TIME;

	switch (bThrState)
     42c:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <bThrState>
     430:	8e 2f       	mov	r24, r30
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	fc 01       	movw	r30, r24
     436:	31 97       	sbiw	r30, 0x01	; 1
     438:	ee 31       	cpi	r30, 0x1E	; 30
     43a:	f1 05       	cpc	r31, r1
     43c:	08 f0       	brcs	.+2      	; 0x440 <MessageTimerAction+0x28>
     43e:	5a c0       	rjmp	.+180    	; 0x4f4 <__stack+0x95>
     440:	e0 57       	subi	r30, 0x70	; 112
     442:	ff 4f       	sbci	r31, 0xFF	; 255
     444:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <__tablejump2__>
	{
		case THR_STATE_CONNECTED:
		sendLocoNet4BytePacket(OPC_LOCO_SPD,slotArray[slotnumber].slot,slotArray[slotnumber].spd);
     448:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <slotnumber>
     44c:	8e e0       	ldi	r24, 0x0E	; 14
     44e:	e8 02       	muls	r30, r24
     450:	f0 01       	movw	r30, r0
     452:	11 24       	eor	r1, r1
     454:	e7 58       	subi	r30, 0x87	; 135
     456:	fe 4f       	sbci	r31, 0xFE	; 254
     458:	45 81       	ldd	r20, Z+5	; 0x05
     45a:	62 81       	ldd	r22, Z+2	; 0x02
     45c:	80 ea       	ldi	r24, 0xA0	; 160
     45e:	0e 94 90 0c 	call	0x1920	; 0x1920 <sendLocoNet4BytePacket>
		bRetVal = SPEED_TIME;
     462:	8a ef       	ldi	r24, 0xFA	; 250
		break;
     464:	4a c0       	rjmp	.+148    	; 0x4fa <__stack+0x9b>
		case THR_STATE_ACQUIRE_LOCO_GET:
		case THR_STATE_ACQUIRE_LOCO_WRITE:
		case THR_STATE_RECONNECT_GET_SLOT:
		case THR_STATE_RECONNECT_WRITE:
		case THR_STATE_RECONNECT_NULL_MOVE:
		vSetState(THR_STATE_RECONNECT_GET_SLOT, &slotArray[slotnumber]);
     466:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <slotnumber>
     46a:	8e e0       	ldi	r24, 0x0E	; 14
     46c:	68 02       	muls	r22, r24
     46e:	b0 01       	movw	r22, r0
     470:	11 24       	eor	r1, r1
     472:	67 58       	subi	r22, 0x87	; 135
     474:	7e 4f       	sbci	r23, 0xFE	; 254
     476:	84 e1       	ldi	r24, 0x14	; 20
     478:	8f df       	rcall	.-226    	; 0x398 <vSetState>
		if (sendLocoNet4BytePacket(OPC_LOCO_ADR, slotArray[slotnumber].adr2, slotArray[slotnumber].adr) != LN_DONE)
     47a:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <slotnumber>
     47e:	8e e0       	ldi	r24, 0x0E	; 14
     480:	e8 02       	muls	r30, r24
     482:	f0 01       	movw	r30, r0
     484:	11 24       	eor	r1, r1
     486:	e7 58       	subi	r30, 0x87	; 135
     488:	fe 4f       	sbci	r31, 0xFE	; 254
     48a:	44 81       	ldd	r20, Z+4	; 0x04
     48c:	61 85       	ldd	r22, Z+9	; 0x09
     48e:	8f eb       	ldi	r24, 0xBF	; 191
     490:	0e 94 90 0c 	call	0x1920	; 0x1920 <sendLocoNet4BytePacket>
     494:	83 30       	cpi	r24, 0x03	; 3
     496:	81 f5       	brne	.+96     	; 0x4f8 <__stack+0x99>
		{
			bRetVal = MESSAGE_TIME;
		}
		else
		{
			bRetVal = RESPONSE_TIME;
     498:	84 e1       	ldi	r24, 0x14	; 20
     49a:	2f c0       	rjmp	.+94     	; 0x4fa <__stack+0x9b>
		break;
		case THR_STATE_UNCONNECTED_WRITE:
		{
			lnMsg SendPacket ;

			SendPacket.sd.command   = OPC_WR_SL_DATA  ; //opcode
     49c:	8f ee       	ldi	r24, 0xEF	; 239
     49e:	89 83       	std	Y+1, r24	; 0x01
			SendPacket.sd.mesg_size = 14              ; // length
     4a0:	8e e0       	ldi	r24, 0x0E	; 14
     4a2:	8a 83       	std	Y+2, r24	; 0x02
			SendPacket.sd.slot      = slotArray[slotnumber].slot      ; // slot    2
     4a4:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <slotnumber>
     4a8:	8e e0       	ldi	r24, 0x0E	; 14
     4aa:	e8 02       	muls	r30, r24
     4ac:	f0 01       	movw	r30, r0
     4ae:	11 24       	eor	r1, r1
     4b0:	e7 58       	subi	r30, 0x87	; 135
     4b2:	fe 4f       	sbci	r31, 0xFE	; 254
     4b4:	82 81       	ldd	r24, Z+2	; 0x02
     4b6:	8b 83       	std	Y+3, r24	; 0x03
			SendPacket.sd.stat      = slotArray[slotnumber].stat      ; // stat    3
     4b8:	83 81       	ldd	r24, Z+3	; 0x03
     4ba:	8c 83       	std	Y+4, r24	; 0x04
			SendPacket.sd.adr       = slotArray[slotnumber].adr       ; // adr     4
     4bc:	84 81       	ldd	r24, Z+4	; 0x04
     4be:	8d 83       	std	Y+5, r24	; 0x05
			SendPacket.sd.spd       = slotArray[slotnumber].spd       ; // spd     5
     4c0:	85 81       	ldd	r24, Z+5	; 0x05
     4c2:	8e 83       	std	Y+6, r24	; 0x06
			SendPacket.sd.dirf      = slotArray[slotnumber].dirf      ; // dirf    6
     4c4:	86 81       	ldd	r24, Z+6	; 0x06
     4c6:	8f 83       	std	Y+7, r24	; 0x07
			SendPacket.sd.trk       = slotArray[slotnumber].trk       ; // trk     7
     4c8:	87 81       	ldd	r24, Z+7	; 0x07
     4ca:	88 87       	std	Y+8, r24	; 0x08
			SendPacket.sd.ss2       = slotArray[slotnumber].ss2       ; // ss2     8
     4cc:	80 85       	ldd	r24, Z+8	; 0x08
     4ce:	89 87       	std	Y+9, r24	; 0x09
			SendPacket.sd.adr2      = slotArray[slotnumber].adr2      ; // adr2    9
     4d0:	81 85       	ldd	r24, Z+9	; 0x09
     4d2:	8a 87       	std	Y+10, r24	; 0x0a
			SendPacket.sd.snd       = slotArray[slotnumber].snd       ; // snd    10
     4d4:	82 85       	ldd	r24, Z+10	; 0x0a
     4d6:	8b 87       	std	Y+11, r24	; 0x0b
			SendPacket.sd.id1       = slotArray[slotnumber].id1       ; // id1    11
     4d8:	83 85       	ldd	r24, Z+11	; 0x0b
     4da:	8c 87       	std	Y+12, r24	; 0x0c
			SendPacket.sd.id2       = slotArray[slotnumber].id2       ; // id2    12
     4dc:	84 85       	ldd	r24, Z+12	; 0x0c
     4de:	8d 87       	std	Y+13, r24	; 0x0d

			LN_STATUS status = sendLocoNetPacket( &SendPacket );
     4e0:	ce 01       	movw	r24, r28
     4e2:	01 96       	adiw	r24, 0x01	; 1
     4e4:	0e 94 56 0c 	call	0x18ac	; 0x18ac <sendLocoNetPacket>

			if (status != LN_DONE)
     4e8:	83 30       	cpi	r24, 0x03	; 3
     4ea:	11 f4       	brne	.+4      	; 0x4f0 <__stack+0x91>
			{
				bRetVal = MESSAGE_TIME;
			}
			else
			{
				bRetVal = RESPONSE_TIME;
     4ec:	84 e1       	ldi	r24, 0x14	; 20
     4ee:	05 c0       	rjmp	.+10     	; 0x4fa <__stack+0x9b>

			LN_STATUS status = sendLocoNetPacket( &SendPacket );

			if (status != LN_DONE)
			{
				bRetVal = MESSAGE_TIME;
     4f0:	83 e0       	ldi	r24, 0x03	; 3
			else
			{
				bRetVal = RESPONSE_TIME;
			}
		}
		break;
     4f2:	03 c0       	rjmp	.+6      	; 0x4fa <__stack+0x9b>
		case THR_STATE_INIT:          // stop timer, there is nothing to do
		case THR_STATE_UNCONNECTED:
		default:
		bRetVal = 0;
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	01 c0       	rjmp	.+2      	; 0x4fa <__stack+0x9b>
		case THR_STATE_RECONNECT_WRITE:
		case THR_STATE_RECONNECT_NULL_MOVE:
		vSetState(THR_STATE_RECONNECT_GET_SLOT, &slotArray[slotnumber]);
		if (sendLocoNet4BytePacket(OPC_LOCO_ADR, slotArray[slotnumber].adr2, slotArray[slotnumber].adr) != LN_DONE)
		{
			bRetVal = MESSAGE_TIME;
     4f8:	83 e0       	ldi	r24, 0x03	; 3
		bRetVal = 0;
		break;
	}

	return bRetVal;
}
     4fa:	60 96       	adiw	r28, 0x10	; 16
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	f8 94       	cli
     500:	de bf       	out	0x3e, r29	; 62
     502:	0f be       	out	0x3f, r0	; 63
     504:	cd bf       	out	0x3d, r28	; 61
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	08 95       	ret

0000050c <sendLocoNetSpd>:
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void sendLocoNetSpd(rwSlotDataMsg *currentSlot)
{
  sendLocoNet4BytePacket(OPC_LOCO_SPD,currentSlot->slot,currentSlot->spd);
     50c:	fc 01       	movw	r30, r24
     50e:	45 81       	ldd	r20, Z+5	; 0x05
     510:	62 81       	ldd	r22, Z+2	; 0x02
     512:	80 ea       	ldi	r24, 0xA0	; 160
     514:	0e 94 90 0c 	call	0x1920	; 0x1920 <sendLocoNet4BytePacket>
  resetTimerAction(&MessageTimer, SPEED_TIME);
     518:	6a ef       	ldi	r22, 0xFA	; 250
     51a:	8a ea       	ldi	r24, 0xAA	; 170
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <resetTimerAction>
     522:	08 95       	ret

00000524 <sendLocoNetDirf>:
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void sendLocoNetDirf(rwSlotDataMsg *currentSlot)
{
  sendLocoNet4BytePacket(OPC_LOCO_DIRF,currentSlot->slot,currentSlot->dirf);
     524:	fc 01       	movw	r30, r24
     526:	46 81       	ldd	r20, Z+6	; 0x06
     528:	62 81       	ldd	r22, Z+2	; 0x02
     52a:	81 ea       	ldi	r24, 0xA1	; 161
     52c:	0c 94 90 0c 	jmp	0x1920	; 0x1920 <sendLocoNet4BytePacket>
     530:	08 95       	ret

00000532 <sendLocoNetSnd>:
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void sendLocoNetSnd(rwSlotDataMsg *currentSlot)
{
  sendLocoNet4BytePacket(OPC_LOCO_SND,currentSlot->slot,currentSlot->snd);
     532:	fc 01       	movw	r30, r24
     534:	42 85       	ldd	r20, Z+10	; 0x0a
     536:	62 81       	ldd	r22, Z+2	; 0x02
     538:	82 ea       	ldi	r24, 0xA2	; 162
     53a:	0c 94 90 0c 	jmp	0x1920	; 0x1920 <sendLocoNet4BytePacket>
     53e:	08 95       	ret

00000540 <sendLocoNetWriteSlotData>:
 * ARGUMENTS   : none
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void sendLocoNetWriteSlotData(rwSlotDataMsg *currentSlot)
{
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	cd b7       	in	r28, 0x3d	; 61
     54a:	de b7       	in	r29, 0x3e	; 62
     54c:	60 97       	sbiw	r28, 0x10	; 16
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	de bf       	out	0x3e, r29	; 62
     554:	0f be       	out	0x3f, r0	; 63
     556:	cd bf       	out	0x3d, r28	; 61
     558:	8c 01       	movw	r16, r24
  lnMsg SendPacket ;

  SendPacket.sd.command   = OPC_WR_SL_DATA  ; //opcode
     55a:	8f ee       	ldi	r24, 0xEF	; 239
     55c:	89 83       	std	Y+1, r24	; 0x01
  SendPacket.sd.mesg_size = 14              ; // length
     55e:	8e e0       	ldi	r24, 0x0E	; 14
     560:	8a 83       	std	Y+2, r24	; 0x02
  SendPacket.sd.slot      = currentSlot->slot   ; // slot    2    
     562:	f8 01       	movw	r30, r16
     564:	82 81       	ldd	r24, Z+2	; 0x02
     566:	8b 83       	std	Y+3, r24	; 0x03
  SendPacket.sd.stat      = currentSlot->stat   ; // stat    3    
     568:	83 81       	ldd	r24, Z+3	; 0x03
     56a:	8c 83       	std	Y+4, r24	; 0x04
  SendPacket.sd.adr       = currentSlot->adr    ; // adr     4    
     56c:	84 81       	ldd	r24, Z+4	; 0x04
     56e:	8d 83       	std	Y+5, r24	; 0x05
  SendPacket.sd.spd       = currentSlot->spd    ; // spd     5    
     570:	85 81       	ldd	r24, Z+5	; 0x05
     572:	8e 83       	std	Y+6, r24	; 0x06
  SendPacket.sd.dirf      = currentSlot->dirf   ; // dirf    6    
     574:	86 81       	ldd	r24, Z+6	; 0x06
     576:	8f 83       	std	Y+7, r24	; 0x07
  SendPacket.sd.trk       = currentSlot->trk    ; // trk     7    
     578:	87 81       	ldd	r24, Z+7	; 0x07
     57a:	88 87       	std	Y+8, r24	; 0x08
  SendPacket.sd.ss2       = currentSlot->ss2    ; // ss2     8    
     57c:	80 85       	ldd	r24, Z+8	; 0x08
     57e:	89 87       	std	Y+9, r24	; 0x09
  SendPacket.sd.adr2      = currentSlot->adr2   ; // adr2    9    
     580:	81 85       	ldd	r24, Z+9	; 0x09
     582:	8a 87       	std	Y+10, r24	; 0x0a
  SendPacket.sd.snd       = currentSlot->snd    ; // snd    10    
     584:	82 85       	ldd	r24, Z+10	; 0x0a
     586:	8b 87       	std	Y+11, r24	; 0x0b
  SendPacket.sd.id1       = currentSlot->id1    ; // id1    11   
     588:	83 85       	ldd	r24, Z+11	; 0x0b
     58a:	8c 87       	std	Y+12, r24	; 0x0c
  SendPacket.sd.id2       = currentSlot->id2    ; // id2    12   
     58c:	84 85       	ldd	r24, Z+12	; 0x0c
     58e:	8d 87       	std	Y+13, r24	; 0x0d

  if (sendLocoNetPacket( &SendPacket ) != LN_DONE)
     590:	ce 01       	movw	r24, r28
     592:	01 96       	adiw	r24, 0x01	; 1
     594:	0e 94 56 0c 	call	0x18ac	; 0x18ac <sendLocoNetPacket>
     598:	83 30       	cpi	r24, 0x03	; 3
     59a:	a1 f0       	breq	.+40     	; 0x5c4 <sendLocoNetWriteSlotData+0x84>
  { // send message failed, so set new state
    resetTimerAction(&MessageTimer, MESSAGE_TIME);
     59c:	63 e0       	ldi	r22, 0x03	; 3
     59e:	8a ea       	ldi	r24, 0xAA	; 170
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	f9 d7       	rcall	.+4082   	; 0x1596 <resetTimerAction>

    switch (bThrState)
     5a4:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <bThrState>
     5a8:	88 31       	cpi	r24, 0x18	; 24
     5aa:	21 f0       	breq	.+8      	; 0x5b4 <sendLocoNetWriteSlotData+0x74>
     5ac:	8e 31       	cpi	r24, 0x1E	; 30
     5ae:	31 f0       	breq	.+12     	; 0x5bc <sendLocoNetWriteSlotData+0x7c>
     5b0:	8b 30       	cpi	r24, 0x0B	; 11
     5b2:	61 f4       	brne	.+24     	; 0x5cc <sendLocoNetWriteSlotData+0x8c>
    {
    case THR_STATE_ACQUIRE_LOCO_WRITE:
    case THR_STATE_RECONNECT_WRITE:
      vSetState(THR_STATE_RECONNECT_GET_SLOT, currentSlot);
     5b4:	b8 01       	movw	r22, r16
     5b6:	84 e1       	ldi	r24, 0x14	; 20
     5b8:	ef de       	rcall	.-546    	; 0x398 <vSetState>
      break;
     5ba:	08 c0       	rjmp	.+16     	; 0x5cc <sendLocoNetWriteSlotData+0x8c>
    case THR_STATE_UNCONNECTED_WRITE:
      vSetState(THR_STATE_CONNECTED, currentSlot);
     5bc:	b8 01       	movw	r22, r16
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	eb de       	rcall	.-554    	; 0x398 <vSetState>
      break;
    }
  }
  else
  {
    resetTimerAction(&MessageTimer, RESPONSE_TIME);
     5c2:	04 c0       	rjmp	.+8      	; 0x5cc <sendLocoNetWriteSlotData+0x8c>
     5c4:	64 e1       	ldi	r22, 0x14	; 20
     5c6:	8a ea       	ldi	r24, 0xAA	; 170
     5c8:	90 e0       	ldi	r25, 0x00	; 0
  }
}
     5ca:	e5 d7       	rcall	.+4042   	; 0x1596 <resetTimerAction>
     5cc:	60 96       	adiw	r28, 0x10	; 16
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	cd bf       	out	0x3d, r28	; 61
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	1f 91       	pop	r17
     5de:	0f 91       	pop	r16
     5e0:	08 95       	ret

000005e2 <sendLocoNetMove>:
 * ARGUMENTS   : none
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void sendLocoNetMove(byte bSrc, byte bDest, rwSlotDataMsg *currentSlot)
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	ea 01       	movw	r28, r20
  if (sendLocoNet4BytePacket(OPC_MOVE_SLOTS, bSrc, bDest) != LN_DONE)
     5e8:	46 2f       	mov	r20, r22
     5ea:	68 2f       	mov	r22, r24
     5ec:	8a eb       	ldi	r24, 0xBA	; 186
     5ee:	0e 94 90 0c 	call	0x1920	; 0x1920 <sendLocoNet4BytePacket>
     5f2:	83 30       	cpi	r24, 0x03	; 3
     5f4:	81 f0       	breq	.+32     	; 0x616 <sendLocoNetMove+0x34>
  {
    resetTimerAction(&MessageTimer, MESSAGE_TIME);
     5f6:	63 e0       	ldi	r22, 0x03	; 3
     5f8:	8a ea       	ldi	r24, 0xAA	; 170
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	cc d7       	rcall	.+3992   	; 0x1596 <resetTimerAction>
    // send message failed, so set new state
    if (bThrState == THR_STATE_RECONNECT_NULL_MOVE)
     5fe:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <bThrState>
     602:	86 31       	cpi	r24, 0x16	; 22
     604:	21 f4       	brne	.+8      	; 0x60e <sendLocoNetMove+0x2c>
    {
      vSetState(THR_STATE_RECONNECT_GET_SLOT, currentSlot);
     606:	be 01       	movw	r22, r28
     608:	84 e1       	ldi	r24, 0x14	; 20
     60a:	c6 de       	rcall	.-628    	; 0x398 <vSetState>
     60c:	08 c0       	rjmp	.+16     	; 0x61e <sendLocoNetMove+0x3c>
    }
    else
    {
      vSetState(THR_STATE_UNCONNECTED, currentSlot);
     60e:	be 01       	movw	r22, r28
     610:	80 e2       	ldi	r24, 0x20	; 32
     612:	c2 de       	rcall	.-636    	; 0x398 <vSetState>
    }
  }
  else
  {
    resetTimerAction(&MessageTimer, RESPONSE_TIME);
     614:	04 c0       	rjmp	.+8      	; 0x61e <sendLocoNetMove+0x3c>
     616:	64 e1       	ldi	r22, 0x14	; 20
     618:	8a ea       	ldi	r24, 0xAA	; 170
     61a:	90 e0       	ldi	r25, 0x00	; 0
  }
}
     61c:	bc d7       	rcall	.+3960   	; 0x1596 <resetTimerAction>
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	08 95       	ret

00000624 <sendLocoNetAdr>:
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void sendLocoNetAdr(rwSlotDataMsg *currentSlot)
{
  if (sendLocoNet4BytePacket(OPC_LOCO_ADR, currentSlot->adr2, currentSlot->adr) != LN_DONE)
     624:	fc 01       	movw	r30, r24
     626:	44 81       	ldd	r20, Z+4	; 0x04
     628:	61 85       	ldd	r22, Z+9	; 0x09
     62a:	8f eb       	ldi	r24, 0xBF	; 191
     62c:	0e 94 90 0c 	call	0x1920	; 0x1920 <sendLocoNet4BytePacket>
     630:	83 30       	cpi	r24, 0x03	; 3
     632:	29 f0       	breq	.+10     	; 0x63e <sendLocoNetAdr+0x1a>
  {
    resetTimerAction(&MessageTimer, MESSAGE_TIME);
     634:	63 e0       	ldi	r22, 0x03	; 3
     636:	8a ea       	ldi	r24, 0xAA	; 170
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	ad c7       	rjmp	.+3930   	; 0x1596 <resetTimerAction>
     63c:	08 95       	ret
  }
  else
  {
    resetTimerAction(&MessageTimer, RESPONSE_TIME);
     63e:	64 e1       	ldi	r22, 0x14	; 20
     640:	8a ea       	ldi	r24, 0xAA	; 170
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	a8 c7       	rjmp	.+3920   	; 0x1596 <resetTimerAction>
     646:	08 95       	ret

00000648 <sendLocoNetFredAdc>:
 * Send ADC raw value according to FRED.
 * @param raw the unfiltered value (0..1023)
 */
void sendLocoNetFredAdc( uint16_t raw )
{
  sendLocoNet4BytePacket( OPC_FRED_ADC, 0x7f & raw, 0x7f & raw>>7 );
     648:	ac 01       	movw	r20, r24
     64a:	44 0f       	add	r20, r20
     64c:	45 2f       	mov	r20, r21
     64e:	44 1f       	adc	r20, r20
     650:	55 0b       	sbc	r21, r21
     652:	51 95       	neg	r21
     654:	4f 77       	andi	r20, 0x7F	; 127
     656:	68 2f       	mov	r22, r24
     658:	6f 77       	andi	r22, 0x7F	; 127
     65a:	8f ea       	ldi	r24, 0xAF	; 175
     65c:	0c 94 90 0c 	jmp	0x1920	; 0x1920 <sendLocoNet4BytePacket>
     660:	08 95       	ret

00000662 <sendLocoNetFredCd>:
 * Send button press/release code according to FRED.
 * @param button a code from 1 to 127
 */
void sendLocoNetFredCd( uint8_t cdTime )
{
  sendLocoNet4BytePacket( OPC_FRED_BUTTON, 42, 0x7f & cdTime );
     662:	48 2f       	mov	r20, r24
     664:	4f 77       	andi	r20, 0x7F	; 127
     666:	6a e2       	ldi	r22, 0x2A	; 42
     668:	88 ea       	ldi	r24, 0xA8	; 168
     66a:	0c 94 90 0c 	jmp	0x1920	; 0x1920 <sendLocoNet4BytePacket>
     66e:	08 95       	ret

00000670 <sendLocoNetFredButton>:
 * Send button press/release code according to FRED.
 * @param button a code from 1 to 127
 */
void sendLocoNetFredButton( uint8_t button )
{
  sendLocoNet4BytePacket( OPC_FRED_BUTTON, 43, 0x7f & button );
     670:	48 2f       	mov	r20, r24
     672:	4f 77       	andi	r20, 0x7F	; 127
     674:	6b e2       	ldi	r22, 0x2B	; 43
     676:	88 ea       	ldi	r24, 0xA8	; 168
     678:	0c 94 90 0c 	jmp	0x1920	; 0x1920 <sendLocoNet4BytePacket>
     67c:	08 95       	ret

0000067e <vCheckSelfTestEnd>:
 * ARGUMENTS   : none
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void vCheckSelfTestEnd(rwSlotDataMsg *currentSlot)
{
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	bc 01       	movw	r22, r24
  byte fSelfTestEnd = FALSE;

  switch (bFrediVersion)
     684:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <bFrediVersion>
     688:	92 30       	cpi	r25, 0x02	; 2
     68a:	69 f0       	breq	.+26     	; 0x6a6 <vCheckSelfTestEnd+0x28>
     68c:	93 30       	cpi	r25, 0x03	; 3
     68e:	a9 f0       	breq	.+42     	; 0x6ba <vCheckSelfTestEnd+0x3c>
     690:	91 30       	cpi	r25, 0x01	; 1
     692:	e9 f4       	brne	.+58     	; 0x6ce <vCheckSelfTestEnd+0x50>
  {
  case FREDI_VERSION_INCREMENT:
    if (wSelfTest == Key_Fredi_Inkrement)
    {
      fSelfTestEnd = TRUE;        
     694:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <wSelfTest>
     698:	30 91 91 00 	lds	r19, 0x0091	; 0x800091 <wSelfTest+0x1>
     69c:	2f 37       	cpi	r18, 0x7F	; 127
     69e:	33 40       	sbci	r19, 0x03	; 3
     6a0:	b9 f0       	breq	.+46     	; 0x6d0 <vCheckSelfTestEnd+0x52>
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	15 c0       	rjmp	.+42     	; 0x6d0 <vCheckSelfTestEnd+0x52>
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <wSelfTest>
     6ac:	30 91 91 00 	lds	r19, 0x0091	; 0x800091 <wSelfTest+0x1>
     6b0:	2f 3f       	cpi	r18, 0xFF	; 255
     6b2:	33 40       	sbci	r19, 0x03	; 3
     6b4:	69 f0       	breq	.+26     	; 0x6d0 <vCheckSelfTestEnd+0x52>
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	0b c0       	rjmp	.+22     	; 0x6d0 <vCheckSelfTestEnd+0x52>
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <wSelfTest>
     6c0:	30 91 91 00 	lds	r19, 0x0091	; 0x800091 <wSelfTest+0x1>
     6c4:	2f 3f       	cpi	r18, 0xFF	; 255
     6c6:	3c 40       	sbci	r19, 0x0C	; 12
     6c8:	19 f0       	breq	.+6      	; 0x6d0 <vCheckSelfTestEnd+0x52>
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <vCheckSelfTestEnd+0x52>
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void vCheckSelfTestEnd(rwSlotDataMsg *currentSlot)
{
  byte fSelfTestEnd = FALSE;
     6ce:	90 e0       	ldi	r25, 0x00	; 0
    break;
  default:
    break;
  }

  if (  (fSelfTestEnd == TRUE)
     6d0:	91 30       	cpi	r25, 0x01	; 1
     6d2:	a1 f4       	brne	.+40     	; 0x6fc <vCheckSelfTestEnd+0x7e>
     6d4:	eb 01       	movw	r28, r22
     && (eeprom_read_byte(&abEEPROM[EEPROM_IMAGE]) != EEPROM_IMAGE_DEFAULT))
     6d6:	85 e0       	ldi	r24, 0x05	; 5
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 b8 0c 	call	0x1970	; 0x1970 <eeprom_read_byte>
     6de:	85 35       	cpi	r24, 0x55	; 85
     6e0:	69 f0       	breq	.+26     	; 0x6fc <vCheckSelfTestEnd+0x7e>
  {
    vSetState(THR_STATE_SELFTEST_DONE, currentSlot);
     6e2:	be 01       	movw	r22, r28
     6e4:	85 e6       	ldi	r24, 0x65	; 101
     6e6:	58 de       	rcall	.-848    	; 0x398 <vSetState>
    delayTimer( 100 ); // wait a little bit longer
     6e8:	84 e6       	ldi	r24, 0x64	; 100
     6ea:	90 e0       	ldi	r25, 0x00	; 0
    sendLocoNetFredButton( 0x7F );
     6ec:	57 d7       	rcall	.+3758   	; 0x159c <delayTimer>
     6ee:	8f e7       	ldi	r24, 0x7F	; 127
     6f0:	bf df       	rcall	.-130    	; 0x670 <sendLocoNetFredButton>

    eeprom_write_byte(&abEEPROM[EEPROM_IMAGE], EEPROM_IMAGE_DEFAULT);
     6f2:	65 e5       	ldi	r22, 0x55	; 85
     6f4:	85 e0       	ldi	r24, 0x05	; 5
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 c0 0c 	call	0x1980	; 0x1980 <eeprom_write_byte>
  }
}
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	08 95       	ret

00000702 <vProcessKey>:
 *      the remaining key is executed.
 *      So press shift, then press Fx key and release key Fx first before 
 *      releasing the shift key
 *******************************************************FunctionHeaderEnd******/
void vProcessKey(rwSlotDataMsg *currentSlot)
{
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	bc 01       	movw	r22, r24
  if (bEvent & EVENT_KEY)
     70a:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <bEvent>
     70e:	90 ff       	sbrs	r25, 0
     710:	16 c1       	rjmp	.+556    	; 0x93e <vProcessKey+0x23c>
     712:	eb 01       	movw	r28, r22
  {
    static byte bLastCurrentkey = 0;
    byte bSet;
    bEvent &= ~EVENT_KEY;
     714:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <bEvent>
     718:	9e 7f       	andi	r25, 0xFE	; 254
     71a:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <bEvent>

    if (bThrState < THR_STATE_SELFTEST)
     71e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <bThrState>
     722:	84 36       	cpi	r24, 0x64	; 100
     724:	08 f0       	brcs	.+2      	; 0x728 <vProcessKey+0x26>
     726:	f7 c0       	rjmp	.+494    	; 0x916 <vProcessKey+0x214>
    {
      if ((bLastCurrentkey & Key_SHIFT) && ( !(bCurrentKey & Key_SHIFT)))
     728:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <__data_end>
     72c:	90 ff       	sbrs	r25, 0
     72e:	04 c0       	rjmp	.+8      	; 0x738 <vProcessKey+0x36>
     730:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <bCurrentKey>
     734:	20 ff       	sbrs	r18, 0
     736:	ff c0       	rjmp	.+510    	; 0x936 <vProcessKey+0x234>
      { // the changing key was a release of shift -> no action
      }
			else if ((bLastCurrentkey & Key_Stop) && ( !(bCurrentKey & Key_Stop)))
     738:	96 ff       	sbrs	r25, 6
     73a:	09 c0       	rjmp	.+18     	; 0x74e <vProcessKey+0x4c>
     73c:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <bCurrentKey>
     740:	26 fd       	sbrc	r18, 6
     742:	05 c0       	rjmp	.+10     	; 0x74e <vProcessKey+0x4c>
			{
				resetTimerAction(&ReleaseStopTimer, RELEASE_STOP_TIME); 
     744:	65 e0       	ldi	r22, 0x05	; 5
     746:	82 e6       	ldi	r24, 0x62	; 98
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	25 d7       	rcall	.+3658   	; 0x1596 <resetTimerAction>
     74c:	f4 c0       	rjmp	.+488    	; 0x936 <vProcessKey+0x234>
			}
      else if ((bLastCurrentkey & Key_Dir) != (bCurrentKey & Key_Dir))
     74e:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <bCurrentKey>
     752:	92 27       	eor	r25, r18
     754:	94 f5       	brge	.+100    	; 0x7ba <vProcessKey+0xb8>
      { // dir switch changed
        if (  (bThrState == THR_STATE_CONNECTED)
     756:	81 30       	cpi	r24, 0x01	; 1
     758:	09 f0       	breq	.+2      	; 0x75c <vProcessKey+0x5a>
     75a:	ed c0       	rjmp	.+474    	; 0x936 <vProcessKey+0x234>
           && (  (bFrediVersion == FREDI_VERSION_ANALOG)
              || (bFrediVersion == FREDI_VERSION_INCREMENT_SWITCH)))
     75c:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <bFrediVersion>
				resetTimerAction(&ReleaseStopTimer, RELEASE_STOP_TIME); 
			}
      else if ((bLastCurrentkey & Key_Dir) != (bCurrentKey & Key_Dir))
      { // dir switch changed
        if (  (bThrState == THR_STATE_CONNECTED)
           && (  (bFrediVersion == FREDI_VERSION_ANALOG)
     760:	9e ef       	ldi	r25, 0xFE	; 254
     762:	98 0f       	add	r25, r24
     764:	92 30       	cpi	r25, 0x02	; 2
     766:	08 f0       	brcs	.+2      	; 0x76a <vProcessKey+0x68>
     768:	e6 c0       	rjmp	.+460    	; 0x936 <vProcessKey+0x234>
              || (bFrediVersion == FREDI_VERSION_INCREMENT_SWITCH)))
        {
          sEncDir = 0;
     76a:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <sEncDir>
          bSpdCnt = 0;
     76e:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <bSpdCnt>

          if (  (bFrediVersion == FREDI_VERSION_ANALOG)
     772:	83 30       	cpi	r24, 0x03	; 3
     774:	41 f4       	brne	.+16     	; 0x786 <vProcessKey+0x84>
                && (currentSlot->spd > 1))
     776:	8d 81       	ldd	r24, Y+5	; 0x05
     778:	82 30       	cpi	r24, 0x02	; 2
     77a:	28 f0       	brcs	.+10     	; 0x786 <vProcessKey+0x84>
          {
            fSetSpeed = FALSE;
     77c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <fSetSpeed>
            vSetState(THR_STATE_CONNECTED, currentSlot);
     780:	be 01       	movw	r22, r28
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	09 de       	rcall	.-1006   	; 0x398 <vSetState>
          }

          currentSlot->spd = 1; // Not stop
     786:	81 e0       	ldi	r24, 0x01	; 1

          sendLocoNetSpd(currentSlot);
     788:	8d 83       	std	Y+5, r24	; 0x05
     78a:	ce 01       	movw	r24, r28
     78c:	bf de       	rcall	.-642    	; 0x50c <sendLocoNetSpd>

          if (bCurrentKey & Key_Dir)
     78e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <bCurrentKey>
     792:	88 23       	and	r24, r24
     794:	34 f4       	brge	.+12     	; 0x7a2 <vProcessKey+0xa0>
          { // dir switch was pressed
            currentSlot->dirf |= 0x20;
     796:	8e 81       	ldd	r24, Y+6	; 0x06
     798:	80 62       	ori	r24, 0x20	; 32
     79a:	8e 83       	std	Y+6, r24	; 0x06
            LED_PORT   &= ~_BV(LED_GREEN_L); 
     79c:	ab 98       	cbi	0x15, 3	; 21
            LED_PORT   |=  _BV(LED_GREEN_R);
     79e:	aa 9a       	sbi	0x15, 2	; 21
     7a0:	05 c0       	rjmp	.+10     	; 0x7ac <vProcessKey+0xaa>
          }
          else
          { // dir switch was released
            currentSlot->dirf &= ~0x20;
     7a2:	8e 81       	ldd	r24, Y+6	; 0x06
     7a4:	8f 7d       	andi	r24, 0xDF	; 223
            LED_PORT &= ~_BV(LED_GREEN_R);
            LED_PORT |=  _BV(LED_GREEN_L); 
     7a6:	8e 83       	std	Y+6, r24	; 0x06
          }
          sendLocoNetDirf(currentSlot);
     7a8:	aa 98       	cbi	0x15, 2	; 21
     7aa:	ab 9a       	sbi	0x15, 3	; 21

          // Fredi is connected, so this causes an sendLocoNetSpd after 100ms
          // it seems to be the last sendLocoNetSpd is ignored by intellibox in some cases
          resetTimerAction(&MessageTimer, 1); 
     7ac:	ce 01       	movw	r24, r28
     7ae:	ba de       	rcall	.-652    	; 0x524 <sendLocoNetDirf>
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	8a ea       	ldi	r24, 0xAA	; 170
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	ef d6       	rcall	.+3550   	; 0x1596 <resetTimerAction>
        }
      }
      else
      {
        if (bThrState == THR_STATE_CONNECTED)
     7b8:	be c0       	rjmp	.+380    	; 0x936 <vProcessKey+0x234>
     7ba:	81 30       	cpi	r24, 0x01	; 1
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <vProcessKey+0xbe>
        {
          if (bCurrentKey & Key_SHIFT)
     7be:	8f c0       	rjmp	.+286    	; 0x8de <vProcessKey+0x1dc>
     7c0:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <bCurrentKey>
     7c4:	80 ff       	sbrs	r24, 0
          {
            bSet = currentSlot->snd; 
     7c6:	30 c0       	rjmp	.+96     	; 0x828 <vProcessKey+0x126>

            switch (bCurrentKey & ~Key_Dir)
     7c8:	1a 85       	ldd	r17, Y+10	; 0x0a
     7ca:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <bCurrentKey>
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	8f 77       	andi	r24, 0x7F	; 127
     7d2:	89 30       	cpi	r24, 0x09	; 9
     7d4:	91 05       	cpc	r25, r1
     7d6:	c1 f0       	breq	.+48     	; 0x808 <vProcessKey+0x106>
     7d8:	34 f4       	brge	.+12     	; 0x7e6 <vProcessKey+0xe4>
     7da:	83 30       	cpi	r24, 0x03	; 3
     7dc:	91 05       	cpc	r25, r1
     7de:	d1 f0       	breq	.+52     	; 0x814 <vProcessKey+0x112>
     7e0:	05 97       	sbiw	r24, 0x05	; 5
     7e2:	a9 f0       	breq	.+42     	; 0x80e <vProcessKey+0x10c>
     7e4:	19 c0       	rjmp	.+50     	; 0x818 <vProcessKey+0x116>
     7e6:	81 31       	cpi	r24, 0x11	; 17
     7e8:	91 05       	cpc	r25, r1
     7ea:	59 f0       	breq	.+22     	; 0x802 <vProcessKey+0x100>
     7ec:	81 34       	cpi	r24, 0x41	; 65
            {
            case (Key_Stop | Key_SHIFT): // undispatch
              currentSlot->stat = 0x20;
     7ee:	91 05       	cpc	r25, r1

              vSetState(THR_STATE_UNCONNECTED_WRITE, currentSlot);
     7f0:	99 f4       	brne	.+38     	; 0x818 <vProcessKey+0x116>
     7f2:	80 e2       	ldi	r24, 0x20	; 32
     7f4:	8b 83       	std	Y+3, r24	; 0x03
     7f6:	be 01       	movw	r22, r28

              sendLocoNetWriteSlotData(currentSlot);
     7f8:	8e e1       	ldi	r24, 0x1E	; 30
     7fa:	ce dd       	rcall	.-1124   	; 0x398 <vSetState>
     7fc:	ce 01       	movw	r24, r28
              break;
     7fe:	a0 de       	rcall	.-704    	; 0x540 <sendLocoNetWriteSlotData>
            case Key_F5:  bSet ^= 0x01; break;
     800:	0b c0       	rjmp	.+22     	; 0x818 <vProcessKey+0x116>
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	18 27       	eor	r17, r24
            case Key_F6:  bSet ^= 0x02; break;
     806:	08 c0       	rjmp	.+16     	; 0x818 <vProcessKey+0x116>
     808:	82 e0       	ldi	r24, 0x02	; 2
     80a:	18 27       	eor	r17, r24
            case Key_F7:  bSet ^= 0x04; break;
     80c:	05 c0       	rjmp	.+10     	; 0x818 <vProcessKey+0x116>
     80e:	84 e0       	ldi	r24, 0x04	; 4
     810:	18 27       	eor	r17, r24
            case Key_F8:  bSet ^= 0x08; break;
     812:	02 c0       	rjmp	.+4      	; 0x818 <vProcessKey+0x116>
            default:                    break;
            }

            if (bSet != currentSlot->snd)
     814:	88 e0       	ldi	r24, 0x08	; 8
     816:	18 27       	eor	r17, r24
     818:	8a 85       	ldd	r24, Y+10	; 0x0a
     81a:	18 17       	cp	r17, r24
            {
              currentSlot->snd = bSet; 
     81c:	09 f4       	brne	.+2      	; 0x820 <vProcessKey+0x11e>
              sendLocoNetSnd(currentSlot);
     81e:	8b c0       	rjmp	.+278    	; 0x936 <vProcessKey+0x234>
     820:	1a 87       	std	Y+10, r17	; 0x0a
     822:	ce 01       	movw	r24, r28
     824:	86 de       	rcall	.-756    	; 0x532 <sendLocoNetSnd>
            }
          }
          else
          {
            bSet = currentSlot->dirf; 
     826:	87 c0       	rjmp	.+270    	; 0x936 <vProcessKey+0x234>

            switch (bCurrentKey & ~Key_Dir)
     828:	1e 81       	ldd	r17, Y+6	; 0x06
     82a:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <bCurrentKey>
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	8f 77       	andi	r24, 0x7F	; 127
     832:	88 30       	cpi	r24, 0x08	; 8
     834:	91 05       	cpc	r25, r1
     836:	09 f4       	brne	.+2      	; 0x83a <vProcessKey+0x138>
     838:	43 c0       	rjmp	.+134    	; 0x8c0 <vProcessKey+0x1be>
     83a:	44 f4       	brge	.+16     	; 0x84c <vProcessKey+0x14a>
     83c:	82 30       	cpi	r24, 0x02	; 2
     83e:	91 05       	cpc	r25, r1
     840:	09 f4       	brne	.+2      	; 0x844 <vProcessKey+0x142>
     842:	44 c0       	rjmp	.+136    	; 0x8cc <vProcessKey+0x1ca>
     844:	04 97       	sbiw	r24, 0x04	; 4
     846:	09 f4       	brne	.+2      	; 0x84a <vProcessKey+0x148>
     848:	3e c0       	rjmp	.+124    	; 0x8c6 <vProcessKey+0x1c4>
     84a:	42 c0       	rjmp	.+132    	; 0x8d0 <vProcessKey+0x1ce>
     84c:	80 32       	cpi	r24, 0x20	; 32
     84e:	91 05       	cpc	r25, r1
     850:	89 f1       	breq	.+98     	; 0x8b4 <vProcessKey+0x1b2>
     852:	80 34       	cpi	r24, 0x40	; 64
     854:	91 05       	cpc	r25, r1
     856:	19 f0       	breq	.+6      	; 0x85e <vProcessKey+0x15c>
     858:	40 97       	sbiw	r24, 0x10	; 16
     85a:	d1 f5       	brne	.+116    	; 0x8d0 <vProcessKey+0x1ce>
            {
            case Key_Stop: // increment pushbutton or extra button on analog fredi
              sEncDir = 0;
     85c:	2e c0       	rjmp	.+92     	; 0x8ba <vProcessKey+0x1b8>
     85e:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <sEncDir>
              bSpdCnt = 0;
     862:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <bSpdCnt>

              if (  (bFrediVersion == FREDI_VERSION_ANALOG)
     866:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <bFrediVersion>
                 && (currentSlot->spd > 1))
     86a:	83 30       	cpi	r24, 0x03	; 3
     86c:	49 f4       	brne	.+18     	; 0x880 <vProcessKey+0x17e>
     86e:	8d 81       	ldd	r24, Y+5	; 0x05
              {
                fSetSpeed = FALSE;                // show blinking LED
     870:	82 30       	cpi	r24, 0x02	; 2
     872:	30 f0       	brcs	.+12     	; 0x880 <vProcessKey+0x17e>
                vSetState(THR_STATE_CONNECTED, currentSlot);
     874:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <fSetSpeed>
     878:	be 01       	movw	r22, r28
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	8d dd       	rcall	.-1254   	; 0x398 <vSetState>
              }
							else
							{
								bStopPressed = TRUE;
     87e:	03 c0       	rjmp	.+6      	; 0x886 <vProcessKey+0x184>
     880:	81 e0       	ldi	r24, 0x01	; 1
							}

              if (currentSlot->spd > 1)
     882:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <bStopPressed>
     886:	8d 81       	ldd	r24, Y+5	; 0x05
							{
								currentSlot->spd = 1;                      // Emergency stop
     888:	82 30       	cpi	r24, 0x02	; 2
     88a:	18 f0       	brcs	.+6      	; 0x892 <vProcessKey+0x190>
     88c:	81 e0       	ldi	r24, 0x01	; 1
							}
							else
							{
								currentSlot->spd = 0;                      // Normal stop
     88e:	8d 83       	std	Y+5, r24	; 0x05
							}

              sendLocoNetSpd(currentSlot);
     890:	01 c0       	rjmp	.+2      	; 0x894 <vProcessKey+0x192>
     892:	1d 82       	std	Y+5, r1	; 0x05
     894:	ce 01       	movw	r24, r28

              if (bFrediVersion == FREDI_VERSION_INCREMENT) // invert direction
     896:	3a de       	rcall	.-908    	; 0x50c <sendLocoNetSpd>
     898:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <bFrediVersion>
     89c:	81 30       	cpi	r24, 0x01	; 1
              {
								if (bSet & 0x20)
     89e:	c1 f4       	brne	.+48     	; 0x8d0 <vProcessKey+0x1ce>
     8a0:	15 ff       	sbrs	r17, 5
								{
									bSet &= ~0x20;
     8a2:	04 c0       	rjmp	.+8      	; 0x8ac <vProcessKey+0x1aa>

									LED_PORT &= ~_BV(LED_GREEN_R);
     8a4:	1f 7d       	andi	r17, 0xDF	; 223
									LED_PORT |=  _BV(LED_GREEN_L);     // show left direction
     8a6:	aa 98       	cbi	0x15, 2	; 21
     8a8:	ab 9a       	sbi	0x15, 3	; 21
								}
								else
								{
									bSet |= 0x20;
     8aa:	12 c0       	rjmp	.+36     	; 0x8d0 <vProcessKey+0x1ce>

									LED_PORT &= ~_BV(LED_GREEN_L);     // show right direction
     8ac:	10 62       	ori	r17, 0x20	; 32
									LED_PORT |=  _BV(LED_GREEN_R);
     8ae:	ab 98       	cbi	0x15, 3	; 21
     8b0:	aa 9a       	sbi	0x15, 2	; 21
								}
              }
              break;
            case Key_F0:  bSet ^= 0x10; break;
     8b2:	0e c0       	rjmp	.+28     	; 0x8d0 <vProcessKey+0x1ce>
     8b4:	80 e1       	ldi	r24, 0x10	; 16
     8b6:	18 27       	eor	r17, r24
            case Key_F1:  bSet ^= 0x01; break;
     8b8:	0b c0       	rjmp	.+22     	; 0x8d0 <vProcessKey+0x1ce>
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	18 27       	eor	r17, r24
            case Key_F2:  bSet ^= 0x02; break;
     8be:	08 c0       	rjmp	.+16     	; 0x8d0 <vProcessKey+0x1ce>
     8c0:	82 e0       	ldi	r24, 0x02	; 2
            case Key_F3:  bSet ^= 0x04; break;
     8c2:	18 27       	eor	r17, r24
     8c4:	05 c0       	rjmp	.+10     	; 0x8d0 <vProcessKey+0x1ce>
            case Key_F4:  bSet ^= 0x08; break;
     8c6:	84 e0       	ldi	r24, 0x04	; 4
     8c8:	18 27       	eor	r17, r24
            default:                    break;
            }

            if (bSet != currentSlot->dirf)
     8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <vProcessKey+0x1ce>
     8cc:	88 e0       	ldi	r24, 0x08	; 8
     8ce:	18 27       	eor	r17, r24
            {
              currentSlot->dirf = bSet; 
     8d0:	8e 81       	ldd	r24, Y+6	; 0x06
              sendLocoNetDirf(currentSlot);
     8d2:	18 17       	cp	r17, r24
     8d4:	81 f1       	breq	.+96     	; 0x936 <vProcessKey+0x234>
     8d6:	1e 83       	std	Y+6, r17	; 0x06
            }
          } // end of else if(bCurrentKey & Key_SHIFT)
        } // end of if(bThrState == THR_STATE_CONNECTED)
        else if (bThrState == THR_STATE_UNCONNECTED)
     8d8:	ce 01       	movw	r24, r28
        {
          if ((bCurrentKey & ~Key_Dir) == (Key_Stop | Key_SHIFT))   // try to dispatch
     8da:	24 de       	rcall	.-952    	; 0x524 <sendLocoNetDirf>
     8dc:	2c c0       	rjmp	.+88     	; 0x936 <vProcessKey+0x234>
     8de:	80 32       	cpi	r24, 0x20	; 32
     8e0:	69 f4       	brne	.+26     	; 0x8fc <vProcessKey+0x1fa>
          {
            vSetState(THR_STATE_ACQUIRE_LOCO_GET, currentSlot);
     8e2:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <bCurrentKey>
     8e6:	8f 77       	andi	r24, 0x7F	; 127
     8e8:	81 34       	cpi	r24, 0x41	; 65
            sendLocoNetMove(0, 0, currentSlot);
     8ea:	29 f5       	brne	.+74     	; 0x936 <vProcessKey+0x234>
     8ec:	be 01       	movw	r22, r28
     8ee:	8a e0       	ldi	r24, 0x0A	; 10
     8f0:	53 dd       	rcall	.-1370   	; 0x398 <vSetState>
          }
        }
        else
        {
          if ((bCurrentKey & (Key_Stop | Key_SHIFT)) == (Key_Stop | Key_SHIFT))
     8f2:	ae 01       	movw	r20, r28
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	74 de       	rcall	.-792    	; 0x5e2 <sendLocoNetMove>
     8fa:	1d c0       	rjmp	.+58     	; 0x936 <vProcessKey+0x234>
          {
            currentSlot->stat = 0x20;
     8fc:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <bCurrentKey>

            vSetState(THR_STATE_UNCONNECTED_WRITE, currentSlot);
     900:	81 74       	andi	r24, 0x41	; 65
     902:	81 34       	cpi	r24, 0x41	; 65
     904:	c1 f4       	brne	.+48     	; 0x936 <vProcessKey+0x234>
     906:	80 e2       	ldi	r24, 0x20	; 32

            sendLocoNetWriteSlotData(currentSlot);
     908:	8b 83       	std	Y+3, r24	; 0x03
     90a:	be 01       	movw	r22, r28
        }
      }
    }
    else
    {
      wSelfTest |= (uint16_t) (bCurrentKey);
     90c:	8e e1       	ldi	r24, 0x1E	; 30
     90e:	44 dd       	rcall	.-1400   	; 0x398 <vSetState>
     910:	ce 01       	movw	r24, r28
     912:	16 de       	rcall	.-980    	; 0x540 <sendLocoNetWriteSlotData>
     914:	10 c0       	rjmp	.+32     	; 0x936 <vProcessKey+0x234>
     916:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <bCurrentKey>
     91a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <wSelfTest>
     91e:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <wSelfTest+0x1>
      sendLocoNetFredButton(bCurrentKey);
     922:	82 2b       	or	r24, r18
     924:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <wSelfTest+0x1>
      vCheckSelfTestEnd(currentSlot);
     928:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <wSelfTest>
     92c:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <bCurrentKey>
    }

    bLastCurrentkey = bCurrentKey;
     930:	9f de       	rcall	.-706    	; 0x670 <sendLocoNetFredButton>
     932:	ce 01       	movw	r24, r28
     934:	a4 de       	rcall	.-696    	; 0x67e <vCheckSelfTestEnd>
  } // end of if (bEvent & EVENT_KEY)
} // end of void vProcessKey(void)
     936:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <bCurrentKey>
     93a:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end>
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	08 95       	ret

00000946 <vProcessEncoder>:
 * ARGUMENTS   : none
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void vProcessEncoder(rwSlotDataMsg *currentSlot)
{
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	9c 01       	movw	r18, r24
  if (sEncDir != 0)
     94c:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <sEncDir>
     950:	99 23       	and	r25, r25
     952:	09 f4       	brne	.+2      	; 0x956 <vProcessEncoder+0x10>
     954:	6e c0       	rjmp	.+220    	; 0xa32 <vProcessEncoder+0xec>
     956:	e9 01       	movw	r28, r18
  {
    resetTimerAction(&IncrementTimer, INCREMENT_TIME); // start timer for debouncing
     958:	65 e0       	ldi	r22, 0x05	; 5
     95a:	81 eb       	ldi	r24, 0xB1	; 177
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	1b d6       	rcall	.+3126   	; 0x1596 <resetTimerAction>

    if (bThrState == THR_STATE_CONNECTED)
     960:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <bThrState>
     964:	81 30       	cpi	r24, 0x01	; 1
     966:	09 f0       	breq	.+2      	; 0x96a <vProcessEncoder+0x24>
     968:	44 c0       	rjmp	.+136    	; 0x9f2 <vProcessEncoder+0xac>
    {
			if (!(bStopPressed))                // get encoder steps only if stop is not pressed
     96a:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <bStopPressed>
     96e:	81 11       	cpse	r24, r1
     970:	5e c0       	rjmp	.+188    	; 0xa2e <vProcessEncoder+0xe8>
			{
				if (sEncDir < 0)                  // left rotation
     972:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <sEncDir>
     976:	88 23       	and	r24, r24
     978:	dc f4       	brge	.+54     	; 0x9b0 <vProcessEncoder+0x6a>
				{
					sEncDir *= -1;                  // get absolut value
     97a:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <sEncDir>
     97e:	81 95       	neg	r24
     980:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <sEncDir>

					if (sEncDir > bSpdCnt)
     984:	20 91 93 00 	lds	r18, 0x0093	; 0x800093 <sEncDir>
     988:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <bSpdCnt>
     98c:	02 2e       	mov	r0, r18
     98e:	00 0c       	add	r0, r0
     990:	33 0b       	sbc	r19, r19
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	82 17       	cp	r24, r18
     996:	93 07       	cpc	r25, r19
     998:	1c f4       	brge	.+6      	; 0x9a0 <vProcessEncoder+0x5a>
					{
						bSpdCnt = 0;
     99a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <bSpdCnt>
     99e:	0f c0       	rjmp	.+30     	; 0x9be <vProcessEncoder+0x78>
					}
					else
					{
						bSpdCnt -= (byte) sEncDir;
     9a0:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <sEncDir>
     9a4:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <bSpdCnt>
     9a8:	89 1b       	sub	r24, r25
     9aa:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <bSpdCnt>
     9ae:	07 c0       	rjmp	.+14     	; 0x9be <vProcessEncoder+0x78>
					}
				}
				else                              // right rotation
				{
					bSpdCnt += sEncDir;
     9b0:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <sEncDir>
     9b4:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <bSpdCnt>
     9b8:	89 0f       	add	r24, r25
     9ba:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <bSpdCnt>
				}

      if (bSpdCnt > MAX_SPEED)          // limit the value for speed
     9be:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <bSpdCnt>
     9c2:	82 32       	cpi	r24, 0x22	; 34
     9c4:	18 f0       	brcs	.+6      	; 0x9cc <vProcessEncoder+0x86>
      {
        bSpdCnt = MAX_SPEED;
     9c6:	81 e2       	ldi	r24, 0x21	; 33
     9c8:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <bSpdCnt>
      }

      if (currentSlot->spd != abSpd[bSpdCnt])       // get speedvalue for incrementvalue
     9cc:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <bSpdCnt>
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	e8 59       	subi	r30, 0x98	; 152
     9d4:	ff 4f       	sbci	r31, 0xFF	; 255
     9d6:	9d 81       	ldd	r25, Y+5	; 0x05
     9d8:	80 81       	ld	r24, Z
     9da:	98 17       	cp	r25, r24
     9dc:	41 f1       	breq	.+80     	; 0xa2e <vProcessEncoder+0xe8>
      {
        currentSlot->spd = abSpd[bSpdCnt];
     9de:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <bSpdCnt>
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	e8 59       	subi	r30, 0x98	; 152
     9e6:	ff 4f       	sbci	r31, 0xFF	; 255
     9e8:	80 81       	ld	r24, Z
					sendLocoNetSpd(currentSlot);           // anounce new speed value
     9ea:	8d 83       	std	Y+5, r24	; 0x05
     9ec:	ce 01       	movw	r24, r28
     9ee:	8e dd       	rcall	.-1252   	; 0x50c <sendLocoNetSpd>
				}
			}
    }
    else if (bThrState >= THR_STATE_SELFTEST)
     9f0:	1e c0       	rjmp	.+60     	; 0xa2e <vProcessEncoder+0xe8>
     9f2:	84 36       	cpi	r24, 0x64	; 100
    {
      if (sEncDir < 0)                  // left rotation decoded
     9f4:	e0 f0       	brcs	.+56     	; 0xa2e <vProcessEncoder+0xe8>
     9f6:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <sEncDir>
     9fa:	88 23       	and	r24, r24
      {
        wSelfTest |= Key_Enc_L;
     9fc:	54 f4       	brge	.+20     	; 0xa12 <vProcessEncoder+0xcc>
     9fe:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <wSelfTest>
     a02:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <wSelfTest+0x1>
     a06:	91 60       	ori	r25, 0x01	; 1
     a08:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <wSelfTest+0x1>
     a0c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <wSelfTest>
      }
      else                              // right ratation decoded
      {
        wSelfTest |= Key_Enc_R;
     a10:	09 c0       	rjmp	.+18     	; 0xa24 <vProcessEncoder+0xde>
     a12:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <wSelfTest>
     a16:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <wSelfTest+0x1>
     a1a:	92 60       	ori	r25, 0x02	; 2
     a1c:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <wSelfTest+0x1>
      }
      sendLocoNetFredButton( sEncDir );
     a20:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <wSelfTest>

      vCheckSelfTestEnd(currentSlot);
     a24:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <sEncDir>
     a28:	23 de       	rcall	.-954    	; 0x670 <sendLocoNetFredButton>
    }

    sEncDir = 0;
     a2a:	ce 01       	movw	r24, r28
     a2c:	28 de       	rcall	.-944    	; 0x67e <vCheckSelfTestEnd>
  }
}
     a2e:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <sEncDir>
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	08 95       	ret

00000a38 <vProcessPoti>:
 * ARGUMENTS   : none
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void vProcessPoti(rwSlotDataMsg *currentSlot)
{
     a38:	1f 93       	push	r17
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	ec 01       	movw	r28, r24
  if (bThrState == THR_STATE_CONNECTED)
     a40:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <bThrState>
     a44:	81 30       	cpi	r24, 0x01	; 1
     a46:	09 f5       	brne	.+66     	; 0xa8a <vProcessPoti+0x52>
  {
    byte fOldSetSpeed = fSetSpeed;
     a48:	10 91 65 00 	lds	r17, 0x0065	; 0x800065 <fSetSpeed>

    if (!fSetSpeed)
     a4c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <fSetSpeed>
     a50:	81 11       	cpse	r24, r1
     a52:	07 c0       	rjmp	.+14     	; 0xa62 <vProcessPoti+0x2a>
    {
      if (potAdcSpeedValue == 0)     // potivalue is in right range for  set speed again
     a54:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <potAdcSpeedValue>
     a58:	81 11       	cpse	r24, r1
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <vProcessPoti+0x2a>
      {
        fSetSpeed = TRUE;
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <fSetSpeed>
      }
    }

    if (fSetSpeed)
     a62:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <fSetSpeed>
     a66:	88 23       	and	r24, r24
     a68:	41 f0       	breq	.+16     	; 0xa7a <vProcessPoti+0x42>
    {
      byte bSpd = potAdcSpeedValue;
     a6a:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <potAdcSpeedValue>
      if (currentSlot->spd != bSpd)
     a6e:	9d 81       	ldd	r25, Y+5	; 0x05
     a70:	89 17       	cp	r24, r25
     a72:	19 f0       	breq	.+6      	; 0xa7a <vProcessPoti+0x42>
      {
        currentSlot->spd = bSpd;
     a74:	8d 83       	std	Y+5, r24	; 0x05
        sendLocoNetSpd(currentSlot);
     a76:	ce 01       	movw	r24, r28
     a78:	49 dd       	rcall	.-1390   	; 0x50c <sendLocoNetSpd>
      }
    }

    if (fOldSetSpeed != fSetSpeed)
     a7a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <fSetSpeed>
     a7e:	18 17       	cp	r17, r24
     a80:	d9 f1       	breq	.+118    	; 0xaf8 <vProcessPoti+0xc0>
    {
      vSetState(THR_STATE_CONNECTED, currentSlot); // reset of blinking LEDs
     a82:	be 01       	movw	r22, r28
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	88 dc       	rcall	.-1776   	; 0x398 <vSetState>
     a88:	37 c0       	rjmp	.+110    	; 0xaf8 <vProcessPoti+0xc0>
    }
  }
  else if (bThrState >= THR_STATE_SELFTEST)
     a8a:	84 36       	cpi	r24, 0x64	; 100
     a8c:	a8 f1       	brcs	.+106    	; 0xaf8 <vProcessPoti+0xc0>
  {
    static uint16_t bOldValue = 0xffff; // init of potAdcSpeedValue is different,
                                        // so set first value anyway

    if (potAdcSpeedValue == 0)          // Poti on left side
     a8e:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <potAdcSpeedValue>
     a92:	81 11       	cpse	r24, r1
     a94:	0a c0       	rjmp	.+20     	; 0xaaa <vProcessPoti+0x72>
    {
      wSelfTest |= Key_Poti_L;
     a96:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <wSelfTest>
     a9a:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <wSelfTest+0x1>
     a9e:	94 60       	ori	r25, 0x04	; 4
     aa0:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <wSelfTest+0x1>
     aa4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <wSelfTest>
     aa8:	0d c0       	rjmp	.+26     	; 0xac4 <vProcessPoti+0x8c>
    }
    else if (potAdcSpeedValue >= 126)   // Poti on right side
     aaa:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <potAdcSpeedValue>
     aae:	8e 37       	cpi	r24, 0x7E	; 126
     ab0:	48 f0       	brcs	.+18     	; 0xac4 <vProcessPoti+0x8c>
    {
      wSelfTest |= Key_Poti_R;
     ab2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <wSelfTest>
     ab6:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <wSelfTest+0x1>
     aba:	98 60       	ori	r25, 0x08	; 8
     abc:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <wSelfTest+0x1>
     ac0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <wSelfTest>
    }

    if ( bOldValue != potAdcRawValue )
     ac4:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <potAdcRawValue>
     ac8:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <potAdcRawValue+0x1>
     acc:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     ad0:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
     ad4:	28 17       	cp	r18, r24
     ad6:	39 07       	cpc	r19, r25
     ad8:	69 f0       	breq	.+26     	; 0xaf4 <vProcessPoti+0xbc>
    {
      bOldValue = potAdcRawValue;
     ada:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <potAdcRawValue>
     ade:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <potAdcRawValue+0x1>
     ae2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     ae6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
      sendLocoNetFredAdc( potAdcRawValue );
     aea:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <potAdcRawValue>
     aee:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <potAdcRawValue+0x1>
    }

    vCheckSelfTestEnd(currentSlot);
     af2:	aa dd       	rcall	.-1196   	; 0x648 <sendLocoNetFredAdc>
     af4:	ce 01       	movw	r24, r28
     af6:	c3 dd       	rcall	.-1146   	; 0x67e <vCheckSelfTestEnd>
  }
}
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	08 95       	ret

00000b00 <vCopySlotFromRxPacket>:
 * ARGUMENTS   : none
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void vCopySlotFromRxPacket(rwSlotDataMsg *currentSlot)
{
     b00:	fc 01       	movw	r30, r24
	// byte i;                                               // needed for GET_SPDCNT_BY_SLOTSPD

	if (bThrState == THR_STATE_ACQUIRE_LOCO_GET)
     b02:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <bThrState>
     b06:	8a 30       	cpi	r24, 0x0A	; 10
     b08:	81 f4       	brne	.+32     	; 0xb2a <vCopySlotFromRxPacket+0x2a>
	{
		currentSlot->stat    = RxPacket->data[ 3];                 // slot status
     b0a:	a0 91 c6 00 	lds	r26, 0x00C6	; 0x8000c6 <RxPacket>
     b0e:	b0 91 c7 00 	lds	r27, 0x00C7	; 0x8000c7 <RxPacket+0x1>
     b12:	13 96       	adiw	r26, 0x03	; 3
     b14:	8c 91       	ld	r24, X
     b16:	13 97       	sbiw	r26, 0x03	; 3
     b18:	83 83       	std	Z+3, r24	; 0x03
		currentSlot->adr     = RxPacket->data[ 4];                 // loco address
     b1a:	14 96       	adiw	r26, 0x04	; 4
     b1c:	8c 91       	ld	r24, X
     b1e:	14 97       	sbiw	r26, 0x04	; 4
     b20:	84 83       	std	Z+4, r24	; 0x04
		currentSlot->adr2    = RxPacket->data[ 9];                 // loco address high
     b22:	19 96       	adiw	r26, 0x09	; 9
     b24:	8c 91       	ld	r24, X
     b26:	81 87       	std	Z+9, r24	; 0x09
     b28:	0a c0       	rjmp	.+20     	; 0xb3e <vCopySlotFromRxPacket+0x3e>
	}
	else
	{
		currentSlot->stat    |= RxPacket->data[ 3] & ~DEC_MODE_MASK; // slot status
     b2a:	a0 91 c6 00 	lds	r26, 0x00C6	; 0x8000c6 <RxPacket>
     b2e:	b0 91 c7 00 	lds	r27, 0x00C7	; 0x8000c7 <RxPacket+0x1>
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	8c 91       	ld	r24, X
     b36:	88 7f       	andi	r24, 0xF8	; 248
     b38:	93 81       	ldd	r25, Z+3	; 0x03
     b3a:	89 2b       	or	r24, r25
     b3c:	83 83       	std	Z+3, r24	; 0x03
	}

	currentSlot->slot      = RxPacket->data[ 2];                 // slot number for this request
     b3e:	a0 91 c6 00 	lds	r26, 0x00C6	; 0x8000c6 <RxPacket>
     b42:	b0 91 c7 00 	lds	r27, 0x00C7	; 0x8000c7 <RxPacket+0x1>
     b46:	12 96       	adiw	r26, 0x02	; 2
     b48:	8c 91       	ld	r24, X
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	82 83       	std	Z+2, r24	; 0x02

	if (  (bFrediVersion == FREDI_VERSION_INCREMENT_SWITCH)
	|| (bFrediVersion == FREDI_VERSION_ANALOG          ))
     b4e:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <bFrediVersion>
		currentSlot->stat    |= RxPacket->data[ 3] & ~DEC_MODE_MASK; // slot status
	}

	currentSlot->slot      = RxPacket->data[ 2];                 // slot number for this request

	if (  (bFrediVersion == FREDI_VERSION_INCREMENT_SWITCH)
     b52:	9e ef       	ldi	r25, 0xFE	; 254
     b54:	98 0f       	add	r25, r24
     b56:	92 30       	cpi	r25, 0x02	; 2
     b58:	08 f5       	brcc	.+66     	; 0xb9c <vCopySlotFromRxPacket+0x9c>
	|| (bFrediVersion == FREDI_VERSION_ANALOG          ))
	{
		currentSlot->dirf = RxPacket->data[ 6] & ~0x20;            // get direction by switch position
     b5a:	16 96       	adiw	r26, 0x06	; 6
     b5c:	9c 91       	ld	r25, X
     b5e:	16 97       	sbiw	r26, 0x06	; 6
     b60:	9f 7d       	andi	r25, 0xDF	; 223
     b62:	96 83       	std	Z+6, r25	; 0x06

		if (bCurrentKey & Key_Dir)
     b64:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <bCurrentKey>
     b68:	22 23       	and	r18, r18
     b6a:	14 f4       	brge	.+4      	; 0xb70 <vCopySlotFromRxPacket+0x70>
		{
			currentSlot->dirf |=  0x20;
     b6c:	90 62       	ori	r25, 0x20	; 32
     b6e:	96 83       	std	Z+6, r25	; 0x06
		}

		if ((currentSlot->dirf & 0x20) != (RxPacket->data[ 6] & 0x20)) // compare Fredi direction with slot direction
     b70:	26 81       	ldd	r18, Z+6	; 0x06
     b72:	16 96       	adiw	r26, 0x06	; 6
     b74:	9c 91       	ld	r25, X
     b76:	16 97       	sbiw	r26, 0x06	; 6
     b78:	92 27       	eor	r25, r18
     b7a:	95 ff       	sbrs	r25, 5
     b7c:	05 c0       	rjmp	.+10     	; 0xb88 <vCopySlotFromRxPacket+0x88>
		{
			currentSlot->spd = 1;                                    // direction isn't matching so stop train
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	85 83       	std	Z+5, r24	; 0x05
			fSetSpeed = FALSE;                                // and show blinking
     b82:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <fSetSpeed>
     b86:	11 c0       	rjmp	.+34     	; 0xbaa <vCopySlotFromRxPacket+0xaa>
		}
		else if (bFrediVersion == FREDI_VERSION_ANALOG)
     b88:	83 30       	cpi	r24, 0x03	; 3
     b8a:	21 f4       	brne	.+8      	; 0xb94 <vCopySlotFromRxPacket+0x94>
		{
			currentSlot->spd = potAdcSpeedValue;                     // direction is matching, get speed by poti
     b8c:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <potAdcSpeedValue>
     b90:	85 83       	std	Z+5, r24	; 0x05
     b92:	0b c0       	rjmp	.+22     	; 0xbaa <vCopySlotFromRxPacket+0xaa>
		}
		else
		{
			currentSlot->spd = RxPacket->data[ 5];                   // a increment-switch-Fredi takes speed from slot
     b94:	15 96       	adiw	r26, 0x05	; 5
     b96:	8c 91       	ld	r24, X
     b98:	85 83       	std	Z+5, r24	; 0x05
     b9a:	07 c0       	rjmp	.+14     	; 0xbaa <vCopySlotFromRxPacket+0xaa>
		}
	}
	else
	{
		currentSlot->spd   = RxPacket->data[ 5];                   // command speed
     b9c:	15 96       	adiw	r26, 0x05	; 5
     b9e:	8c 91       	ld	r24, X
     ba0:	15 97       	sbiw	r26, 0x05	; 5
     ba2:	85 83       	std	Z+5, r24	; 0x05
		currentSlot->dirf  = RxPacket->data[ 6];                   // direction and function keys
     ba4:	16 96       	adiw	r26, 0x06	; 6
     ba6:	8c 91       	ld	r24, X
     ba8:	86 83       	std	Z+6, r24	; 0x06
	}

	currentSlot->trk       = RxPacket->data[ 7];                 // track status
     baa:	a0 91 c6 00 	lds	r26, 0x00C6	; 0x8000c6 <RxPacket>
     bae:	b0 91 c7 00 	lds	r27, 0x00C7	; 0x8000c7 <RxPacket+0x1>
     bb2:	17 96       	adiw	r26, 0x07	; 7
     bb4:	8c 91       	ld	r24, X
     bb6:	17 97       	sbiw	r26, 0x07	; 7
     bb8:	87 83       	std	Z+7, r24	; 0x07
	currentSlot->ss2       = RxPacket->data[ 8];                 // slot status 2 (tells how to use ID1/ID2 & ADV Consist
     bba:	18 96       	adiw	r26, 0x08	; 8
     bbc:	8c 91       	ld	r24, X
     bbe:	18 97       	sbiw	r26, 0x08	; 8
     bc0:	80 87       	std	Z+8, r24	; 0x08
	currentSlot->snd       = RxPacket->data[10];                 // Sound 1-4 / F5-F8
     bc2:	1a 96       	adiw	r26, 0x0a	; 10
     bc4:	8c 91       	ld	r24, X
     bc6:	82 87       	std	Z+10, r24	; 0x0a

	GET_SPDCNT_BY_SLOTSPD(currentSlot);                         // calculate real speed
     bc8:	cf 01       	movw	r24, r30
     bca:	52 cb       	rjmp	.-2396   	; 0x270 <GET_SPDCNT_BY_SLOTSPD>
     bcc:	08 95       	ret

00000bce <vSetUnconnected>:
 * ARGUMENTS   : none
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void vSetUnconnected(rwSlotDataMsg *currentSlot)
{
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	ec 01       	movw	r28, r24
  currentSlot->adr   = 0;
     bd4:	1c 82       	std	Y+4, r1	; 0x04
  currentSlot->adr2  = 0;
     bd6:	19 86       	std	Y+9, r1	; 0x09

  eeprom_write_byte(&abEEPROM[EEPROM_ADR_LOCO_LB],  currentSlot->adr);
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	83 e0       	ldi	r24, 0x03	; 3
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	d0 d6       	rcall	.+3488   	; 0x1980 <eeprom_write_byte>
  eeprom_write_byte(&abEEPROM[EEPROM_ADR_LOCO_HB],  currentSlot->adr2);
     be0:	69 85       	ldd	r22, Y+9	; 0x09
     be2:	82 e0       	ldi	r24, 0x02	; 2
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	cc d6       	rcall	.+3480   	; 0x1980 <eeprom_write_byte>
  eeprom_write_byte(&abEEPROM[EEPROM_DECODER_TYPE], EEPROM_DECODER_TYPE_DEFAULT);
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	84 e0       	ldi	r24, 0x04	; 4
     bec:	90 e0       	ldi	r25, 0x00	; 0

  vSetState(THR_STATE_UNCONNECTED, currentSlot);
     bee:	c8 d6       	rcall	.+3472   	; 0x1980 <eeprom_write_byte>
     bf0:	be 01       	movw	r22, r28
     bf2:	80 e2       	ldi	r24, 0x20	; 32
     bf4:	d1 db       	rcall	.-2142   	; 0x398 <vSetState>
}
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	08 95       	ret

00000bfc <vProcessRxLoconetMessage>:
 * ARGUMENTS   : none
 * RETURN VALUE: none
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
void vProcessRxLoconetMessage(rwSlotDataMsg *currentSlot)
{
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
  RxPacket = recvLocoNetPacket();
     c00:	ec 01       	movw	r28, r24
     c02:	4e d6       	rcall	.+3228   	; 0x18a0 <recvLocoNetPacket>
     c04:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <RxPacket+0x1>
     c08:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <RxPacket>

  if (RxPacket)
     c0c:	00 97       	sbiw	r24, 0x00	; 0
     c0e:	09 f4       	brne	.+2      	; 0xc12 <vProcessRxLoconetMessage+0x16>
  {
    switch (RxPacket->data[0]) // OP_CODE
     c10:	ea c0       	rjmp	.+468    	; 0xde6 <vProcessRxLoconetMessage+0x1ea>
     c12:	fc 01       	movw	r30, r24
     c14:	20 81       	ld	r18, Z
     c16:	22 3a       	cpi	r18, 0xA2	; 162
     c18:	09 f4       	brne	.+2      	; 0xc1c <vProcessRxLoconetMessage+0x20>
     c1a:	d6 c0       	rjmp	.+428    	; 0xdc8 <vProcessRxLoconetMessage+0x1cc>
     c1c:	38 f4       	brcc	.+14     	; 0xc2c <vProcessRxLoconetMessage+0x30>
     c1e:	20 3a       	cpi	r18, 0xA0	; 160
     c20:	09 f4       	brne	.+2      	; 0xc24 <vProcessRxLoconetMessage+0x28>
     c22:	98 c0       	rjmp	.+304    	; 0xd54 <vProcessRxLoconetMessage+0x158>
     c24:	21 3a       	cpi	r18, 0xA1	; 161
     c26:	09 f4       	brne	.+2      	; 0xc2a <vProcessRxLoconetMessage+0x2e>
     c28:	a4 c0       	rjmp	.+328    	; 0xd72 <vProcessRxLoconetMessage+0x176>
     c2a:	d9 c0       	rjmp	.+434    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     c2c:	24 3b       	cpi	r18, 0xB4	; 180
     c2e:	09 f4       	brne	.+2      	; 0xc32 <vProcessRxLoconetMessage+0x36>
     c30:	63 c0       	rjmp	.+198    	; 0xcf8 <vProcessRxLoconetMessage+0xfc>
     c32:	27 3e       	cpi	r18, 0xE7	; 231
     c34:	09 f0       	breq	.+2      	; 0xc38 <vProcessRxLoconetMessage+0x3c>
    {
/***************************************/
//  Slot Read Data
/***************************************/
    case OPC_SL_RD_DATA:
      switch (bThrState)
     c36:	d3 c0       	rjmp	.+422    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     c38:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <bThrState>
     c3c:	24 31       	cpi	r18, 0x14	; 20
     c3e:	91 f0       	breq	.+36     	; 0xc64 <vProcessRxLoconetMessage+0x68>
     c40:	26 31       	cpi	r18, 0x16	; 22
     c42:	09 f4       	brne	.+2      	; 0xc46 <vProcessRxLoconetMessage+0x4a>
     c44:	41 c0       	rjmp	.+130    	; 0xcc8 <vProcessRxLoconetMessage+0xcc>
     c46:	2a 30       	cpi	r18, 0x0A	; 10
     c48:	09 f0       	breq	.+2      	; 0xc4c <vProcessRxLoconetMessage+0x50>
      {
      case THR_STATE_ACQUIRE_LOCO_GET: // response of Dispatch Get
        {
          if ((RxPacket->data[3] & LOCO_IDLE) == LOCO_IDLE)
     c4a:	c9 c0       	rjmp	.+402    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     c4c:	fc 01       	movw	r30, r24
     c4e:	83 81       	ldd	r24, Z+3	; 0x03
          {
            vCopySlotFromRxPacket(currentSlot);
     c50:	85 ff       	sbrs	r24, 5
            vSetState(THR_STATE_ACQUIRE_LOCO_WRITE, currentSlot);
     c52:	c5 c0       	rjmp	.+394    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     c54:	ce 01       	movw	r24, r28
            sendLocoNetWriteSlotData(currentSlot);
     c56:	54 df       	rcall	.-344    	; 0xb00 <vCopySlotFromRxPacket>
     c58:	be 01       	movw	r22, r28
     c5a:	8b e0       	ldi	r24, 0x0B	; 11
     c5c:	9d db       	rcall	.-2246   	; 0x398 <vSetState>
          }
        }
        break;
      case THR_STATE_RECONNECT_GET_SLOT: // response of Get Slot By Adress
        {
          if (  (currentSlot->adr  == RxPacket->data[4])
     c5e:	ce 01       	movw	r24, r28
     c60:	6f dc       	rcall	.-1826   	; 0x540 <sendLocoNetWriteSlotData>
     c62:	bd c0       	rjmp	.+378    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     c64:	3c 81       	ldd	r19, Y+4	; 0x04
     c66:	fc 01       	movw	r30, r24
             && (currentSlot->adr2 == RxPacket->data[9]))
     c68:	24 81       	ldd	r18, Z+4	; 0x04
     c6a:	32 13       	cpse	r19, r18
     c6c:	b8 c0       	rjmp	.+368    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     c6e:	39 85       	ldd	r19, Y+9	; 0x09
          { // slot not changed and in use , so we can use this slot further on
            if ((RxPacket->data[3] & LOCO_IN_USE) == LOCO_IN_USE)
     c70:	21 85       	ldd	r18, Z+9	; 0x09
     c72:	32 13       	cpse	r19, r18
     c74:	b4 c0       	rjmp	.+360    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     c76:	23 81       	ldd	r18, Z+3	; 0x03
            {
              if (  (  (currentSlot->id1 == RxPacket->data[11]) && (currentSlot->id2 == RxPacket->data[12]))
     c78:	20 73       	andi	r18, 0x30	; 48
     c7a:	20 33       	cpi	r18, 0x30	; 48
     c7c:	c9 f4       	brne	.+50     	; 0xcb0 <vProcessRxLoconetMessage+0xb4>
     c7e:	23 85       	ldd	r18, Z+11	; 0x0b
     c80:	3b 85       	ldd	r19, Y+11	; 0x0b
     c82:	32 13       	cpse	r19, r18
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <vProcessRxLoconetMessage+0x92>
     c86:	4c 85       	ldd	r20, Y+12	; 0x0c
                 || (  (0         == RxPacket->data[11]) && (0         == RxPacket->data[12])))
     c88:	34 85       	ldd	r19, Z+12	; 0x0c
     c8a:	43 17       	cp	r20, r19
     c8c:	31 f0       	breq	.+12     	; 0xc9a <vProcessRxLoconetMessage+0x9e>
     c8e:	21 11       	cpse	r18, r1
              {
                vCopySlotFromRxPacket(currentSlot);
     c90:	0c c0       	rjmp	.+24     	; 0xcaa <vProcessRxLoconetMessage+0xae>
                vSetState(THR_STATE_RECONNECT_WRITE, currentSlot);
     c92:	fc 01       	movw	r30, r24
     c94:	84 85       	ldd	r24, Z+12	; 0x0c
     c96:	81 11       	cpse	r24, r1
                sendLocoNetWriteSlotData(currentSlot);
     c98:	08 c0       	rjmp	.+16     	; 0xcaa <vProcessRxLoconetMessage+0xae>
     c9a:	ce 01       	movw	r24, r28
     c9c:	31 df       	rcall	.-414    	; 0xb00 <vCopySlotFromRxPacket>
              }
              else
              {
                vSetUnconnected(currentSlot);
     c9e:	be 01       	movw	r22, r28
     ca0:	88 e1       	ldi	r24, 0x18	; 24
     ca2:	7a db       	rcall	.-2316   	; 0x398 <vSetState>
     ca4:	ce 01       	movw	r24, r28
              }
            }
            else
            {
              vSetState(THR_STATE_RECONNECT_NULL_MOVE, currentSlot);
     ca6:	4c dc       	rcall	.-1896   	; 0x540 <sendLocoNetWriteSlotData>
     ca8:	9a c0       	rjmp	.+308    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     caa:	ce 01       	movw	r24, r28
              sendLocoNetMove(RxPacket->data[2], RxPacket->data[2], currentSlot);
     cac:	90 df       	rcall	.-224    	; 0xbce <vSetUnconnected>
     cae:	97 c0       	rjmp	.+302    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     cb0:	be 01       	movw	r22, r28
     cb2:	86 e1       	ldi	r24, 0x16	; 22
     cb4:	71 db       	rcall	.-2334   	; 0x398 <vSetState>
     cb6:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <RxPacket>
     cba:	f0 91 c7 00 	lds	r31, 0x00C7	; 0x8000c7 <RxPacket+0x1>
     cbe:	82 81       	ldd	r24, Z+2	; 0x02
          }
        }
        break;
      case THR_STATE_RECONNECT_NULL_MOVE:
        {
          if (  (currentSlot->adr  == RxPacket->data[4]) 
     cc0:	ae 01       	movw	r20, r28
     cc2:	68 2f       	mov	r22, r24
     cc4:	8e dc       	rcall	.-1764   	; 0x5e2 <sendLocoNetMove>
     cc6:	8b c0       	rjmp	.+278    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
             && (currentSlot->adr2 == RxPacket->data[9]))
     cc8:	3c 81       	ldd	r19, Y+4	; 0x04
     cca:	fc 01       	movw	r30, r24
          { // slot not changed and in use , so we can use this slot further on
            if ((RxPacket->data[3] & LOCO_IN_USE) == LOCO_IN_USE)
     ccc:	24 81       	ldd	r18, Z+4	; 0x04
     cce:	32 13       	cpse	r19, r18
            {
              vCopySlotFromRxPacket(currentSlot);
     cd0:	86 c0       	rjmp	.+268    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     cd2:	39 85       	ldd	r19, Y+9	; 0x09
     cd4:	21 85       	ldd	r18, Z+9	; 0x09
              vSetState(THR_STATE_RECONNECT_WRITE, currentSlot);
     cd6:	32 13       	cpse	r19, r18
     cd8:	82 c0       	rjmp	.+260    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     cda:	83 81       	ldd	r24, Z+3	; 0x03
     cdc:	80 73       	andi	r24, 0x30	; 48
              sendLocoNetWriteSlotData(currentSlot);
     cde:	80 33       	cpi	r24, 0x30	; 48
     ce0:	41 f4       	brne	.+16     	; 0xcf2 <vProcessRxLoconetMessage+0xf6>
     ce2:	ce 01       	movw	r24, r28
     ce4:	0d df       	rcall	.-486    	; 0xb00 <vCopySlotFromRxPacket>
            }
            else
            {
              vSetUnconnected(currentSlot);
     ce6:	be 01       	movw	r22, r28
     ce8:	88 e1       	ldi	r24, 0x18	; 24
     cea:	56 db       	rcall	.-2388   	; 0x398 <vSetState>
     cec:	ce 01       	movw	r24, r28
      break;
/***************************************/
//  Long Acknowledge
/***************************************/
    case OPC_LONG_ACK:
      switch (bThrState)
     cee:	28 dc       	rcall	.-1968   	; 0x540 <sendLocoNetWriteSlotData>
     cf0:	76 c0       	rjmp	.+236    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     cf2:	ce 01       	movw	r24, r28
     cf4:	6c df       	rcall	.-296    	; 0xbce <vSetUnconnected>
     cf6:	73 c0       	rjmp	.+230    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     cf8:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <bThrState>
     cfc:	2b 30       	cpi	r18, 0x0B	; 11
     cfe:	89 f0       	breq	.+34     	; 0xd22 <vProcessRxLoconetMessage+0x126>
     d00:	18 f4       	brcc	.+6      	; 0xd08 <vProcessRxLoconetMessage+0x10c>
     d02:	2a 30       	cpi	r18, 0x0A	; 10
     d04:	21 f1       	breq	.+72     	; 0xd4e <vProcessRxLoconetMessage+0x152>
      {
      case THR_STATE_UNCONNECTED_WRITE:
        if (RxPacket->data[1] == (OPC_WR_SL_DATA & 0x7f))
     d06:	6b c0       	rjmp	.+214    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     d08:	28 31       	cpi	r18, 0x18	; 24
     d0a:	59 f0       	breq	.+22     	; 0xd22 <vProcessRxLoconetMessage+0x126>
     d0c:	2e 31       	cpi	r18, 0x1E	; 30
        {
          vSetUnconnected(currentSlot);
     d0e:	09 f0       	breq	.+2      	; 0xd12 <vProcessRxLoconetMessage+0x116>
     d10:	66 c0       	rjmp	.+204    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     d12:	fc 01       	movw	r30, r24
        }
        break;
      case THR_STATE_RECONNECT_WRITE: // response of Get Slot By Adress
      case THR_STATE_ACQUIRE_LOCO_WRITE:
        if (RxPacket->data[1] == (OPC_WR_SL_DATA & 0x7f))
     d14:	81 81       	ldd	r24, Z+1	; 0x01
     d16:	8f 36       	cpi	r24, 0x6F	; 111
     d18:	09 f0       	breq	.+2      	; 0xd1c <vProcessRxLoconetMessage+0x120>
        {
          eeprom_write_byte(&abEEPROM[EEPROM_ADR_LOCO_LB],  currentSlot->adr);
     d1a:	61 c0       	rjmp	.+194    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     d1c:	ce 01       	movw	r24, r28
     d1e:	57 df       	rcall	.-338    	; 0xbce <vSetUnconnected>
          eeprom_write_byte(&abEEPROM[EEPROM_ADR_LOCO_HB],  currentSlot->adr2);
     d20:	5e c0       	rjmp	.+188    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     d22:	fc 01       	movw	r30, r24
     d24:	81 81       	ldd	r24, Z+1	; 0x01
     d26:	8f 36       	cpi	r24, 0x6F	; 111
     d28:	09 f0       	breq	.+2      	; 0xd2c <vProcessRxLoconetMessage+0x130>
          eeprom_write_byte(&abEEPROM[EEPROM_DECODER_TYPE], currentSlot->stat & DEC_MODE_MASK);
     d2a:	59 c0       	rjmp	.+178    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     d2c:	6c 81       	ldd	r22, Y+4	; 0x04
     d2e:	83 e0       	ldi	r24, 0x03	; 3
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	26 d6       	rcall	.+3148   	; 0x1980 <eeprom_write_byte>
     d34:	69 85       	ldd	r22, Y+9	; 0x09

          vSetState(THR_STATE_CONNECTED, currentSlot);
     d36:	82 e0       	ldi	r24, 0x02	; 2
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	22 d6       	rcall	.+3140   	; 0x1980 <eeprom_write_byte>
     d3c:	6b 81       	ldd	r22, Y+3	; 0x03
        }
        break;
      case THR_STATE_ACQUIRE_LOCO_GET: // response of Dispatch Get
        vSetUnconnected(currentSlot);
     d3e:	67 70       	andi	r22, 0x07	; 7
     d40:	84 e0       	ldi	r24, 0x04	; 4
     d42:	90 e0       	ldi	r25, 0x00	; 0
        break;
     d44:	1d d6       	rcall	.+3130   	; 0x1980 <eeprom_write_byte>
      break;
/***************************************/
//  Set Slot Speed
/***************************************/
    case OPC_LOCO_SPD:
      if (  (bThrState         == THR_STATE_CONNECTED)
     d46:	be 01       	movw	r22, r28
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	26 db       	rcall	.-2484   	; 0x398 <vSetState>
     d4c:	48 c0       	rjmp	.+144    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     d4e:	ce 01       	movw	r24, r28
         && (RxPacket->data[1] == currentSlot->slot         ))
     d50:	3e df       	rcall	.-388    	; 0xbce <vSetUnconnected>
     d52:	45 c0       	rjmp	.+138    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     d54:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <bThrState>
     d58:	21 30       	cpi	r18, 0x01	; 1
      {
        currentSlot->spd = RxPacket->data[2];
     d5a:	09 f0       	breq	.+2      	; 0xd5e <vProcessRxLoconetMessage+0x162>
     d5c:	40 c0       	rjmp	.+128    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
        
        GET_SPDCNT_BY_SLOTSPD(currentSlot);
     d5e:	fc 01       	movw	r30, r24
     d60:	31 81       	ldd	r19, Z+1	; 0x01
     d62:	2a 81       	ldd	r18, Y+2	; 0x02
     d64:	32 13       	cpse	r19, r18
      break;
/***************************************/
//  Set Slot Direction and F0 to F4
/***************************************/
    case OPC_LOCO_DIRF:
      if (  (bThrState         == THR_STATE_CONNECTED)
     d66:	3b c0       	rjmp	.+118    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     d68:	82 81       	ldd	r24, Z+2	; 0x02
     d6a:	8d 83       	std	Y+5, r24	; 0x05
     d6c:	ce 01       	movw	r24, r28
         && (RxPacket->data[1] == currentSlot->slot         ))
     d6e:	80 da       	rcall	.-2816   	; 0x270 <GET_SPDCNT_BY_SLOTSPD>
     d70:	36 c0       	rjmp	.+108    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     d72:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <bThrState>
      {

        if (  (bFrediVersion == FREDI_VERSION_INCREMENT_SWITCH)
     d76:	21 30       	cpi	r18, 0x01	; 1
     d78:	91 f5       	brne	.+100    	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     d7a:	fc 01       	movw	r30, r24
     d7c:	31 81       	ldd	r19, Z+1	; 0x01
     d7e:	2a 81       	ldd	r18, Y+2	; 0x02
              || (bFrediVersion == FREDI_VERSION_ANALOG          ))
        {
          // if switch is not in direction of direction flag, so change 
          // directionflag to synchronize the direction
          if ( (currentSlot->dirf & 0x20) != (RxPacket->data[2] & 0x20))
     d80:	32 13       	cpse	r19, r18
     d82:	2d c0       	rjmp	.+90     	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     d84:	20 91 97 00 	lds	r18, 0x0097	; 0x800097 <bFrediVersion>
     d88:	22 50       	subi	r18, 0x02	; 2
     d8a:	22 30       	cpi	r18, 0x02	; 2
          {
            currentSlot->dirf &= 0x20;                       // get direction of fredi
     d8c:	88 f4       	brcc	.+34     	; 0xdb0 <vProcessRxLoconetMessage+0x1b4>
     d8e:	2e 81       	ldd	r18, Y+6	; 0x06
            currentSlot->dirf |= (RxPacket->data[2] & ~0x20); // and add F0..F4
     d90:	32 81       	ldd	r19, Z+2	; 0x02
     d92:	42 2f       	mov	r20, r18
     d94:	43 27       	eor	r20, r19
     d96:	45 ff       	sbrs	r20, 5
            sendLocoNetDirf(currentSlot);
     d98:	09 c0       	rjmp	.+18     	; 0xdac <vProcessRxLoconetMessage+0x1b0>
     d9a:	20 72       	andi	r18, 0x20	; 32
     d9c:	2e 83       	std	Y+6, r18	; 0x06
     d9e:	82 81       	ldd	r24, Z+2	; 0x02
          }
          else
          {
            currentSlot->dirf = RxPacket->data[2];          // direction is equal, so take F0..F4
     da0:	8f 7d       	andi	r24, 0xDF	; 223
     da2:	28 2b       	or	r18, r24
          }
        }
        else
        { // take direction as new one
          currentSlot->dirf = RxPacket->data[2];
     da4:	2e 83       	std	Y+6, r18	; 0x06
     da6:	ce 01       	movw	r24, r28
     da8:	bd db       	rcall	.-2182   	; 0x524 <sendLocoNetDirf>
        }

        if (currentSlot->dirf & 0x20)
     daa:	05 c0       	rjmp	.+10     	; 0xdb6 <vProcessRxLoconetMessage+0x1ba>
     dac:	3e 83       	std	Y+6, r19	; 0x06
     dae:	03 c0       	rjmp	.+6      	; 0xdb6 <vProcessRxLoconetMessage+0x1ba>
        {
          LED_PORT &= ~_BV(LED_GREEN_R);
     db0:	fc 01       	movw	r30, r24
          LED_PORT |=  _BV(LED_GREEN_L); 
     db2:	82 81       	ldd	r24, Z+2	; 0x02
     db4:	8e 83       	std	Y+6, r24	; 0x06
        }
        else
        {
          LED_PORT &= ~_BV(LED_GREEN_L); 
     db6:	8e 81       	ldd	r24, Y+6	; 0x06
          LED_PORT |=  _BV(LED_GREEN_R);
     db8:	85 ff       	sbrs	r24, 5
     dba:	03 c0       	rjmp	.+6      	; 0xdc2 <vProcessRxLoconetMessage+0x1c6>
      break;
/***************************************/
//  Set Slot Sound Functions, 
/***************************************/
    case OPC_LOCO_SND:
      if (  (bThrState         == THR_STATE_CONNECTED)
     dbc:	aa 98       	cbi	0x15, 2	; 21
     dbe:	ab 9a       	sbi	0x15, 3	; 21
     dc0:	0e c0       	rjmp	.+28     	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     dc2:	ab 98       	cbi	0x15, 3	; 21
         && (RxPacket->data[1] == currentSlot->slot         ))
     dc4:	aa 9a       	sbi	0x15, 2	; 21
     dc6:	0b c0       	rjmp	.+22     	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     dc8:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <bThrState>
     dcc:	21 30       	cpi	r18, 0x01	; 1
      {
        currentSlot->snd = RxPacket->data[2];
     dce:	39 f4       	brne	.+14     	; 0xdde <vProcessRxLoconetMessage+0x1e2>
     dd0:	fc 01       	movw	r30, r24
/***************************************/
    default:
      break;
    }

    RxPacket = 0;  
     dd2:	31 81       	ldd	r19, Z+1	; 0x01
     dd4:	2a 81       	ldd	r18, Y+2	; 0x02
     dd6:	32 13       	cpse	r19, r18
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <vProcessRxLoconetMessage+0x1e2>
  }
}
     dda:	82 81       	ldd	r24, Z+2	; 0x02
     ddc:	8a 87       	std	Y+10, r24	; 0x0a
     dde:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <RxPacket+0x1>
     de2:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <RxPacket>
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	08 95       	ret

00000dec <main>:
 * RETURN VALUE: int, never reached, cause of endless loop
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
int main(void)
{
  RESET_RESET_SOURCE(); // Clear Reset Status Register (WDRF,BORF,EXTRF,PORF)
     dec:	14 be       	out	0x34, r1	; 52
  /***************************************/
  //  init analog input for getting 
  //  FrediVersion
  /***************************************/

  DDRC  &= ~_BV(DDC5); // set version detector to tristate to get kind of fredi
     dee:	a5 98       	cbi	0x14, 5	; 20
  PORTC |=  _BV(PC5);
     df0:	ad 9a       	sbi	0x15, 5	; 21

  if (bit_is_set(PINC, PINC5))
     df2:	9d 9b       	sbis	0x13, 5	; 19
     df4:	04 c0       	rjmp	.+8      	; 0xdfe <main+0x12>
  {
    bFrediVersion = FREDI_VERSION_ANALOG;
     df6:	83 e0       	ldi	r24, 0x03	; 3
     df8:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <bFrediVersion>
     dfc:	03 c0       	rjmp	.+6      	; 0xe04 <main+0x18>
  }
  else
  {
    bFrediVersion = FREDI_VERSION_INCREMENT;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <bFrediVersion>
  
  /***************************************/
  //  init throttle slot
  /***************************************/

  bSpdCnt = 0;
     e04:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <bSpdCnt>

  rSlot.command   = OPC_WR_SL_DATA;
     e08:	e8 ec       	ldi	r30, 0xC8	; 200
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	8f ee       	ldi	r24, 0xEF	; 239
     e0e:	80 83       	st	Z, r24
  rSlot.mesg_size = 14;
     e10:	8e e0       	ldi	r24, 0x0E	; 14
     e12:	81 83       	std	Z+1, r24	; 0x01
  rSlot.slot      = 0;                        /* slot number for this request                         */
     e14:	12 82       	std	Z+2, r1	; 0x02
  rSlot.stat      = 0;                        /* slot status                                          */
     e16:	13 82       	std	Z+3, r1	; 0x03
  rSlot.adr       = 0;                        /* loco address                                         */
     e18:	14 82       	std	Z+4, r1	; 0x04
  rSlot.spd       = 0;                        /* command speed                                        */
     e1a:	15 82       	std	Z+5, r1	; 0x05
  rSlot.dirf      = 0;                        /* direction and F0-F4 bits                             */
     e1c:	16 82       	std	Z+6, r1	; 0x06
  rSlot.trk       = 0;                        /* track status                                         */
     e1e:	17 82       	std	Z+7, r1	; 0x07
  rSlot.ss2       = 0;                        /* slot status 2 (tells how to use ID1/ID2 & ADV Consist*/
     e20:	10 86       	std	Z+8, r1	; 0x08
  rSlot.adr2      = 0;                        /* loco address high                                    */
     e22:	11 86       	std	Z+9, r1	; 0x09
  rSlot.snd       = 0;                        /* Sound 1-4 / F5-F8                                    */
     e24:	12 86       	std	Z+10, r1	; 0x0a

  if ((eeprom_read_byte(&abEEPROM[EEPROM_IMAGE]) != EEPROM_IMAGE_DEFAULT))
     e26:	85 e0       	ldi	r24, 0x05	; 5
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	a2 d5       	rcall	.+2884   	; 0x1970 <eeprom_read_byte>
     e2c:	85 35       	cpi	r24, 0x55	; 85
     e2e:	51 f1       	breq	.+84     	; 0xe84 <main+0x98>
  {
    vSetState(THR_STATE_SELFTEST, &rSlot);
     e30:	68 ec       	ldi	r22, 0xC8	; 200
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	84 e6       	ldi	r24, 0x64	; 100
     e36:	b0 da       	rcall	.-2720   	; 0x398 <vSetState>

    eeprom_write_byte(&abEEPROM[EEPROM_ADR_LOCO_LB], 0);                 // no loco active at selftest
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	83 e0       	ldi	r24, 0x03	; 3
     e3c:	90 e0       	ldi	r25, 0x00	; 0
    eeprom_write_byte(&abEEPROM[EEPROM_ADR_LOCO_HB], 0);
     e3e:	a0 d5       	rcall	.+2880   	; 0x1980 <eeprom_write_byte>
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	82 e0       	ldi	r24, 0x02	; 2

    eeprom_write_byte(&abEEPROM[EEPROM_DECODER_TYPE], EEPROM_DECODER_TYPE_DEFAULT);
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	9c d5       	rcall	.+2872   	; 0x1980 <eeprom_write_byte>
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	84 e0       	ldi	r24, 0x04	; 4

    eeprom_write_byte(&abEEPROM[EEPROM_SW_INDEX_HB], HIBYTE(SW_INDEX));  // write Version in EEPROM on first startup
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	98 d5       	rcall	.+2864   	; 0x1980 <eeprom_write_byte>
     e50:	61 e0       	ldi	r22, 0x01	; 1
     e52:	87 e0       	ldi	r24, 0x07	; 7
    eeprom_write_byte(&abEEPROM[EEPROM_SW_INDEX_LB], LOBYTE(SW_INDEX));
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	94 d5       	rcall	.+2856   	; 0x1980 <eeprom_write_byte>
     e58:	66 e0       	ldi	r22, 0x06	; 6

    eeprom_write_byte(&abEEPROM[EEPROM_SW_DAY],      SW_DAY);            // write date of SW in EEPROM
     e5a:	88 e0       	ldi	r24, 0x08	; 8
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	90 d5       	rcall	.+2848   	; 0x1980 <eeprom_write_byte>
    eeprom_write_byte(&abEEPROM[EEPROM_SW_MONTH],    SW_MONTH);
     e60:	66 e0       	ldi	r22, 0x06	; 6
     e62:	89 e0       	ldi	r24, 0x09	; 9
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	8c d5       	rcall	.+2840   	; 0x1980 <eeprom_write_byte>
    eeprom_write_byte(&abEEPROM[EEPROM_SW_YEAR],     SW_YEAR);
     e68:	64 e0       	ldi	r22, 0x04	; 4
     e6a:	8a e0       	ldi	r24, 0x0A	; 10
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	88 d5       	rcall	.+2832   	; 0x1980 <eeprom_write_byte>

    eeprom_write_byte(&abEEPROM[EEPROM_VERSION],     bFrediVersion);     // store detected HW version
     e70:	60 e1       	ldi	r22, 0x10	; 16
     e72:	8b e0       	ldi	r24, 0x0B	; 11
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	84 d5       	rcall	.+2824   	; 0x1980 <eeprom_write_byte>
     e78:	60 91 97 00 	lds	r22, 0x0097	; 0x800097 <bFrediVersion>
  }
  else
  { // selftest was successful before
    if (  (eeprom_read_byte(&abEEPROM[EEPROM_SW_INDEX_HB]) != HIBYTE(SW_INDEX))
     e7c:	86 e0       	ldi	r24, 0x06	; 6
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	7f d5       	rcall	.+2814   	; 0x1980 <eeprom_write_byte>
     e82:	3f c0       	rjmp	.+126    	; 0xf02 <main+0x116>
          || (eeprom_read_byte(&abEEPROM[EEPROM_SW_INDEX_LB]) != LOBYTE(SW_INDEX))
     e84:	87 e0       	ldi	r24, 0x07	; 7
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	73 d5       	rcall	.+2790   	; 0x1970 <eeprom_read_byte>
     e8a:	81 30       	cpi	r24, 0x01	; 1
          || (eeprom_read_byte(&abEEPROM[EEPROM_SW_DAY])      != SW_DAY)
     e8c:	a1 f4       	brne	.+40     	; 0xeb6 <main+0xca>
     e8e:	88 e0       	ldi	r24, 0x08	; 8
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	6e d5       	rcall	.+2780   	; 0x1970 <eeprom_read_byte>
     e94:	86 30       	cpi	r24, 0x06	; 6
          || (eeprom_read_byte(&abEEPROM[EEPROM_SW_MONTH])    != SW_MONTH)
     e96:	79 f4       	brne	.+30     	; 0xeb6 <main+0xca>
     e98:	89 e0       	ldi	r24, 0x09	; 9
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	69 d5       	rcall	.+2770   	; 0x1970 <eeprom_read_byte>
     e9e:	86 30       	cpi	r24, 0x06	; 6
          || (eeprom_read_byte(&abEEPROM[EEPROM_SW_YEAR])     != SW_YEAR))
     ea0:	51 f4       	brne	.+20     	; 0xeb6 <main+0xca>
     ea2:	8a e0       	ldi	r24, 0x0A	; 10
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	64 d5       	rcall	.+2760   	; 0x1970 <eeprom_read_byte>
    { // sw index or date has changed
      eeprom_write_byte(&abEEPROM[EEPROM_SW_INDEX_HB], HIBYTE(SW_INDEX));// write Version in EEPROM on first startup
     ea8:	84 30       	cpi	r24, 0x04	; 4
     eaa:	29 f4       	brne	.+10     	; 0xeb6 <main+0xca>
     eac:	8b e0       	ldi	r24, 0x0B	; 11
     eae:	90 e0       	ldi	r25, 0x00	; 0
      eeprom_write_byte(&abEEPROM[EEPROM_SW_INDEX_LB], LOBYTE(SW_INDEX));
     eb0:	5f d5       	rcall	.+2750   	; 0x1970 <eeprom_read_byte>
     eb2:	80 31       	cpi	r24, 0x10	; 16
     eb4:	a1 f0       	breq	.+40     	; 0xede <main+0xf2>

      eeprom_write_byte(&abEEPROM[EEPROM_SW_DAY],      SW_DAY);          // write date of SW in EEPROM
     eb6:	61 e0       	ldi	r22, 0x01	; 1
     eb8:	87 e0       	ldi	r24, 0x07	; 7
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	61 d5       	rcall	.+2754   	; 0x1980 <eeprom_write_byte>
      eeprom_write_byte(&abEEPROM[EEPROM_SW_MONTH],    SW_MONTH);
     ebe:	66 e0       	ldi	r22, 0x06	; 6
     ec0:	88 e0       	ldi	r24, 0x08	; 8
     ec2:	90 e0       	ldi	r25, 0x00	; 0
      eeprom_write_byte(&abEEPROM[EEPROM_SW_YEAR],     SW_YEAR);
     ec4:	5d d5       	rcall	.+2746   	; 0x1980 <eeprom_write_byte>
     ec6:	66 e0       	ldi	r22, 0x06	; 6
     ec8:	89 e0       	ldi	r24, 0x09	; 9
    }

    vSetState(THR_STATE_INIT, &rSlot);
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	59 d5       	rcall	.+2738   	; 0x1980 <eeprom_write_byte>
     ece:	64 e0       	ldi	r22, 0x04	; 4
     ed0:	8a e0       	ldi	r24, 0x0A	; 10
     ed2:	90 e0       	ldi	r25, 0x00	; 0
    rSlot.adr   = eeprom_read_byte(&abEEPROM[EEPROM_ADR_LOCO_LB]);
     ed4:	55 d5       	rcall	.+2730   	; 0x1980 <eeprom_write_byte>
     ed6:	60 e1       	ldi	r22, 0x10	; 16
     ed8:	8b e0       	ldi	r24, 0x0B	; 11
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	51 d5       	rcall	.+2722   	; 0x1980 <eeprom_write_byte>
     ede:	68 ec       	ldi	r22, 0xC8	; 200
    rSlot.adr2  = eeprom_read_byte(&abEEPROM[EEPROM_ADR_LOCO_HB]);
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	59 da       	rcall	.-2894   	; 0x398 <vSetState>
     ee6:	83 e0       	ldi	r24, 0x03	; 3
     ee8:	90 e0       	ldi	r25, 0x00	; 0
    rSlot.stat  = eeprom_read_byte(&abEEPROM[EEPROM_DECODER_TYPE]);
     eea:	42 d5       	rcall	.+2692   	; 0x1970 <eeprom_read_byte>
     eec:	c8 ec       	ldi	r28, 0xC8	; 200
     eee:	d0 e0       	ldi	r29, 0x00	; 0
     ef0:	8c 83       	std	Y+4, r24	; 0x04
     ef2:	82 e0       	ldi	r24, 0x02	; 2
  }

  rSlot.id1   = eeprom_read_byte(&abEEPROM[EEPROM_ID1]); // get ID from EEPROM
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	3c d5       	rcall	.+2680   	; 0x1970 <eeprom_read_byte>
     ef8:	89 87       	std	Y+9, r24	; 0x09
     efa:	84 e0       	ldi	r24, 0x04	; 4
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	38 d5       	rcall	.+2672   	; 0x1970 <eeprom_read_byte>
  rSlot.id2   = eeprom_read_byte(&abEEPROM[EEPROM_ID2]);
     f00:	8b 83       	std	Y+3, r24	; 0x03
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	34 d5       	rcall	.+2664   	; 0x1970 <eeprom_read_byte>
     f08:	c8 2f       	mov	r28, r24

  if ((rSlot.id1 & 0x80) || (rSlot.id2 & 0x80))
     f0a:	08 ec       	ldi	r16, 0xC8	; 200
     f0c:	10 e0       	ldi	r17, 0x00	; 0
     f0e:	f8 01       	movw	r30, r16
     f10:	83 87       	std	Z+11, r24	; 0x0b
  { // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    // if no slot ID was programmed, you get the ID "0xff 0xff"
		// or if an unguilty ID was programmed
    // stop program at this point and switch all leds on
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    LED_DDR  |= _BV(LED_GREEN_L); 
     f12:	80 e0       	ldi	r24, 0x00	; 0
    LED_PORT |= _BV(LED_GREEN_L); 
     f14:	90 e0       	ldi	r25, 0x00	; 0
    LED_DDR  |= _BV(LED_GREEN_R); 
     f16:	2c d5       	rcall	.+2648   	; 0x1970 <eeprom_read_byte>
    LED_PORT |= _BV(LED_GREEN_R); 
     f18:	f8 01       	movw	r30, r16
    LED_DDR  |= _BV(LED_RED); 
     f1a:	84 87       	std	Z+12, r24	; 0x0c
    LED_PORT |= _BV(LED_RED);
     f1c:	cc 23       	and	r28, r28
     f1e:	14 f0       	brlt	.+4      	; 0xf24 <main+0x138>

  /***************************************/
  //  init loconet
  /***************************************/

  initLocoNet(&RxBuffer) ;
     f20:	88 23       	and	r24, r24
     f22:	3c f4       	brge	.+14     	; 0xf32 <main+0x146>
     f24:	a3 9a       	sbi	0x14, 3	; 20

  /***************************************/
  //  init keys and timer
  /***************************************/

  initKeys();
     f26:	ab 9a       	sbi	0x15, 3	; 21
     f28:	a2 9a       	sbi	0x14, 2	; 20
  initTimer();
     f2a:	aa 9a       	sbi	0x15, 2	; 21
 
  addTimerAction(&MessageTimer, 0, MessageTimerAction, 0, TIMER_SLOW) ;
     f2c:	a4 9a       	sbi	0x14, 4	; 20
     f2e:	ac 9a       	sbi	0x15, 4	; 21
     f30:	ff cf       	rjmp	.-2      	; 0xf30 <main+0x144>
     f32:	86 ed       	ldi	r24, 0xD6	; 214
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	ae d4       	rcall	.+2396   	; 0x1894 <initLocoNet>
  //  set state and start interrupts
  /***************************************/

  sei();

  if (bThrState < THR_STATE_SELFTEST)
     f38:	af d9       	rcall	.-3234   	; 0x298 <initKeys>
     f3a:	fd d2       	rcall	.+1530   	; 0x1536 <initTimer>
     f3c:	00 e0       	ldi	r16, 0x00	; 0
     f3e:	20 e0       	ldi	r18, 0x00	; 0
  {
    // if a address for a loco is available, show blinking state
    if ((rSlot.adr != 0) || (rSlot.adr2 != 0))
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	4c e0       	ldi	r20, 0x0C	; 12
     f44:	52 e0       	ldi	r21, 0x02	; 2
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	8a ea       	ldi	r24, 0xAA	; 170
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	01 d3       	rcall	.+1538   	; 0x1550 <addTimerAction>
    {
      vSetState(THR_STATE_RECONNECT_GET_SLOT, &rSlot);
     f4e:	78 94       	sei
     f50:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <bThrState>
     f54:	84 36       	cpi	r24, 0x64	; 100
     f56:	88 f5       	brcc	.+98     	; 0xfba <main+0x1ce>
    }
    else
    {
      vSetState(THR_STATE_UNCONNECTED, &rSlot);
     f58:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <rSlot+0x4>
     f5c:	81 11       	cpse	r24, r1
    }

    while (bit_is_clear(ACSR, ACO))     // wait for start of loconet
     f5e:	04 c0       	rjmp	.+8      	; 0xf68 <main+0x17c>
    {
      processTimerActions();
     f60:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <rSlot+0x9>
    else
    {
      vSetState(THR_STATE_UNCONNECTED, &rSlot);
    }

    while (bit_is_clear(ACSR, ACO))     // wait for start of loconet
     f64:	88 23       	and	r24, r24
      processTimerActions();
    }
    // loconet is available, now
    for (bCount =0;bCount < 50;bCount++)
    {
      delayTimer( 10 );                 // wait a little bit longer
     f66:	29 f0       	breq	.+10     	; 0xf72 <main+0x186>
     f68:	68 ec       	ldi	r22, 0xC8	; 200
     f6a:	70 e0       	ldi	r23, 0x00	; 0
      processTimerActions();
     f6c:	84 e1       	ldi	r24, 0x14	; 20
     f6e:	14 da       	rcall	.-3032   	; 0x398 <vSetState>
     f70:	04 c0       	rjmp	.+8      	; 0xf7a <main+0x18e>
    while (bit_is_clear(ACSR, ACO))     // wait for start of loconet
    {
      processTimerActions();
    }
    // loconet is available, now
    for (bCount =0;bCount < 50;bCount++)
     f72:	68 ec       	ldi	r22, 0xC8	; 200
    {
      delayTimer( 10 );                 // wait a little bit longer
      processTimerActions();
    }

    if (rSlot.adr)                      // wait for a pseudo random time
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	80 e2       	ldi	r24, 0x20	; 32
     f78:	0f da       	rcall	.-3042   	; 0x398 <vSetState>
    {
      delayTimer(rSlot.adr);
     f7a:	45 99       	sbic	0x08, 5	; 8
     f7c:	39 c0       	rjmp	.+114    	; 0xff0 <main+0x204>
    }

    if (rSlot.adr2)
     f7e:	19 d3       	rcall	.+1586   	; 0x15b2 <processTimerActions>
     f80:	45 9b       	sbis	0x08, 5	; 8
    {
      delayTimer(rSlot.adr2);
     f82:	fd cf       	rjmp	.-6      	; 0xf7e <main+0x192>
     f84:	35 c0       	rjmp	.+106    	; 0xff0 <main+0x204>
     f86:	8a e0       	ldi	r24, 0x0A	; 10
    }

    // if a address for a loco is available, try to reconnect
    if (bThrState == THR_STATE_RECONNECT_GET_SLOT)
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	08 d3       	rcall	.+1552   	; 0x159c <delayTimer>
     f8c:	12 d3       	rcall	.+1572   	; 0x15b2 <processTimerActions>
     f8e:	c1 50       	subi	r28, 0x01	; 1
    {
      sendLocoNetAdr(&rSlot);
     f90:	d1 f7       	brne	.-12     	; 0xf86 <main+0x19a>
     f92:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <rSlot+0x4>
     f96:	88 23       	and	r24, r24
     f98:	11 f0       	breq	.+4      	; 0xf9e <main+0x1b2>
    }
  }
  else
  {
    sendLocoNetFredCd( bCount );
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	ff d2       	rcall	.+1534   	; 0x159c <delayTimer>
     f9e:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <rSlot+0x9>
  while (1)
  {
	  
	  
	for (int i = 0; i < NUMBER_OF_SLOTS; i++) {  
		vProcessRxLoconetMessage(&rSlot);
     fa2:	88 23       	and	r24, r24
     fa4:	11 f0       	breq	.+4      	; 0xfaa <main+0x1be>
     fa6:	90 e0       	ldi	r25, 0x00	; 0
		vProcessKey(&rSlot);
     fa8:	f9 d2       	rcall	.+1522   	; 0x159c <delayTimer>
     faa:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <bThrState>
     fae:	84 31       	cpi	r24, 0x14	; 20
		vProcessRxLoconetMessage(&rSlot);
     fb0:	31 f4       	brne	.+12     	; 0xfbe <main+0x1d2>
     fb2:	88 ec       	ldi	r24, 0xC8	; 200
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	36 db       	rcall	.-2452   	; 0x624 <sendLocoNetAdr>

		if (bFrediVersion == FREDI_VERSION_ANALOG) {
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <main+0x1d2>
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	52 db       	rcall	.-2396   	; 0x662 <sendLocoNetFredCd>
     fbe:	88 ec       	ldi	r24, 0xC8	; 200
			vProcessPoti(&rSlot);
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	1c de       	rcall	.-968    	; 0xbfc <vProcessRxLoconetMessage>
     fc4:	88 ec       	ldi	r24, 0xC8	; 200
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	9c db       	rcall	.-2248   	; 0x702 <vProcessKey>
		}
		else
		{
			vProcessEncoder(&rSlot);
     fca:	88 ec       	ldi	r24, 0xC8	; 200
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	16 de       	rcall	.-980    	; 0xbfc <vProcessRxLoconetMessage>
     fd0:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <bFrediVersion>
		}
		vProcessRxLoconetMessage(&rSlot);
     fd4:	83 30       	cpi	r24, 0x03	; 3
     fd6:	21 f4       	brne	.+8      	; 0xfe0 <main+0x1f4>
     fd8:	88 ec       	ldi	r24, 0xC8	; 200
		processTimerActions();
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	2d dd       	rcall	.-1446   	; 0xa38 <vProcessPoti>
     fde:	03 c0       	rjmp	.+6      	; 0xfe6 <main+0x1fa>
 * ARGUMENTS   : none
 * RETURN VALUE: int, never reached, cause of endless loop
 * NOTES       :   -
 *******************************************************FunctionHeaderEnd******/
int main(void)
{
     fe0:	88 ec       	ldi	r24, 0xC8	; 200
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	b0 dc       	rcall	.-1696   	; 0x946 <vProcessEncoder>
     fe6:	88 ec       	ldi	r24, 0xC8	; 200
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	08 de       	rcall	.-1008   	; 0xbfc <vProcessRxLoconetMessage>
     fec:	e2 d2       	rcall	.+1476   	; 0x15b2 <processTimerActions>
     fee:	e7 cf       	rjmp	.-50     	; 0xfbe <main+0x1d2>
     ff0:	c2 e3       	ldi	r28, 0x32	; 50
     ff2:	c9 cf       	rjmp	.-110    	; 0xf86 <main+0x19a>

00000ff4 <potAdcPowerOff>:
}

// functions -------------------------------------------------------------------

void potAdcPowerOff(void) {
  ADCSRA = (0<<ADEN); // disable ADC
     ff4:	16 b8       	out	0x06, r1	; 6
     ff6:	08 95       	ret

00000ff8 <potAdcInit>:
    PRR   &= ~(1<<PRADC); // enable ADC in Power Reduction Register.
    DIDR0 |= (1<<ADC0D);  // disable digital input buffer to reduce
                          // power consumption
  #endif

  ADMUX  = (0<<REFS1) | (1<<REFS0) // AVCC pin as reference
     ff8:	80 e4       	ldi	r24, 0x40	; 64
     ffa:	87 b9       	out	0x07, r24	; 7
    | defined(__AVR_ATmega48P__) | defined(__AVR_ATmega88__)   \
    | defined(__AVR_ATmega88A__) | defined(__AVR_ATmega88P__)  \
    | defined(__AVR_ATmega168__) | defined(__AVR_ATmega168A__) \
    | defined(__AVR_ATmega168P__)| defined(__AVR_ATmega328__)  \
    | defined(__AVR_ATmega328P__) | defined(__AVR_ATmega16__)
    ADCSRA = (1<<ADEN)  // Enable ADC
     ffc:	86 ec       	ldi	r24, 0xC6	; 198
     ffe:	86 b9       	out	0x06, r24	; 6
           | ADPS;      // ADC precaler selection
  #else
    #error "unknown mcu"
  #endif

  while (bit_is_set(ADCSRA, ADSC)); // wait for measurement
    1000:	36 99       	sbic	0x06, 6	; 6
    1002:	fe cf       	rjmp	.-4      	; 0x1000 <potAdcInit+0x8>
  ADCH;                             // throw away first analog value
    1004:	85 b1       	in	r24, 0x05	; 5
  potAdcSpeedValue = 0;             // ignore first analog value
    1006:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <potAdcSpeedValue>
  ADCSRA      |= _BV(ADSC);         // start new measurement
    100a:	36 9a       	sbi	0x06, 6	; 6
    100c:	08 95       	ret

0000100e <potAdcTimerAction>:
  #define NB_SAMPLES_LOG2 0 // log to basis 2 of number of samples
                            // 3: take arithmetic mean of 8 samples
                            // 2: four samples
                            // 0: single sample

  if (bit_is_clear(ADCSRA, ADSC)) // measurement done
    100e:	36 99       	sbic	0x06, 6	; 6
    1010:	46 c0       	rjmp	.+140    	; 0x109e <potAdcTimerAction+0x90>
  {
    potAdcRawValue = ADCW;
    1012:	84 b1       	in	r24, 0x04	; 4
    1014:	95 b1       	in	r25, 0x05	; 5
    1016:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <potAdcRawValue+0x1>
    101a:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <potAdcRawValue>
    ADCSRA |= _BV(ADSC);          // start new measurement
    101e:	36 9a       	sbi	0x06, 6	; 6

    #if NB_SAMPLES_LOG2 == 0

      potAdcSpeedValue
                = timeFilter( mapSpeedVal( deltaFilter( potAdcRawValue ) ) );
    1020:	40 91 9c 00 	lds	r20, 0x009C	; 0x80009c <potAdcRawValue>
    1024:	50 91 9d 00 	lds	r21, 0x009D	; 0x80009d <potAdcRawValue+0x1>
                            // 0: disable filter (for testing)

  static uint16_t deltaFilterState = 0;

  int16_t delta = abs( (int16_t)deltaFilterState - (int16_t)adcVal);
  if( delta >= FILTER_DELTA ) {
    1028:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <deltaFilterState.1786>
    102c:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <deltaFilterState.1786+0x1>
    1030:	84 1b       	sub	r24, r20
    1032:	95 0b       	sbc	r25, r21
    1034:	9c 01       	movw	r18, r24
    1036:	22 f4       	brpl	.+8      	; 0x1040 <potAdcTimerAction+0x32>
    1038:	22 27       	eor	r18, r18
    103a:	33 27       	eor	r19, r19
    103c:	28 1b       	sub	r18, r24
    103e:	39 0b       	sbc	r19, r25
    1040:	23 30       	cpi	r18, 0x03	; 3
    1042:	31 05       	cpc	r19, r1
    1044:	24 f0       	brlt	.+8      	; 0x104e <potAdcTimerAction+0x40>
    deltaFilterState = adcVal;
    1046:	50 93 9b 00 	sts	0x009B, r21	; 0x80009b <deltaFilterState.1786+0x1>
    104a:	40 93 9a 00 	sts	0x009A, r20	; 0x80009a <deltaFilterState.1786>
 * Map pot values 0..1023 to dcc/loconet speed 0,2..126
 * @param speed
 * @return
 */
static inline uint8_t mapSpeedVal( uint16_t adcValue ) {
  uint8_t speedVal = (uint8_t) (adcValue >> 3);
    104e:	20 91 9a 00 	lds	r18, 0x009A	; 0x80009a <deltaFilterState.1786>
    1052:	30 91 9b 00 	lds	r19, 0x009B	; 0x80009b <deltaFilterState.1786+0x1>
    1056:	36 95       	lsr	r19
    1058:	27 95       	ror	r18
    105a:	36 95       	lsr	r19
    105c:	27 95       	ror	r18
    105e:	36 95       	lsr	r19
    1060:	27 95       	ror	r18
    1062:	82 2f       	mov	r24, r18
  if( speedVal > 0 ) {
    1064:	22 23       	and	r18, r18
    1066:	11 f0       	breq	.+4      	; 0x106c <potAdcTimerAction+0x5e>
    speedVal++; //skip E_STOP
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	82 0f       	add	r24, r18
                         // time. potAdcTimerAction() is called every
                         // KEY_POLL_TIME ms. (-> sysdef.h)

  static uint8_t timeFilterState = 0;
  static uint8_t count = 0;
  if( count > 0 ) {
    106c:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <count.1796>
    1070:	99 23       	and	r25, r25
    1072:	29 f0       	breq	.+10     	; 0x107e <potAdcTimerAction+0x70>
    count--;
    1074:	91 50       	subi	r25, 0x01	; 1
    1076:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <count.1796>
  }
  if( count == 0 && speedVal != timeFilterState ) {
    107a:	91 11       	cpse	r25, r1
    107c:	0c c0       	rjmp	.+24     	; 0x1096 <potAdcTimerAction+0x88>
    107e:	8f 37       	cpi	r24, 0x7F	; 127
    1080:	08 f0       	brcs	.+2      	; 0x1084 <potAdcTimerAction+0x76>
    1082:	8e e7       	ldi	r24, 0x7E	; 126
    1084:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <timeFilterState.1795>
    1088:	98 17       	cp	r25, r24
    108a:	29 f0       	breq	.+10     	; 0x1096 <potAdcTimerAction+0x88>
    timeFilterState = speedVal;
    108c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <timeFilterState.1795>
    count = FILTER_TIME;
    1090:	8a e0       	ldi	r24, 0x0A	; 10
    1092:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <count.1796>
  }
  return timeFilterState;
    1096:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <timeFilterState.1795>
    ADCSRA |= _BV(ADSC);          // start new measurement

    #if NB_SAMPLES_LOG2 == 0

      potAdcSpeedValue
                = timeFilter( mapSpeedVal( deltaFilter( potAdcRawValue ) ) );
    109a:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <potAdcSpeedValue>
    109e:	08 95       	ret

000010a0 <__vector_5>:
* incoming data.
*
**************************************************************************/

ISR(LN_SB_SIGNAL)
{
    10a0:	1f 92       	push	r1
    10a2:	0f 92       	push	r0
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	0f 92       	push	r0
    10a8:	11 24       	eor	r1, r1
    10aa:	8f 93       	push	r24
    10ac:	9f 93       	push	r25
    // Disable the Input Comparator Interrupt
  cbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT );     
    10ae:	89 b7       	in	r24, 0x39	; 57
    10b0:	8f 7d       	andi	r24, 0xDF	; 223
    10b2:	89 bf       	out	0x39, r24	; 57
#ifdef RX_MONITOR
  cbi(PORTD, PD1);
#endif

    // Get the Current Timer1 Count and Add the offset for the Compare target
  lnCompareTarget = LN_TMR_INP_CAPT_REG + LN_TIMER_RX_START_PERIOD ;
    10b4:	86 b5       	in	r24, 0x26	; 38
    10b6:	97 b5       	in	r25, 0x27	; 39
    10b8:	89 56       	subi	r24, 0x69	; 105
    10ba:	9d 4f       	sbci	r25, 0xFD	; 253
    10bc:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <lnCompareTarget+0x1>
    10c0:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <lnCompareTarget>
  LN_TMR_OUTP_CAPT_REG = lnCompareTarget ;
    10c4:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <lnCompareTarget>
    10c8:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <lnCompareTarget+0x1>
    10cc:	9b bd       	out	0x2b, r25	; 43
    10ce:	8a bd       	out	0x2a, r24	; 42

    // Clear the current Compare interrupt status bit and enable the Compare interrupt
  sbi(LN_TMR_INT_STATUS_REG, LN_TMR_INT_STATUS_BIT) ;
    10d0:	88 b7       	in	r24, 0x38	; 56
    10d2:	80 61       	ori	r24, 0x10	; 16
    10d4:	88 bf       	out	0x38, r24	; 56
  sbi(LN_TMR_INT_ENABLE_REG, LN_TMR_INT_ENABLE_BIT) ; 
    10d6:	89 b7       	in	r24, 0x39	; 57
    10d8:	80 61       	ori	r24, 0x10	; 16
    10da:	89 bf       	out	0x39, r24	; 57

    // Set the State to indicate that we have begun to Receive
  lnState = LN_ST_RX ;
    10dc:	84 e0       	ldi	r24, 0x04	; 4
    10de:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <lnState>

    // Reset the bit counter so that on first increment it is on 0
  lnBitCount = 0;
    10e2:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <lnBitCount>
}
    10e6:	9f 91       	pop	r25
    10e8:	8f 91       	pop	r24
    10ea:	0f 90       	pop	r0
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	0f 90       	pop	r0
    10f0:	1f 90       	pop	r1
    10f2:	18 95       	reti

000010f4 <__vector_6>:
* it samples the bit and shifts it into the buffer.
*
**************************************************************************/

ISR(LN_TMR_SIGNAL)     /* signal handler for timer0 overflow */
{
    10f4:	1f 92       	push	r1
    10f6:	0f 92       	push	r0
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	0f 92       	push	r0
    10fc:	11 24       	eor	r1, r1
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	2f 93       	push	r18
    1104:	3f 93       	push	r19
    1106:	4f 93       	push	r20
    1108:	5f 93       	push	r21
    110a:	6f 93       	push	r22
    110c:	7f 93       	push	r23
    110e:	8f 93       	push	r24
    1110:	9f 93       	push	r25
    1112:	af 93       	push	r26
    1114:	bf 93       	push	r27
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	ef 93       	push	r30
    111c:	ff 93       	push	r31
    // Advance the Compare Target
  lnCompareTarget += LN_TIMER_RX_RELOAD_PERIOD ;
    111e:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <lnCompareTarget>
    1122:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <lnCompareTarget+0x1>
    1126:	86 54       	subi	r24, 0x46	; 70
    1128:	9e 4f       	sbci	r25, 0xFE	; 254
    112a:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <lnCompareTarget+0x1>
    112e:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <lnCompareTarget>
  LN_TMR_OUTP_CAPT_REG = lnCompareTarget ;
    1132:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <lnCompareTarget>
    1136:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <lnCompareTarget+0x1>
    113a:	9b bd       	out	0x2b, r25	; 43
    113c:	8a bd       	out	0x2a, r24	; 42

  lnBitCount++;                         //Increment bit_counter
    113e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <lnBitCount>
    1142:	8f 5f       	subi	r24, 0xFF	; 255
    1144:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <lnBitCount>

    // Are we in the RX State
  if( lnState == LN_ST_RX )                // Are we in RX mode
    1148:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <lnState>
    114c:	84 30       	cpi	r24, 0x04	; 4
    114e:	09 f0       	breq	.+2      	; 0x1152 <__vector_6+0x5e>
    1150:	3f c0       	rjmp	.+126    	; 0x11d0 <__vector_6+0xdc>
  {
    if( lnBitCount < 9)               // Are we in the Stop Bits phase
    1152:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <lnBitCount>
    1156:	89 30       	cpi	r24, 0x09	; 9
    1158:	68 f4       	brcc	.+26     	; 0x1174 <__vector_6+0x80>
    {
      lnCurrentByte >>= 1;
    115a:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <lnCurrentByte>
    115e:	86 95       	lsr	r24
    1160:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <lnCurrentByte>
#ifdef LN_SW_UART_RX_INVERTED
      if( bit_is_clear(LN_RX_PORT, LN_RX_BIT))
#else
      if( bit_is_set(LN_RX_PORT, LN_RX_BIT))
    1164:	45 9b       	sbis	0x08, 5	; 8
    1166:	ec c0       	rjmp	.+472    	; 0x1340 <__vector_6+0x24c>
#endif

        lnCurrentByte |= 0x80;
    1168:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <lnCurrentByte>
    116c:	80 68       	ori	r24, 0x80	; 128
    116e:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <lnCurrentByte>
    1172:	e6 c0       	rjmp	.+460    	; 0x1340 <__vector_6+0x24c>
      return ;
    }

      // Clear the Start Bit Interrupt Status Flag and Enable ready to 
      // detect the next Start Bit
    sbi( LN_SB_INT_STATUS_REG, LN_SB_INT_STATUS_BIT ) ;
    1174:	88 b7       	in	r24, 0x38	; 56
    1176:	80 62       	ori	r24, 0x20	; 32
    1178:	88 bf       	out	0x38, r24	; 56
    sbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT ) ;
    117a:	89 b7       	in	r24, 0x39	; 57
    117c:	80 62       	ori	r24, 0x20	; 32
    117e:	89 bf       	out	0x39, r24	; 57

      // If the Stop bit is not Set then we have a Framing Error
#ifdef LN_SW_UART_RX_INVERTED
    if( bit_is_set(LN_RX_PORT,LN_RX_BIT) )
#else
    if( bit_is_clear(LN_RX_PORT,LN_RX_BIT) )
    1180:	45 99       	sbic	0x08, 5	; 8
    1182:	0a c0       	rjmp	.+20     	; 0x1198 <__vector_6+0xa4>
#endif
      lnRxBuffer->Stats.RxErrors++ ;
    1184:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <lnRxBuffer>
    1188:	f0 91 8e 01 	lds	r31, 0x018E	; 0x80018e <lnRxBuffer+0x1>
    118c:	e9 57       	subi	r30, 0x79	; 121
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	80 81       	ld	r24, Z
    1192:	8f 5f       	subi	r24, 0xFF	; 255
    1194:	80 83       	st	Z, r24
    1196:	17 c0       	rjmp	.+46     	; 0x11c6 <__vector_6+0xd2>

    else
        // Put the received byte in the buffer
      addByteLnBuf( lnRxBuffer, lnCurrentByte ) ;
    1198:	40 91 8a 01 	lds	r20, 0x018A	; 0x80018a <lnCurrentByte>
    119c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <lnRxBuffer>
    11a0:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <lnRxBuffer+0x1>
void addByteLnBuf( LnBuf *Buffer, byte newByte );
void addMsgLnBuf( LnBuf *Buffer, volatile lnMsg * newMsg );
#else
static inline void addByteLnBuf( LnBuf *Buffer, byte newByte )
{
	Buffer->Buf[ Buffer->WriteIndex++ ] = newByte ;
    11a4:	fc 01       	movw	r30, r24
    11a6:	e0 58       	subi	r30, 0x80	; 128
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	30 81       	ld	r19, Z
    11ac:	21 e0       	ldi	r18, 0x01	; 1
    11ae:	23 0f       	add	r18, r19
    11b0:	20 83       	st	Z, r18
    11b2:	fc 01       	movw	r30, r24
    11b4:	e3 0f       	add	r30, r19
    11b6:	f1 1d       	adc	r31, r1
    11b8:	40 83       	st	Z, r20
	if( Buffer->WriteIndex >= LN_BUF_SIZE )
    11ba:	22 23       	and	r18, r18
    11bc:	24 f4       	brge	.+8      	; 0x11c6 <__vector_6+0xd2>
		Buffer->WriteIndex = 0 ;
    11be:	fc 01       	movw	r30, r24
    11c0:	e0 58       	subi	r30, 0x80	; 128
    11c2:	ff 4f       	sbci	r31, 0xFF	; 255
    11c4:	10 82       	st	Z, r1

    lnBitCount = 0 ;
    11c6:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <lnBitCount>
    lnState = LN_ST_CD_BACKOFF ;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <lnState>
  }


    // Are we in the TX State
  if( lnState == LN_ST_TX )
    11d0:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <lnState>
    11d4:	83 30       	cpi	r24, 0x03	; 3
    11d6:	09 f0       	breq	.+2      	; 0x11da <__vector_6+0xe6>
    11d8:	7e c0       	rjmp	.+252    	; 0x12d6 <__vector_6+0x1e2>
  #endif
#else  // inverted is the normal case, just a NPN between TX pin and LN:
  #ifdef LN_SW_UART_RX_INVERTED
    if( ( ( LN_TX_PORT >> LN_TX_BIT ) & 0x01 ) != ( ( LN_RX_PORT >> LN_RX_BIT ) & 0x01 ) )
  #else
    if( ( ( LN_TX_PORT >> LN_TX_BIT ) & 0x01 ) == ( ( LN_RX_PORT >> LN_RX_BIT ) & 0x01 ) )
    11da:	92 b3       	in	r25, 0x12	; 18
    11dc:	88 b1       	in	r24, 0x08	; 8
    11de:	92 95       	swap	r25
    11e0:	9f 70       	andi	r25, 0x0F	; 15
    11e2:	82 95       	swap	r24
    11e4:	86 95       	lsr	r24
    11e6:	87 70       	andi	r24, 0x07	; 7
    11e8:	89 27       	eor	r24, r25
    11ea:	80 fd       	sbrc	r24, 0
    11ec:	06 c0       	rjmp	.+12     	; 0x11fa <__vector_6+0x106>
  #endif
#endif
    {
      lnBitCount = 0 ;
    11ee:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <lnBitCount>
      lnState = LN_ST_TX_COLLISION ;
    11f2:	82 e0       	ldi	r24, 0x02	; 2
    11f4:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <lnState>
    11f8:	6e c0       	rjmp	.+220    	; 0x12d6 <__vector_6+0x1e2>
    }
      // Send each Bit
    else if( lnBitCount < 9)
    11fa:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <lnBitCount>
    11fe:	89 30       	cpi	r24, 0x09	; 9
    1200:	68 f4       	brcc	.+26     	; 0x121c <__vector_6+0x128>
    {
#ifdef TX_START_MEASUREMENT
			cbi(TX_MEASUREMENT_PORT, TX_MEASUREMENT_PIN);
#endif
			
      if( lnCurrentByte & 0x01 )
    1202:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <lnCurrentByte>
    1206:	80 ff       	sbrs	r24, 0
    1208:	02 c0       	rjmp	.+4      	; 0x120e <__vector_6+0x11a>
        LN_SW_UART_SET_TX_HIGH
    120a:	94 98       	cbi	0x12, 4	; 18
    120c:	01 c0       	rjmp	.+2      	; 0x1210 <__vector_6+0x11c>

      else
        LN_SW_UART_SET_TX_LOW
    120e:	94 9a       	sbi	0x12, 4	; 18

      lnCurrentByte >>= 1;
    1210:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <lnCurrentByte>
    1214:	86 95       	lsr	r24
    1216:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <lnCurrentByte>
    121a:	5d c0       	rjmp	.+186    	; 0x12d6 <__vector_6+0x1e2>
    }
      // When the Data Bits are done, generate stop-bit
    else if( lnBitCount ==  9)
    121c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <lnBitCount>
    1220:	89 30       	cpi	r24, 0x09	; 9
    1222:	11 f4       	brne	.+4      	; 0x1228 <__vector_6+0x134>
      LN_SW_UART_SET_TX_HIGH
    1224:	94 98       	cbi	0x12, 4	; 18
    1226:	57 c0       	rjmp	.+174    	; 0x12d6 <__vector_6+0x1e2>

      // Any more bytes in buffer
    else if( ++lnTxIndex < lnTxLength )
    1228:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <lnTxIndex>
    122c:	8f 5f       	subi	r24, 0xFF	; 255
    122e:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <lnTxIndex>
    1232:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <lnTxLength>
    1236:	89 17       	cp	r24, r25
    1238:	e8 f4       	brcc	.+58     	; 0x1274 <__vector_6+0x180>
    {
        // Setup for the next byte
      lnBitCount = 0 ;
    123a:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <lnBitCount>
      lnCurrentByte = lnTxData->data[ lnTxIndex ] ;
    123e:	e0 91 91 01 	lds	r30, 0x0191	; 0x800191 <lnTxData>
    1242:	f0 91 92 01 	lds	r31, 0x0192	; 0x800192 <lnTxData+0x1>
    1246:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <lnTxIndex>
    124a:	e8 0f       	add	r30, r24
    124c:	f1 1d       	adc	r31, r1
    124e:	80 81       	ld	r24, Z
    1250:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <lnCurrentByte>

        // Begin the Start Bit
      LN_SW_UART_SET_TX_LOW
    1254:	94 9a       	sbi	0x12, 4	; 18
			sbi(TX_MEASUREMENT_PORT, TX_MEASUREMENT_PIN);
#endif

        // Get the Current Timer1 Count and Add the offset for the Compare target
        // added adjustment value for bugfix (Olaf Funke)
      lnCompareTarget = LN_TMR_COUNT_REG + LN_TIMER_TX_RELOAD_PERIOD - LN_TIMER_TX_RELOAD_ADJUST; 
    1256:	8c b5       	in	r24, 0x2c	; 44
    1258:	9d b5       	in	r25, 0x2d	; 45
    125a:	88 5a       	subi	r24, 0xA8	; 168
    125c:	9e 4f       	sbci	r25, 0xFE	; 254
    125e:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <lnCompareTarget+0x1>
    1262:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <lnCompareTarget>
      LN_TMR_OUTP_CAPT_REG = lnCompareTarget ;
    1266:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <lnCompareTarget>
    126a:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <lnCompareTarget+0x1>
    126e:	9b bd       	out	0x2b, r25	; 43
    1270:	8a bd       	out	0x2a, r24	; 42
    1272:	31 c0       	rjmp	.+98     	; 0x12d6 <__vector_6+0x1e2>
    }
    else
    {
        // Successfully Sent all bytes in the buffer
        // so set the Packet Status to Done
      lnTxSuccess = 1 ;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <lnTxSuccess>

        // Now copy the TX Packet into the RX Buffer
      addMsgLnBuf( lnRxBuffer, lnTxData );
    127a:	c0 91 91 01 	lds	r28, 0x0191	; 0x800191 <lnTxData>
    127e:	d0 91 92 01 	lds	r29, 0x0192	; 0x800192 <lnTxData+0x1>
    1282:	00 91 8d 01 	lds	r16, 0x018D	; 0x80018d <lnRxBuffer>
    1286:	10 91 8e 01 	lds	r17, 0x018E	; 0x80018e <lnRxBuffer+0x1>
static inline void addMsgLnBuf( LnBuf *Buffer, volatile lnMsg * newMsg )
{
	byte	Index ;
	byte 	Length ;

	Length = getLnMsgSize( newMsg ) ;
    128a:	ce 01       	movw	r24, r28
    128c:	f6 d2       	rcall	.+1516   	; 0x187a <getLnMsgSize>
	for( Index = 0; Index < Length; Index++ )
    128e:	88 23       	and	r24, r24
    1290:	e9 f0       	breq	.+58     	; 0x12cc <__vector_6+0x1d8>
    1292:	81 50       	subi	r24, 0x01	; 1
    1294:	68 2f       	mov	r22, r24
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	6f 5f       	subi	r22, 0xFF	; 255
    129a:	7f 4f       	sbci	r23, 0xFF	; 255
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0
void addByteLnBuf( LnBuf *Buffer, byte newByte );
void addMsgLnBuf( LnBuf *Buffer, volatile lnMsg * newMsg );
#else
static inline void addByteLnBuf( LnBuf *Buffer, byte newByte )
{
	Buffer->Buf[ Buffer->WriteIndex++ ] = newByte ;
    12a0:	f8 01       	movw	r30, r16
    12a2:	e0 58       	subi	r30, 0x80	; 128
    12a4:	ff 4f       	sbci	r31, 0xFF	; 255
	byte	Index ;
	byte 	Length ;

	Length = getLnMsgSize( newMsg ) ;
	for( Index = 0; Index < Length; Index++ )
		addByteLnBuf(Buffer, newMsg->data[ Index ] ) ;
    12a6:	de 01       	movw	r26, r28
    12a8:	a8 0f       	add	r26, r24
    12aa:	b9 1f       	adc	r27, r25
    12ac:	4c 91       	ld	r20, X
void addByteLnBuf( LnBuf *Buffer, byte newByte );
void addMsgLnBuf( LnBuf *Buffer, volatile lnMsg * newMsg );
#else
static inline void addByteLnBuf( LnBuf *Buffer, byte newByte )
{
	Buffer->Buf[ Buffer->WriteIndex++ ] = newByte ;
    12ae:	30 81       	ld	r19, Z
    12b0:	21 e0       	ldi	r18, 0x01	; 1
    12b2:	23 0f       	add	r18, r19
    12b4:	20 83       	st	Z, r18
    12b6:	d8 01       	movw	r26, r16
    12b8:	a3 0f       	add	r26, r19
    12ba:	b1 1d       	adc	r27, r1
    12bc:	4c 93       	st	X, r20
	if( Buffer->WriteIndex >= LN_BUF_SIZE )
    12be:	22 23       	and	r18, r18
    12c0:	0c f4       	brge	.+2      	; 0x12c4 <__vector_6+0x1d0>
		Buffer->WriteIndex = 0 ;
    12c2:	10 82       	st	Z, r1
    12c4:	01 96       	adiw	r24, 0x01	; 1
{
	byte	Index ;
	byte 	Length ;

	Length = getLnMsgSize( newMsg ) ;
	for( Index = 0; Index < Length; Index++ )
    12c6:	86 17       	cp	r24, r22
    12c8:	97 07       	cpc	r25, r23
    12ca:	69 f7       	brne	.-38     	; 0x12a6 <__vector_6+0x1b2>

        // Begin CD Backoff state
      lnBitCount = 0 ;
    12cc:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <lnBitCount>
      lnState = LN_ST_CD_BACKOFF ;      
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <lnState>
    }
  }

    // Note we may have got here from a failed TX cycle, if so BitCount will be 0
  if( lnState == LN_ST_TX_COLLISION )
    12d6:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <lnState>
    12da:	82 30       	cpi	r24, 0x02	; 2
    12dc:	c9 f4       	brne	.+50     	; 0x1310 <__vector_6+0x21c>
  {
    if( lnBitCount == 0 )
    12de:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <lnBitCount>
    12e2:	81 11       	cpse	r24, r1
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <__vector_6+0x1f6>
    {
        // Pull the TX Line low to indicate Collision
      LN_SW_UART_SET_TX_LOW
    12e6:	94 9a       	sbi	0x12, 4	; 18
    12e8:	13 c0       	rjmp	.+38     	; 0x1310 <__vector_6+0x21c>
#ifdef COLLISION_MONITOR
      cbi( COLLISION_MONITOR_PORT,COLLISION_MONITOR_BIT ) ;
#endif
    }
    else if( lnBitCount >= LN_COLLISION_TICKS )
    12ea:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <lnBitCount>
    12ee:	8f 30       	cpi	r24, 0x0F	; 15
    12f0:	78 f0       	brcs	.+30     	; 0x1310 <__vector_6+0x21c>
    {
        // Release the TX Line
      LN_SW_UART_SET_TX_HIGH
    12f2:	94 98       	cbi	0x12, 4	; 18
#ifdef COLLISION_MONITOR
      sbi( COLLISION_MONITOR_PORT,COLLISION_MONITOR_BIT ) ;
#endif

      lnBitCount = 0 ;
    12f4:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <lnBitCount>
      lnState = LN_ST_CD_BACKOFF ;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <lnState>

      lnRxBuffer->Stats.Collisions++ ;
    12fe:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <lnRxBuffer>
    1302:	f0 91 8e 01 	lds	r31, 0x018E	; 0x80018e <lnRxBuffer+0x1>
    1306:	e5 57       	subi	r30, 0x75	; 117
    1308:	ff 4f       	sbci	r31, 0xFF	; 255
    130a:	80 81       	ld	r24, Z
    130c:	8f 5f       	subi	r24, 0xFF	; 255
    130e:	80 83       	st	Z, r24
    }
  }

  if( lnState == LN_ST_CD_BACKOFF )
    1310:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <lnState>
    1314:	81 30       	cpi	r24, 0x01	; 1
    1316:	a1 f4       	brne	.+40     	; 0x1340 <__vector_6+0x24c>
  {
    if( lnBitCount == 0 )
    1318:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <lnBitCount>
    131c:	81 11       	cpse	r24, r1
    131e:	07 c0       	rjmp	.+14     	; 0x132e <__vector_6+0x23a>
    {
        // Even though we are waiting, other nodes may try and transmit early
        // so Clear the Start Bit Interrupt Status Flag and Enable ready to 
        // detect the next Start Bit
      sbi( LN_SB_INT_STATUS_REG, LN_SB_INT_STATUS_BIT ) ;
    1320:	88 b7       	in	r24, 0x38	; 56
    1322:	80 62       	ori	r24, 0x20	; 32
    1324:	88 bf       	out	0x38, r24	; 56
      sbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT ) ;
    1326:	89 b7       	in	r24, 0x39	; 57
    1328:	80 62       	ori	r24, 0x20	; 32
    132a:	89 bf       	out	0x39, r24	; 57
    132c:	09 c0       	rjmp	.+18     	; 0x1340 <__vector_6+0x24c>
    }
    else if( lnBitCount >= LN_BACKOFF_MAX )
    132e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <lnBitCount>
    1332:	88 33       	cpi	r24, 0x38	; 56
    1334:	28 f0       	brcs	.+10     	; 0x1340 <__vector_6+0x24c>
    { // declare network to free after maximum backoff delay
      lnState = LN_ST_IDLE ;
    1336:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <lnState>
      cbi( LN_TMR_INT_ENABLE_REG, LN_TMR_INT_ENABLE_BIT ) ;
    133a:	89 b7       	in	r24, 0x39	; 57
    133c:	8f 7e       	andi	r24, 0xEF	; 239
    133e:	89 bf       	out	0x39, r24	; 57
    }
  }
}
    1340:	ff 91       	pop	r31
    1342:	ef 91       	pop	r30
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	bf 91       	pop	r27
    134a:	af 91       	pop	r26
    134c:	9f 91       	pop	r25
    134e:	8f 91       	pop	r24
    1350:	7f 91       	pop	r23
    1352:	6f 91       	pop	r22
    1354:	5f 91       	pop	r21
    1356:	4f 91       	pop	r20
    1358:	3f 91       	pop	r19
    135a:	2f 91       	pop	r18
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	0f 90       	pop	r0
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	0f 90       	pop	r0
    1366:	1f 90       	pop	r1
    1368:	18 95       	reti

0000136a <initLocoNetHardware>:
  sbi(TX_MEASUREMENT_DDR, TX_MEASUREMENT_PIN);
  cbi(TX_MEASUREMENT_PORT, TX_MEASUREMENT_PIN);
#endif

	
	lnRxBuffer = RxBuffer ;
    136a:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <lnRxBuffer+0x1>
    136e:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <lnRxBuffer>

    // Set the TX line to Inactive
  LN_SW_UART_SET_TX_HIGH
    1372:	94 98       	cbi	0x12, 4	; 18
  sbi( LN_TX_DDR, LN_TX_BIT ) ;
    1374:	8c 9a       	sbi	0x11, 4	; 17
	ACSR |= (1<<ACBG)|(1<<ACO)|(1<<ACIC);	// turn on comparitor, bandgap, output, input capture
	ADMUX |= (1<<REFS0)|(1<<REFS1)|1;		//choose internal 2.56V source and Chl 1
	TCCR1B = (TCCR1B & 0xF8) | (1<<ICES1) | LN_TMR_PRESCALER ;    		// Set Rising Edge and Timer Clock Source 
#elif (defined wBOARD_FREDI || defined LN_SW_USE_AC_AS_IN_FREDI)
	// Enable Analog Comparator to Trigger the Input Capture unit
	ACSR = (1<<ACI) | (1<<ACIS1) | (1<<ACIS0) | (1<<ACIC) ;
    1376:	87 e1       	ldi	r24, 0x17	; 23
    1378:	88 b9       	out	0x08, r24	; 8
    ACSR = 1<<ACD ;
  #endif
//	TCCR1B |= (1<<ICNC1) ;    		// Enable Noise Canceller 
#endif

  lnState = LN_ST_IDLE ;
    137a:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <lnState>

    //Clear StartBit Interrupt flag
  sbi( LN_SB_INT_STATUS_REG, LN_SB_INT_STATUS_BIT ) ;
    137e:	88 b7       	in	r24, 0x38	; 56
    1380:	80 62       	ori	r24, 0x20	; 32
    1382:	88 bf       	out	0x38, r24	; 56

    //Enable StartBit Interrupt
  sbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT ) ;
    1384:	89 b7       	in	r24, 0x39	; 57
    1386:	80 62       	ori	r24, 0x20	; 32
    1388:	89 bf       	out	0x39, r24	; 57

    // Set Timer Clock Source 
  LN_TMR_CONTROL_REG = (LN_TMR_CONTROL_REG & 0xF8) | LN_TMR_PRESCALER ;
    138a:	8e b5       	in	r24, 0x2e	; 46
    138c:	88 7f       	andi	r24, 0xF8	; 248
    138e:	81 60       	ori	r24, 0x01	; 1
    1390:	8e bd       	out	0x2e, r24	; 46
    1392:	08 95       	ret

00001394 <sendLocoNetPacketTry>:
}


LN_STATUS sendLocoNetPacketTry(lnMsg *TxData, unsigned char ucPrioDelay)
{
    1394:	1f 93       	push	r17
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	ec 01       	movw	r28, r24
  byte  CheckSum ;
  byte  CheckLength ;

  lnTxLength = getLnMsgSize( TxData ) ;
    139c:	16 2f       	mov	r17, r22
    139e:	6d d2       	rcall	.+1242   	; 0x187a <getLnMsgSize>
    13a0:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <lnTxLength>

  // First calculate the checksum as it may not have been done
  CheckLength = lnTxLength - 1 ;
    13a4:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <lnTxLength>
  CheckSum = 0xFF ;

  for( lnTxIndex = 0; lnTxIndex < CheckLength; lnTxIndex++ )
    13a8:	21 50       	subi	r18, 0x01	; 1
    13aa:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <lnTxIndex>
    13ae:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <lnTxIndex>
    13b2:	82 17       	cp	r24, r18
    13b4:	90 f4       	brcc	.+36     	; 0x13da <sendLocoNetPacketTry+0x46>
      CheckSum ^= TxData->data[ lnTxIndex ] ;
    13b6:	9f ef       	ldi	r25, 0xFF	; 255
    13b8:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <lnTxIndex>
    13bc:	fe 01       	movw	r30, r28
    13be:	e8 0f       	add	r30, r24
    13c0:	f1 1d       	adc	r31, r1
    13c2:	80 81       	ld	r24, Z

  // First calculate the checksum as it may not have been done
  CheckLength = lnTxLength - 1 ;
  CheckSum = 0xFF ;

  for( lnTxIndex = 0; lnTxIndex < CheckLength; lnTxIndex++ )
    13c4:	98 27       	eor	r25, r24
    13c6:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <lnTxIndex>
    13ca:	8f 5f       	subi	r24, 0xFF	; 255
    13cc:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <lnTxIndex>
    13d0:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <lnTxIndex>
    13d4:	82 17       	cp	r24, r18
    13d6:	80 f3       	brcs	.-32     	; 0x13b8 <sendLocoNetPacketTry+0x24>

  lnTxLength = getLnMsgSize( TxData ) ;

  // First calculate the checksum as it may not have been done
  CheckLength = lnTxLength - 1 ;
  CheckSum = 0xFF ;
    13d8:	01 c0       	rjmp	.+2      	; 0x13dc <sendLocoNetPacketTry+0x48>

  for( lnTxIndex = 0; lnTxIndex < CheckLength; lnTxIndex++ )
      CheckSum ^= TxData->data[ lnTxIndex ] ;
  
  TxData->data[ CheckLength ] = CheckSum ; 
    13da:	9f ef       	ldi	r25, 0xFF	; 255
    13dc:	fe 01       	movw	r30, r28
    13de:	e2 0f       	add	r30, r18
    13e0:	f1 1d       	adc	r31, r1
  // clip maximum prio delay
  if (ucPrioDelay > LN_BACKOFF_MAX)
    ucPrioDelay = LN_BACKOFF_MAX;

  // if priority delay was waited now, declare net as free for this try
  cli();  // disabling interrupt to avoid confusion by ISR changing lnState while we want to do it
    13e2:	90 83       	st	Z, r25
  if (lnState == LN_ST_CD_BACKOFF)
    13e4:	f8 94       	cli
    13e6:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <lnState>
    13ea:	81 30       	cpi	r24, 0x01	; 1
  {
    if (lnBitCount >= ucPrioDelay)  // Likely we don't want to wait as long as
    13ec:	61 f4       	brne	.+24     	; 0x1406 <sendLocoNetPacketTry+0x72>
    13ee:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <lnBitCount>
    13f2:	19 33       	cpi	r17, 0x39	; 57
    13f4:	08 f0       	brcs	.+2      	; 0x13f8 <sendLocoNetPacketTry+0x64>
    13f6:	18 e3       	ldi	r17, 0x38	; 56
    13f8:	81 17       	cp	r24, r17
    {                               // the timer ISR waits its maximum delay.
      lnState = LN_ST_IDLE ;
    13fa:	28 f0       	brcs	.+10     	; 0x1406 <sendLocoNetPacketTry+0x72>
    13fc:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <lnState>
      cbi( LN_TMR_INT_ENABLE_REG, LN_TMR_INT_ENABLE_BIT ) ;
    1400:	89 b7       	in	r24, 0x39	; 57
    1402:	8f 7e       	andi	r24, 0xEF	; 239
    }
  }
  sei();  // a delayed start bit interrupt will happen now,
    1404:	89 bf       	out	0x39, r24	; 57
          // a delayed timer interrupt was stalled

  // If the Network is not Idle, don't start the packet
  if (lnState == LN_ST_CD_BACKOFF)
    1406:	78 94       	sei
    1408:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <lnState>
    140c:	81 30       	cpi	r24, 0x01	; 1
  {
    if (lnBitCount < LN_CARRIER_TICKS)   // in carrier detect timer?
    140e:	39 f4       	brne	.+14     	; 0x141e <sendLocoNetPacketTry+0x8a>
    1410:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <lnBitCount>
      return LN_CD_BACKOFF;
    1414:	94 31       	cpi	r25, 0x14	; 20
    1416:	08 f0       	brcs	.+2      	; 0x141a <sendLocoNetPacketTry+0x86>
    1418:	57 c0       	rjmp	.+174    	; 0x14c8 <sendLocoNetPacketTry+0x134>
    141a:	80 e0       	ldi	r24, 0x00	; 0
    else
      return LN_PRIO_BACKOFF;
  }

  if( lnState != LN_ST_IDLE )
    141c:	55 c0       	rjmp	.+170    	; 0x14c8 <sendLocoNetPacketTry+0x134>
    141e:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <lnState>
    1422:	81 11       	cpse	r24, r1
    return LN_NETWORK_BUSY;  // neither idle nor backoff -> busy

  // We need to do this with interrupts off.
  // The last time we check for free net until sending our start bit
  // must be as short as possible, not interrupted.
  cli() ;
    1424:	4e c0       	rjmp	.+156    	; 0x14c2 <sendLocoNetPacketTry+0x12e>
  // Before we do anything else - Disable StartBit Interrupt
  cbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT ) ;
    1426:	f8 94       	cli
    1428:	89 b7       	in	r24, 0x39	; 57
    142a:	8f 7d       	andi	r24, 0xDF	; 223
  if (bit_is_set(LN_SB_INT_STATUS_REG, LN_SB_INT_STATUS_BIT))
    142c:	89 bf       	out	0x39, r24	; 57
    142e:	08 b6       	in	r0, 0x38	; 56
    1430:	05 fe       	sbrs	r0, 5
  {
    // first we disabled it, than before sending the start bit, we found out
    // that somebody was faster by examining the start bit interrupt request flag
    sbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT ) ;
    1432:	06 c0       	rjmp	.+12     	; 0x1440 <sendLocoNetPacketTry+0xac>
    1434:	89 b7       	in	r24, 0x39	; 57
    1436:	80 62       	ori	r24, 0x20	; 32
    sei() ;  // receive now what our rival is sending
    1438:	89 bf       	out	0x39, r24	; 57
    return LN_NETWORK_BUSY;
    143a:	78 94       	sei
    143c:	82 e0       	ldi	r24, 0x02	; 2
  }

  LN_SW_UART_SET_TX_LOW        // Begin the Start Bit
    143e:	44 c0       	rjmp	.+136    	; 0x14c8 <sendLocoNetPacketTry+0x134>
  // added adjustment value for bugfix (Olaf Funke)
#ifdef TX_START_MEASUREMENT
	sbi(TX_MEASUREMENT_PORT, TX_MEASUREMENT_PIN);
#endif
	
  lnCompareTarget = LN_TMR_COUNT_REG + LN_TIMER_TX_RELOAD_PERIOD - LN_TIMER_TX_RELOAD_ADJUST;
    1440:	94 9a       	sbi	0x12, 4	; 18
    1442:	8c b5       	in	r24, 0x2c	; 44
    1444:	9d b5       	in	r25, 0x2d	; 45
    1446:	88 5a       	subi	r24, 0xA8	; 168
    1448:	9e 4f       	sbci	r25, 0xFE	; 254
    144a:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <lnCompareTarget+0x1>
    144e:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <lnCompareTarget>
  LN_TMR_OUTP_CAPT_REG = lnCompareTarget ;
    1452:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <lnCompareTarget>
    1456:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <lnCompareTarget+0x1>
    145a:	9b bd       	out	0x2b, r25	; 43

  sei() ;
    145c:	8a bd       	out	0x2a, r24	; 42

  lnTxData = TxData ;
    145e:	78 94       	sei
    1460:	d0 93 92 01 	sts	0x0192, r29	; 0x800192 <lnTxData+0x1>
    1464:	c0 93 91 01 	sts	0x0191, r28	; 0x800191 <lnTxData>
  lnTxIndex = 0 ;
    1468:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <lnTxIndex>
  lnTxSuccess = 0 ;
    146c:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <lnTxSuccess>

    // Load the first Byte
  lnCurrentByte = TxData->data[ 0 ] ;
    1470:	88 81       	ld	r24, Y
    1472:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <lnCurrentByte>

    // Set the State to Transmit
  lnState = LN_ST_TX ;                      
    1476:	83 e0       	ldi	r24, 0x03	; 3
    1478:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <lnState>

    // Reset the bit counter
  lnBitCount = 0 ;                          
    147c:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <lnBitCount>

    // Clear the current Compare interrupt status bit and enable the Compare interrupt
  sbi(LN_TMR_INT_STATUS_REG, LN_TMR_INT_STATUS_BIT) ;
    1480:	88 b7       	in	r24, 0x38	; 56
    1482:	80 61       	ori	r24, 0x10	; 16
  sbi(LN_TMR_INT_ENABLE_REG, LN_TMR_INT_ENABLE_BIT) ; 
    1484:	88 bf       	out	0x38, r24	; 56
    1486:	89 b7       	in	r24, 0x39	; 57
    1488:	80 61       	ori	r24, 0x10	; 16

  // now busy waiting until the interrupts did the rest
  while (lnState == LN_ST_TX) {}
    148a:	89 bf       	out	0x39, r24	; 57
    148c:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <lnState>
    1490:	83 30       	cpi	r24, 0x03	; 3

  if (lnTxSuccess)
    1492:	e1 f3       	breq	.-8      	; 0x148c <sendLocoNetPacketTry+0xf8>
    1494:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <lnTxSuccess>
    1498:	88 23       	and	r24, r24
  {
    lnRxBuffer->Stats.TxPackets++ ;
    149a:	69 f0       	breq	.+26     	; 0x14b6 <sendLocoNetPacketTry+0x122>
    149c:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <lnRxBuffer>
    14a0:	f0 91 8e 01 	lds	r31, 0x018E	; 0x80018e <lnRxBuffer+0x1>
    14a4:	e8 57       	subi	r30, 0x78	; 120
    14a6:	ff 4f       	sbci	r31, 0xFF	; 255
    14a8:	80 81       	ld	r24, Z
    14aa:	91 81       	ldd	r25, Z+1	; 0x01
    14ac:	01 96       	adiw	r24, 0x01	; 1
    14ae:	91 83       	std	Z+1, r25	; 0x01
    return LN_DONE;
    14b0:	80 83       	st	Z, r24
    14b2:	83 e0       	ldi	r24, 0x03	; 3
  }

  if (lnState == LN_ST_TX_COLLISION)
    14b4:	09 c0       	rjmp	.+18     	; 0x14c8 <sendLocoNetPacketTry+0x134>
    14b6:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <lnState>
    14ba:	82 30       	cpi	r24, 0x02	; 2
  {
    return LN_COLLISION;
  }

  return LN_UNKNOWN_ERROR; // everything else is an error
    14bc:	21 f0       	breq	.+8      	; 0x14c6 <sendLocoNetPacketTry+0x132>
    14be:	85 e0       	ldi	r24, 0x05	; 5
    else
      return LN_PRIO_BACKOFF;
  }

  if( lnState != LN_ST_IDLE )
    return LN_NETWORK_BUSY;  // neither idle nor backoff -> busy
    14c0:	03 c0       	rjmp	.+6      	; 0x14c8 <sendLocoNetPacketTry+0x134>
    14c2:	82 e0       	ldi	r24, 0x02	; 2
    return LN_DONE;
  }

  if (lnState == LN_ST_TX_COLLISION)
  {
    return LN_COLLISION;
    14c4:	01 c0       	rjmp	.+2      	; 0x14c8 <sendLocoNetPacketTry+0x134>
  }

  return LN_UNKNOWN_ERROR; // everything else is an error
}
    14c6:	84 e0       	ldi	r24, 0x04	; 4
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	1f 91       	pop	r17
    14ce:	08 95       	ret

000014d0 <__vector_9>:
volatile byte SlowTimerTicks = 0 ;
volatile byte FastTimerTicks = 0 ;
volatile word DelayTimerTicks = 0 ;

ISR(TIMER0_OVF_vect)
{
    14d0:	1f 92       	push	r1
    14d2:	0f 92       	push	r0
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	0f 92       	push	r0
    14d8:	11 24       	eor	r1, r1
    14da:	8f 93       	push	r24
    14dc:	9f 93       	push	r25
  TCNT0 = (byte) TICK_RELOAD ;
    14de:	84 ee       	ldi	r24, 0xE4	; 228
    14e0:	82 bf       	out	0x32, r24	; 50

  FastTimerTicks++;
    14e2:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <FastTimerTicks>
    14e6:	8f 5f       	subi	r24, 0xFF	; 255
    14e8:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <FastTimerTicks>

  if( ++SlowTimerAccumulator >= 100 )
    14ec:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <SlowTimerAccumulator>
    14f0:	8f 5f       	subi	r24, 0xFF	; 255
    14f2:	84 36       	cpi	r24, 0x64	; 100
    14f4:	18 f4       	brcc	.+6      	; 0x14fc <__vector_9+0x2c>
    14f6:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <SlowTimerAccumulator>
    14fa:	07 c0       	rjmp	.+14     	; 0x150a <__vector_9+0x3a>
  {
    SlowTimerAccumulator = 0 ;
    14fc:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <SlowTimerAccumulator>

    SlowTimerTicks++;
    1500:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <SlowTimerTicks>
    1504:	8f 5f       	subi	r24, 0xFF	; 255
    1506:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <SlowTimerTicks>
  }
	
	if( DelayTimerTicks )
    150a:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <DelayTimerTicks>
    150e:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <DelayTimerTicks+0x1>
    1512:	89 2b       	or	r24, r25
    1514:	49 f0       	breq	.+18     	; 0x1528 <__vector_9+0x58>
		DelayTimerTicks--;
    1516:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <DelayTimerTicks>
    151a:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <DelayTimerTicks+0x1>
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <DelayTimerTicks+0x1>
    1524:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <DelayTimerTicks>
}
    1528:	9f 91       	pop	r25
    152a:	8f 91       	pop	r24
    152c:	0f 90       	pop	r0
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	0f 90       	pop	r0
    1532:	1f 90       	pop	r1
    1534:	18 95       	reti

00001536 <initTimer>:
void initTimer()
{
	#if defined (__AVR_ATmega16__)
	
	    // Get the Current Timer1 Count and Add the offset for the Compare target
	  TCNT0 = (byte) TICK_RELOAD ;
    1536:	84 ee       	ldi	r24, 0xE4	; 228
    1538:	82 bf       	out	0x32, r24	; 50
	
	    // Clear the Overflow interrupt status bit and enable the overflow interrupt
	  sbi(TIFR, TOV0) ;
    153a:	88 b7       	in	r24, 0x38	; 56
    153c:	81 60       	ori	r24, 0x01	; 1
    153e:	88 bf       	out	0x38, r24	; 56
	  sbi(TIMSK, TOIE0) ; 
    1540:	89 b7       	in	r24, 0x39	; 57
    1542:	81 60       	ori	r24, 0x01	; 1
    1544:	89 bf       	out	0x39, r24	; 57
	
	    // Set Timer Clock Source 
	  TCCR0 = (TCCR0 & 0xF8) | TIMER_PRESCALER_CODE ;
    1546:	83 b7       	in	r24, 0x33	; 51
    1548:	88 7f       	andi	r24, 0xF8	; 248
    154a:	84 60       	ori	r24, 0x04	; 4
    154c:	83 bf       	out	0x33, r24	; 51
    154e:	08 95       	ret

00001550 <addTimerAction>:
	#endif	  
	  
}

void addTimerAction( TimerAction *pAction, byte Ticks, byte (*TickAction) (void *UserPointer), void *UserPointer, byte Fast )
{
    1550:	0f 93       	push	r16
    1552:	fc 01       	movw	r30, r24
  byte  StatusReg ;

    // This needs to be done with Interrupts off, save Status reg,
    // disable interrupts and then restore the previous Status reg
    // to enable interrupts again if they were off 
  StatusReg = SREG ;
    1554:	8f b7       	in	r24, 0x3f	; 63
  cli() ;
    1556:	f8 94       	cli

  if(Fast)
    1558:	00 23       	and	r16, r16
    155a:	59 f0       	breq	.+22     	; 0x1572 <addTimerAction+0x22>
  {
    pAction->Next = FastTimerActionList ;
    155c:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <FastTimerActionList>
    1560:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <FastTimerActionList+0x1>
    1564:	b6 83       	std	Z+6, r27	; 0x06
    1566:	a5 83       	std	Z+5, r26	; 0x05
    FastTimerActionList = pAction ;
    1568:	f0 93 a5 00 	sts	0x00A5, r31	; 0x8000a5 <FastTimerActionList+0x1>
    156c:	e0 93 a4 00 	sts	0x00A4, r30	; 0x8000a4 <FastTimerActionList>
    1570:	0a c0       	rjmp	.+20     	; 0x1586 <addTimerAction+0x36>
  }
  else
  {
    pAction->Next = SlowTimerActionList ;
    1572:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <SlowTimerActionList>
    1576:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <SlowTimerActionList+0x1>
    157a:	b6 83       	std	Z+6, r27	; 0x06
    157c:	a5 83       	std	Z+5, r26	; 0x05
    SlowTimerActionList = pAction ;
    157e:	f0 93 a7 00 	sts	0x00A7, r31	; 0x8000a7 <SlowTimerActionList+0x1>
    1582:	e0 93 a6 00 	sts	0x00A6, r30	; 0x8000a6 <SlowTimerActionList>
  }

  pAction->Ticks = Ticks ;
    1586:	60 83       	st	Z, r22
  pAction->TickAction = TickAction ;
    1588:	54 83       	std	Z+4, r21	; 0x04
    158a:	43 83       	std	Z+3, r20	; 0x03
  pAction->UserPointer = UserPointer ;
    158c:	32 83       	std	Z+2, r19	; 0x02
    158e:	21 83       	std	Z+1, r18	; 0x01
  
    // Enable Interrupts if they were on to start with
  SREG = StatusReg ;
    1590:	8f bf       	out	0x3f, r24	; 63
}
    1592:	0f 91       	pop	r16
    1594:	08 95       	ret

00001596 <resetTimerAction>:



void resetTimerAction( TimerAction *pAction, byte Ticks )
{
  pAction->Ticks = Ticks ;
    1596:	fc 01       	movw	r30, r24
    1598:	60 83       	st	Z, r22
    159a:	08 95       	ret

0000159c <delayTimer>:
}

void delayTimer( word delayTicks )
{
	DelayTimerTicks = delayTicks ;
    159c:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <DelayTimerTicks+0x1>
    15a0:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <DelayTimerTicks>
	
	while( DelayTimerTicks )
    15a4:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <DelayTimerTicks>
    15a8:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <DelayTimerTicks+0x1>
    15ac:	89 2b       	or	r24, r25
    15ae:	d1 f7       	brne	.-12     	; 0x15a4 <delayTimer+0x8>
		; // Sit and wait for the interrupt handler to decrement the ticks to 0
}
    15b0:	08 95       	ret

000015b2 <processTimerActions>:

void processTimerActions(void)
{
    15b2:	0f 93       	push	r16
    15b4:	1f 93       	push	r17
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
  byte SlowTicks ;
  
    // This needs to be done with Interrupts off, save Status reg,
    // disable interrupts and then restore the previous Status reg
    // to enable interrupts again if they were off 
  StatusReg = SREG ;
    15ba:	8f b7       	in	r24, 0x3f	; 63
  cli() ;
    15bc:	f8 94       	cli

  FastTicks = FastTimerTicks ;   
    15be:	00 91 a1 00 	lds	r16, 0x00A1	; 0x8000a1 <FastTimerTicks>
  FastTimerTicks = 0 ;
    15c2:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <FastTimerTicks>

  SlowTicks = SlowTimerTicks ;   
    15c6:	10 91 a2 00 	lds	r17, 0x00A2	; 0x8000a2 <SlowTimerTicks>
  SlowTimerTicks = 0 ;
    15ca:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <SlowTimerTicks>

    // Enable Interrupts if they were on to start with
  SREG = StatusReg ;
    15ce:	8f bf       	out	0x3f, r24	; 63

  if( FastTicks && FastTimerActionList )
    15d0:	00 23       	and	r16, r16
    15d2:	01 f1       	breq	.+64     	; 0x1614 <processTimerActions+0x62>
    15d4:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <FastTimerActionList>
    15d8:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <FastTimerActionList+0x1>
    15dc:	89 2b       	or	r24, r25
    15de:	d1 f0       	breq	.+52     	; 0x1614 <processTimerActions+0x62>
  {
    while( FastTicks-- )
    {
      pAction = FastTimerActionList ;
    15e0:	c0 91 a4 00 	lds	r28, 0x00A4	; 0x8000a4 <FastTimerActionList>
    15e4:	d0 91 a5 00 	lds	r29, 0x00A5	; 0x8000a5 <FastTimerActionList+0x1>

      while( pAction )
    15e8:	20 97       	sbiw	r28, 0x00	; 0
    15ea:	91 f0       	breq	.+36     	; 0x1610 <processTimerActions+0x5e>
      {
        if( pAction->Ticks )
    15ec:	88 81       	ld	r24, Y
    15ee:	88 23       	and	r24, r24
    15f0:	51 f0       	breq	.+20     	; 0x1606 <processTimerActions+0x54>
        {
           pAction->Ticks--;
    15f2:	81 50       	subi	r24, 0x01	; 1
    15f4:	88 83       	st	Y, r24
          // If we have gone from > 0 to 0 then set done and possibly reload
          if( !pAction->Ticks )
    15f6:	81 11       	cpse	r24, r1
    15f8:	06 c0       	rjmp	.+12     	; 0x1606 <processTimerActions+0x54>
            pAction->Ticks = (*pAction->TickAction) ( pAction->UserPointer ) ;
    15fa:	eb 81       	ldd	r30, Y+3	; 0x03
    15fc:	fc 81       	ldd	r31, Y+4	; 0x04
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	9a 81       	ldd	r25, Y+2	; 0x02
    1602:	09 95       	icall
    1604:	88 83       	st	Y, r24
        }

        pAction = pAction->Next ;
    1606:	0d 80       	ldd	r0, Y+5	; 0x05
    1608:	de 81       	ldd	r29, Y+6	; 0x06
    160a:	c0 2d       	mov	r28, r0
  {
    while( FastTicks-- )
    {
      pAction = FastTimerActionList ;

      while( pAction )
    160c:	20 97       	sbiw	r28, 0x00	; 0
    160e:	71 f7       	brne	.-36     	; 0x15ec <processTimerActions+0x3a>
    1610:	01 50       	subi	r16, 0x01	; 1
    // Enable Interrupts if they were on to start with
  SREG = StatusReg ;

  if( FastTicks && FastTimerActionList )
  {
    while( FastTicks-- )
    1612:	31 f7       	brne	.-52     	; 0x15e0 <processTimerActions+0x2e>
        pAction = pAction->Next ;
      }
    }
  }

  if( SlowTicks && SlowTimerActionList )
    1614:	11 23       	and	r17, r17
    1616:	01 f1       	breq	.+64     	; 0x1658 <processTimerActions+0xa6>
    1618:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <SlowTimerActionList>
    161c:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <SlowTimerActionList+0x1>
    1620:	89 2b       	or	r24, r25
    1622:	d1 f0       	breq	.+52     	; 0x1658 <processTimerActions+0xa6>
  {
    while( SlowTicks-- )
    {
      pAction = SlowTimerActionList ;
    1624:	c0 91 a6 00 	lds	r28, 0x00A6	; 0x8000a6 <SlowTimerActionList>
    1628:	d0 91 a7 00 	lds	r29, 0x00A7	; 0x8000a7 <SlowTimerActionList+0x1>

      while( pAction )
    162c:	20 97       	sbiw	r28, 0x00	; 0
    162e:	91 f0       	breq	.+36     	; 0x1654 <processTimerActions+0xa2>
      {
        if( pAction->Ticks )
    1630:	88 81       	ld	r24, Y
    1632:	88 23       	and	r24, r24
    1634:	51 f0       	breq	.+20     	; 0x164a <processTimerActions+0x98>
        {
           pAction->Ticks--;
    1636:	81 50       	subi	r24, 0x01	; 1
    1638:	88 83       	st	Y, r24
          // If we have gone from > 0 to 0 then set done and possibly reload
          if( !pAction->Ticks )
    163a:	81 11       	cpse	r24, r1
    163c:	06 c0       	rjmp	.+12     	; 0x164a <processTimerActions+0x98>
            pAction->Ticks = (*pAction->TickAction) ( pAction->UserPointer ) ;
    163e:	eb 81       	ldd	r30, Y+3	; 0x03
    1640:	fc 81       	ldd	r31, Y+4	; 0x04
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	9a 81       	ldd	r25, Y+2	; 0x02
    1646:	09 95       	icall
    1648:	88 83       	st	Y, r24
        }

        pAction = pAction->Next ;
    164a:	0d 80       	ldd	r0, Y+5	; 0x05
    164c:	de 81       	ldd	r29, Y+6	; 0x06
    164e:	c0 2d       	mov	r28, r0
  {
    while( SlowTicks-- )
    {
      pAction = SlowTimerActionList ;

      while( pAction )
    1650:	20 97       	sbiw	r28, 0x00	; 0
    1652:	71 f7       	brne	.-36     	; 0x1630 <processTimerActions+0x7e>
    1654:	11 50       	subi	r17, 0x01	; 1
    }
  }

  if( SlowTicks && SlowTimerActionList )
  {
    while( SlowTicks-- )
    1656:	31 f7       	brne	.-52     	; 0x1624 <processTimerActions+0x72>

        pAction = pAction->Next ;
      }
    }
  }
}                                                                                                                 
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	08 95       	ret

00001662 <recvLnMsg>:
}

LnBufStats *getLnBufStats( LnBuf *Buffer )
{
	return 0 ;
}
    1662:	2f 92       	push	r2
    1664:	3f 92       	push	r3
    1666:	4f 92       	push	r4
    1668:	5f 92       	push	r5
    166a:	6f 92       	push	r6
    166c:	7f 92       	push	r7
    166e:	8f 92       	push	r8
    1670:	9f 92       	push	r9
    1672:	af 92       	push	r10
    1674:	bf 92       	push	r11
    1676:	cf 92       	push	r12
    1678:	df 92       	push	r13
    167a:	ef 92       	push	r14
    167c:	ff 92       	push	r15
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	00 d0       	rcall	.+0      	; 0x1688 <recvLnMsg+0x26>
    1688:	00 d0       	rcall	.+0      	; 0x168a <recvLnMsg+0x28>
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	5c 01       	movw	r10, r24
    1690:	fc 01       	movw	r30, r24
    1692:	ef 57       	subi	r30, 0x7F	; 127
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	90 81       	ld	r25, Z
    1698:	31 97       	sbiw	r30, 0x01	; 1
    169a:	80 81       	ld	r24, Z
    169c:	98 17       	cp	r25, r24
    169e:	09 f4       	brne	.+2      	; 0x16a2 <recvLnMsg+0x40>
    16a0:	cc c0       	rjmp	.+408    	; 0x183a <recvLnMsg+0x1d8>
    16a2:	85 01       	movw	r16, r10
    16a4:	0e 57       	subi	r16, 0x7E	; 126
    16a6:	1f 4f       	sbci	r17, 0xFF	; 255
    16a8:	65 01       	movw	r12, r10
    16aa:	23 e8       	ldi	r18, 0x83	; 131
    16ac:	c2 0e       	add	r12, r18
    16ae:	d1 1c       	adc	r13, r1
    16b0:	75 01       	movw	r14, r10
    16b2:	34 e8       	ldi	r19, 0x84	; 132
    16b4:	e3 0e       	add	r14, r19
    16b6:	f1 1c       	adc	r15, r1
    16b8:	35 01       	movw	r6, r10
    16ba:	87 e8       	ldi	r24, 0x87	; 135
    16bc:	68 0e       	add	r6, r24
    16be:	71 1c       	adc	r7, r1
    16c0:	68 94       	set
    16c2:	22 24       	eor	r2, r2
    16c4:	27 f8       	bld	r2, 7
    16c6:	4f 01       	movw	r8, r30
    16c8:	95 01       	movw	r18, r10
    16ca:	2f 57       	subi	r18, 0x7F	; 127
    16cc:	3f 4f       	sbci	r19, 0xFF	; 255
    16ce:	3c 83       	std	Y+4, r19	; 0x04
    16d0:	2b 83       	std	Y+3, r18	; 0x03
    16d2:	35 96       	adiw	r30, 0x05	; 5
    16d4:	fa 83       	std	Y+2, r31	; 0x02
    16d6:	e9 83       	std	Y+1, r30	; 0x01
    16d8:	f5 01       	movw	r30, r10
    16da:	e9 0f       	add	r30, r25
    16dc:	f1 1d       	adc	r31, r1
    16de:	30 80       	ld	r3, Z
    16e0:	33 20       	and	r3, r3
    16e2:	d4 f4       	brge	.+52     	; 0x1718 <recvLnMsg+0xb6>
    16e4:	f8 01       	movw	r30, r16
    16e6:	80 81       	ld	r24, Z
    16e8:	89 17       	cp	r24, r25
    16ea:	21 f0       	breq	.+8      	; 0x16f4 <recvLnMsg+0x92>
    16ec:	f3 01       	movw	r30, r6
    16ee:	80 81       	ld	r24, Z
    16f0:	8f 5f       	subi	r24, 0xFF	; 255
    16f2:	80 83       	st	Z, r24
    16f4:	f8 01       	movw	r30, r16
    16f6:	90 83       	st	Z, r25
    16f8:	2f ef       	ldi	r18, 0xFF	; 255
    16fa:	f6 01       	movw	r30, r12
    16fc:	20 83       	st	Z, r18
    16fe:	83 2d       	mov	r24, r3
    1700:	80 76       	andi	r24, 0x60	; 96
    1702:	80 36       	cpi	r24, 0x60	; 96
    1704:	09 f4       	brne	.+2      	; 0x1708 <recvLnMsg+0xa6>
    1706:	9f c0       	rjmp	.+318    	; 0x1846 <recvLnMsg+0x1e4>
    1708:	82 95       	swap	r24
    170a:	8f 70       	andi	r24, 0x0F	; 15
    170c:	8e 5f       	subi	r24, 0xFE	; 254
    170e:	f7 01       	movw	r30, r14
    1710:	80 83       	st	Z, r24
    1712:	81 11       	cpse	r24, r1
    1714:	06 c0       	rjmp	.+12     	; 0x1722 <recvLnMsg+0xc0>
    1716:	51 c0       	rjmp	.+162    	; 0x17ba <recvLnMsg+0x158>
    1718:	f7 01       	movw	r30, r14
    171a:	80 81       	ld	r24, Z
    171c:	81 11       	cpse	r24, r1
    171e:	4d c0       	rjmp	.+154    	; 0x17ba <recvLnMsg+0x158>
    1720:	30 82       	st	Z, r3
    1722:	f8 01       	movw	r30, r16
    1724:	20 81       	ld	r18, Z
    1726:	f7 01       	movw	r30, r14
    1728:	30 81       	ld	r19, Z
    172a:	82 2f       	mov	r24, r18
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	83 0f       	add	r24, r19
    1730:	91 1d       	adc	r25, r1
    1732:	81 38       	cpi	r24, 0x81	; 129
    1734:	91 05       	cpc	r25, r1
    1736:	0c f4       	brge	.+2      	; 0x173a <recvLnMsg+0xd8>
    1738:	40 c0       	rjmp	.+128    	; 0x17ba <recvLnMsg+0x158>
    173a:	42 2c       	mov	r4, r2
    173c:	42 1a       	sub	r4, r18
    173e:	f8 94       	cli
    1740:	f4 01       	movw	r30, r8
    1742:	40 81       	ld	r20, Z
    1744:	eb 81       	ldd	r30, Y+3	; 0x03
    1746:	fc 81       	ldd	r31, Y+4	; 0x04
    1748:	80 81       	ld	r24, Z
    174a:	84 17       	cp	r24, r20
    174c:	40 f4       	brcc	.+16     	; 0x175e <recvLnMsg+0xfc>
    174e:	f8 01       	movw	r30, r16
    1750:	80 81       	ld	r24, Z
    1752:	f4 2f       	mov	r31, r20
    1754:	f8 1b       	sub	r31, r24
    1756:	8f 2f       	mov	r24, r31
    1758:	f4 01       	movw	r30, r8
    175a:	80 83       	st	Z, r24
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <recvLnMsg+0x104>
    175e:	84 2d       	mov	r24, r4
    1760:	84 0f       	add	r24, r20
    1762:	f4 01       	movw	r30, r8
    1764:	80 83       	st	Z, r24
    1766:	78 94       	sei
    1768:	eb 81       	ldd	r30, Y+3	; 0x03
    176a:	fc 81       	ldd	r31, Y+4	; 0x04
    176c:	80 81       	ld	r24, Z
    176e:	48 17       	cp	r20, r24
    1770:	80 f4       	brcc	.+32     	; 0x1792 <recvLnMsg+0x130>
    1772:	51 2c       	mov	r5, r1
    1774:	50 e0       	ldi	r21, 0x00	; 0
    1776:	b5 01       	movw	r22, r10
    1778:	c5 01       	movw	r24, r10
    177a:	84 0d       	add	r24, r4
    177c:	95 1d       	adc	r25, r5
    177e:	ef d0       	rcall	.+478    	; 0x195e <memcpy>
    1780:	f8 01       	movw	r30, r16
    1782:	80 81       	ld	r24, Z
    1784:	b5 01       	movw	r22, r10
    1786:	68 0f       	add	r22, r24
    1788:	71 1d       	adc	r23, r1
    178a:	a2 01       	movw	r20, r4
    178c:	c5 01       	movw	r24, r10
    178e:	e7 d0       	rcall	.+462    	; 0x195e <memcpy>
    1790:	09 c0       	rjmp	.+18     	; 0x17a4 <recvLnMsg+0x142>
    1792:	f8 01       	movw	r30, r16
    1794:	80 81       	ld	r24, Z
    1796:	48 1b       	sub	r20, r24
    1798:	50 e0       	ldi	r21, 0x00	; 0
    179a:	b5 01       	movw	r22, r10
    179c:	68 0f       	add	r22, r24
    179e:	71 1d       	adc	r23, r1
    17a0:	c5 01       	movw	r24, r10
    17a2:	dd d0       	rcall	.+442    	; 0x195e <memcpy>
    17a4:	eb 81       	ldd	r30, Y+3	; 0x03
    17a6:	fc 81       	ldd	r31, Y+4	; 0x04
    17a8:	80 81       	ld	r24, Z
    17aa:	f8 01       	movw	r30, r16
    17ac:	90 81       	ld	r25, Z
    17ae:	89 1b       	sub	r24, r25
    17b0:	eb 81       	ldd	r30, Y+3	; 0x03
    17b2:	fc 81       	ldd	r31, Y+4	; 0x04
    17b4:	80 83       	st	Z, r24
    17b6:	f8 01       	movw	r30, r16
    17b8:	10 82       	st	Z, r1
    17ba:	eb 81       	ldd	r30, Y+3	; 0x03
    17bc:	fc 81       	ldd	r31, Y+4	; 0x04
    17be:	80 81       	ld	r24, Z
    17c0:	8f 5f       	subi	r24, 0xFF	; 255
    17c2:	80 83       	st	Z, r24
    17c4:	f8 01       	movw	r30, r16
    17c6:	90 81       	ld	r25, Z
    17c8:	28 2f       	mov	r18, r24
    17ca:	29 1b       	sub	r18, r25
    17cc:	88 23       	and	r24, r24
    17ce:	1c f4       	brge	.+6      	; 0x17d6 <recvLnMsg+0x174>
    17d0:	eb 81       	ldd	r30, Y+3	; 0x03
    17d2:	fc 81       	ldd	r31, Y+4	; 0x04
    17d4:	10 82       	st	Z, r1
    17d6:	f7 01       	movw	r30, r14
    17d8:	80 81       	ld	r24, Z
    17da:	28 13       	cpse	r18, r24
    17dc:	20 c0       	rjmp	.+64     	; 0x181e <recvLnMsg+0x1bc>
    17de:	f6 01       	movw	r30, r12
    17e0:	80 81       	ld	r24, Z
    17e2:	38 12       	cpse	r3, r24
    17e4:	13 c0       	rjmp	.+38     	; 0x180c <recvLnMsg+0x1aa>
    17e6:	95 01       	movw	r18, r10
    17e8:	29 0f       	add	r18, r25
    17ea:	31 1d       	adc	r19, r1
    17ec:	e9 81       	ldd	r30, Y+1	; 0x01
    17ee:	fa 81       	ldd	r31, Y+2	; 0x02
    17f0:	80 81       	ld	r24, Z
    17f2:	91 81       	ldd	r25, Z+1	; 0x01
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	91 83       	std	Z+1, r25	; 0x01
    17f8:	80 83       	st	Z, r24
    17fa:	eb 81       	ldd	r30, Y+3	; 0x03
    17fc:	fc 81       	ldd	r31, Y+4	; 0x04
    17fe:	80 81       	ld	r24, Z
    1800:	f8 01       	movw	r30, r16
    1802:	80 83       	st	Z, r24
    1804:	21 15       	cp	r18, r1
    1806:	31 05       	cpc	r19, r1
    1808:	51 f0       	breq	.+20     	; 0x181e <recvLnMsg+0x1bc>
    180a:	1a c0       	rjmp	.+52     	; 0x1840 <recvLnMsg+0x1de>
    180c:	f3 01       	movw	r30, r6
    180e:	80 81       	ld	r24, Z
    1810:	8f 5f       	subi	r24, 0xFF	; 255
    1812:	80 83       	st	Z, r24
    1814:	eb 81       	ldd	r30, Y+3	; 0x03
    1816:	fc 81       	ldd	r31, Y+4	; 0x04
    1818:	80 81       	ld	r24, Z
    181a:	f8 01       	movw	r30, r16
    181c:	80 83       	st	Z, r24
    181e:	f6 01       	movw	r30, r12
    1820:	80 81       	ld	r24, Z
    1822:	38 26       	eor	r3, r24
    1824:	30 82       	st	Z, r3
    1826:	eb 81       	ldd	r30, Y+3	; 0x03
    1828:	fc 81       	ldd	r31, Y+4	; 0x04
    182a:	90 81       	ld	r25, Z
    182c:	f4 01       	movw	r30, r8
    182e:	80 81       	ld	r24, Z
    1830:	98 13       	cpse	r25, r24
    1832:	52 cf       	rjmp	.-348    	; 0x16d8 <recvLnMsg+0x76>
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	09 c0       	rjmp	.+18     	; 0x184c <recvLnMsg+0x1ea>
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	06 c0       	rjmp	.+12     	; 0x184c <recvLnMsg+0x1ea>
    1840:	82 2f       	mov	r24, r18
    1842:	93 2f       	mov	r25, r19
    1844:	03 c0       	rjmp	.+6      	; 0x184c <recvLnMsg+0x1ea>
    1846:	f7 01       	movw	r30, r14
    1848:	10 82       	st	Z, r1
    184a:	b7 cf       	rjmp	.-146    	; 0x17ba <recvLnMsg+0x158>
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	1f 91       	pop	r17
    185a:	0f 91       	pop	r16
    185c:	ff 90       	pop	r15
    185e:	ef 90       	pop	r14
    1860:	df 90       	pop	r13
    1862:	cf 90       	pop	r12
    1864:	bf 90       	pop	r11
    1866:	af 90       	pop	r10
    1868:	9f 90       	pop	r9
    186a:	8f 90       	pop	r8
    186c:	7f 90       	pop	r7
    186e:	6f 90       	pop	r6
    1870:	5f 90       	pop	r5
    1872:	4f 90       	pop	r4
    1874:	3f 90       	pop	r3
    1876:	2f 90       	pop	r2
    1878:	08 95       	ret

0000187a <getLnMsgSize>:

byte getLnMsgSize( volatile lnMsg * Msg )
{
    187a:	fc 01       	movw	r30, r24
	return ( ( Msg->sz.command & (byte)0x60 ) == (byte)0x60 ) ? Msg->sz.mesg_size : ( ( Msg->sz.command & (byte)0x60 ) >> (byte)4 ) + 2 ;
    187c:	90 81       	ld	r25, Z
    187e:	90 76       	andi	r25, 0x60	; 96
    1880:	90 36       	cpi	r25, 0x60	; 96
    1882:	11 f4       	brne	.+4      	; 0x1888 <getLnMsgSize+0xe>
    1884:	81 81       	ldd	r24, Z+1	; 0x01
    1886:	08 95       	ret
    1888:	80 81       	ld	r24, Z
    188a:	80 76       	andi	r24, 0x60	; 96
    188c:	82 95       	swap	r24
    188e:	8f 70       	andi	r24, 0x0F	; 15
    1890:	8e 5f       	subi	r24, 0xFE	; 254
}
    1892:	08 95       	ret

00001894 <initLocoNet>:
static LnBuf *pstLnRxBuffer;  // this queue eats received LN messages


void initLocoNet(LnBuf *RxBuffer)
{
	pstLnRxBuffer = RxBuffer;
    1894:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <pstLnRxBuffer+0x1>
    1898:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <pstLnRxBuffer>
	initLocoNetHardware(RxBuffer);
    189c:	66 cd       	rjmp	.-1332   	; 0x136a <initLocoNetHardware>
    189e:	08 95       	ret

000018a0 <recvLocoNetPacket>:
}


lnMsg * recvLocoNetPacket( void )
{
	return recvLnMsg(pstLnRxBuffer);
    18a0:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <pstLnRxBuffer>
    18a4:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <pstLnRxBuffer+0x1>
    18a8:	dc ce       	rjmp	.-584    	; 0x1662 <recvLnMsg>
}
    18aa:	08 95       	ret

000018ac <sendLocoNetPacket>:


#define   LN_TX_RETRIES_MAX  25
// this function should be moved to a hardware independant module
LN_STATUS sendLocoNetPacket( lnMsg *punTxData )
{
    18ac:	df 92       	push	r13
    18ae:	ef 92       	push	r14
    18b0:	ff 92       	push	r15
    18b2:	0f 93       	push	r16
    18b4:	1f 93       	push	r17
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	8c 01       	movw	r16, r24

      if (enReturn == LN_DONE)  // success?
        return LN_DONE;

      if (enReturn == LN_PRIO_BACKOFF)
        ucWaitForEnterBackoff = 0; // now entered backoff -> next state != LN_BACKOFF is worth incrementing the try counter
    18bc:	0f 2e       	mov	r0, r31
    18be:	f9 e1       	ldi	r31, 0x19	; 25
    18c0:	ef 2e       	mov	r14, r31
    18c2:	f0 2d       	mov	r31, r0
#define   LN_TX_RETRIES_MAX  25
// this function should be moved to a hardware independant module
LN_STATUS sendLocoNetPacket( lnMsg *punTxData )
{
  unsigned char ucTry;
  unsigned char ucPrioDelay = LN_BACKOFF_INITIAL;
    18c4:	ce e2       	ldi	r28, 0x2E	; 46

      if (enReturn == LN_DONE)  // success?
        return LN_DONE;

      if (enReturn == LN_PRIO_BACKOFF)
        ucWaitForEnterBackoff = 0; // now entered backoff -> next state != LN_BACKOFF is worth incrementing the try counter
    18c6:	dd 24       	eor	r13, r13
    18c8:	d3 94       	inc	r13
    18ca:	f1 2c       	mov	r15, r1
    18cc:	13 c0       	rjmp	.+38     	; 0x18f4 <sendLocoNetPacket+0x48>
    18ce:	df 2d       	mov	r29, r15

    // wait previous traffic and than prio delay and than try tx
    ucWaitForEnterBackoff = 1;  // don't want to abort do/while loop before
    do                          // we did not see the backoff state once
    {
      enReturn = sendLocoNetPacketTry(punTxData, ucPrioDelay);
    18d0:	6c 2f       	mov	r22, r28
    18d2:	c8 01       	movw	r24, r16
    18d4:	5f dd       	rcall	.-1346   	; 0x1394 <sendLocoNetPacketTry>

      if (enReturn == LN_DONE)  // success?
    18d6:	83 30       	cpi	r24, 0x03	; 3
    18d8:	d1 f0       	breq	.+52     	; 0x190e <sendLocoNetPacket+0x62>
        return LN_DONE;

      if (enReturn == LN_PRIO_BACKOFF)
    18da:	81 30       	cpi	r24, 0x01	; 1
    18dc:	c1 f3       	breq	.-16     	; 0x18ce <sendLocoNetPacket+0x22>
        ucWaitForEnterBackoff = 0; // now entered backoff -> next state != LN_BACKOFF is worth incrementing the try counter
    }
    while ((enReturn == LN_CD_BACKOFF) ||                             // waiting CD backoff
           (enReturn == LN_PRIO_BACKOFF) ||                           // waiting master+prio backoff
           ((enReturn == LN_NETWORK_BUSY) && ucWaitForEnterBackoff)); // or within any traffic unfinished
    18de:	c0 f3       	brcs	.-16     	; 0x18d0 <sendLocoNetPacket+0x24>

      if (enReturn == LN_PRIO_BACKOFF)
        ucWaitForEnterBackoff = 0; // now entered backoff -> next state != LN_BACKOFF is worth incrementing the try counter
    }
    while ((enReturn == LN_CD_BACKOFF) ||                             // waiting CD backoff
           (enReturn == LN_PRIO_BACKOFF) ||                           // waiting master+prio backoff
    18e0:	82 30       	cpi	r24, 0x02	; 2
    18e2:	11 f4       	brne	.+4      	; 0x18e8 <sendLocoNetPacket+0x3c>
           ((enReturn == LN_NETWORK_BUSY) && ucWaitForEnterBackoff)); // or within any traffic unfinished
    18e4:	d1 11       	cpse	r29, r1
    18e6:	f4 cf       	rjmp	.-24     	; 0x18d0 <sendLocoNetPacket+0x24>
    // failed -> next try going to higher prio = smaller prio delay
    if (ucPrioDelay > LN_BACKOFF_MIN)
    18e8:	cb 31       	cpi	r28, 0x1B	; 27
    18ea:	08 f0       	brcs	.+2      	; 0x18ee <sendLocoNetPacket+0x42>
      ucPrioDelay--;
    18ec:	c1 50       	subi	r28, 0x01	; 1
    18ee:	ea 94       	dec	r14
  unsigned char ucTry;
  unsigned char ucPrioDelay = LN_BACKOFF_INITIAL;
  LN_STATUS enReturn;
  unsigned char ucWaitForEnterBackoff;

  for (ucTry = 0; ucTry < LN_TX_RETRIES_MAX; ucTry++)
    18f0:	ee 20       	and	r14, r14
    18f2:	11 f0       	breq	.+4      	; 0x18f8 <sendLocoNetPacket+0x4c>

      if (enReturn == LN_DONE)  // success?
        return LN_DONE;

      if (enReturn == LN_PRIO_BACKOFF)
        ucWaitForEnterBackoff = 0; // now entered backoff -> next state != LN_BACKOFF is worth incrementing the try counter
    18f4:	dd 2d       	mov	r29, r13
    18f6:	ec cf       	rjmp	.-40     	; 0x18d0 <sendLocoNetPacket+0x24>
           ((enReturn == LN_NETWORK_BUSY) && ucWaitForEnterBackoff)); // or within any traffic unfinished
    // failed -> next try going to higher prio = smaller prio delay
    if (ucPrioDelay > LN_BACKOFF_MIN)
      ucPrioDelay--;
  }
  pstLnRxBuffer->Stats.TxError++ ;
    18f8:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <pstLnRxBuffer>
    18fc:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <pstLnRxBuffer+0x1>
    1900:	e6 57       	subi	r30, 0x76	; 118
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	80 81       	ld	r24, Z
    1906:	8f 5f       	subi	r24, 0xFF	; 255
    1908:	80 83       	st	Z, r24
  return LN_RETRY_ERROR;
    190a:	86 e0       	ldi	r24, 0x06	; 6
    190c:	01 c0       	rjmp	.+2      	; 0x1910 <sendLocoNetPacket+0x64>
    do                          // we did not see the backoff state once
    {
      enReturn = sendLocoNetPacketTry(punTxData, ucPrioDelay);

      if (enReturn == LN_DONE)  // success?
        return LN_DONE;
    190e:	83 e0       	ldi	r24, 0x03	; 3
    if (ucPrioDelay > LN_BACKOFF_MIN)
      ucPrioDelay--;
  }
  pstLnRxBuffer->Stats.TxError++ ;
  return LN_RETRY_ERROR;
}
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	1f 91       	pop	r17
    1916:	0f 91       	pop	r16
    1918:	ff 90       	pop	r15
    191a:	ef 90       	pop	r14
    191c:	df 90       	pop	r13
    191e:	08 95       	ret

00001920 <sendLocoNet4BytePacket>:


LN_STATUS sendLocoNet4BytePacket( byte OpCode, byte Data1, byte Data2 )
{
    1920:	cf 93       	push	r28
    1922:	df 93       	push	r29
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	60 97       	sbiw	r28, 0x10	; 16
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	de bf       	out	0x3e, r29	; 62
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	cd bf       	out	0x3d, r28	; 61
  lnMsg SendPacket ;

  SendPacket.data[ 0 ] = OpCode ;
    1934:	89 83       	std	Y+1, r24	; 0x01
  SendPacket.data[ 1 ] = Data1 ;
    1936:	6a 83       	std	Y+2, r22	; 0x02
  SendPacket.data[ 2 ] = Data2 ;
    1938:	4b 83       	std	Y+3, r20	; 0x03

  return sendLocoNetPacket( &SendPacket ) ;
    193a:	ce 01       	movw	r24, r28
    193c:	01 96       	adiw	r24, 0x01	; 1
    193e:	b6 df       	rcall	.-148    	; 0x18ac <sendLocoNetPacket>
}
    1940:	60 96       	adiw	r28, 0x10	; 16
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	de bf       	out	0x3e, r29	; 62
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	cd bf       	out	0x3d, r28	; 61
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	08 95       	ret

00001952 <__tablejump2__>:
    1952:	ee 0f       	add	r30, r30
    1954:	ff 1f       	adc	r31, r31
    1956:	05 90       	lpm	r0, Z+
    1958:	f4 91       	lpm	r31, Z
    195a:	e0 2d       	mov	r30, r0
    195c:	09 94       	ijmp

0000195e <memcpy>:
    195e:	fb 01       	movw	r30, r22
    1960:	dc 01       	movw	r26, r24
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <memcpy+0xa>
    1964:	01 90       	ld	r0, Z+
    1966:	0d 92       	st	X+, r0
    1968:	41 50       	subi	r20, 0x01	; 1
    196a:	50 40       	sbci	r21, 0x00	; 0
    196c:	d8 f7       	brcc	.-10     	; 0x1964 <memcpy+0x6>
    196e:	08 95       	ret

00001970 <eeprom_read_byte>:
    1970:	e1 99       	sbic	0x1c, 1	; 28
    1972:	fe cf       	rjmp	.-4      	; 0x1970 <eeprom_read_byte>
    1974:	9f bb       	out	0x1f, r25	; 31
    1976:	8e bb       	out	0x1e, r24	; 30
    1978:	e0 9a       	sbi	0x1c, 0	; 28
    197a:	99 27       	eor	r25, r25
    197c:	8d b3       	in	r24, 0x1d	; 29
    197e:	08 95       	ret

00001980 <eeprom_write_byte>:
    1980:	26 2f       	mov	r18, r22

00001982 <eeprom_write_r18>:
    1982:	e1 99       	sbic	0x1c, 1	; 28
    1984:	fe cf       	rjmp	.-4      	; 0x1982 <eeprom_write_r18>
    1986:	9f bb       	out	0x1f, r25	; 31
    1988:	8e bb       	out	0x1e, r24	; 30
    198a:	2d bb       	out	0x1d, r18	; 29
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	e2 9a       	sbi	0x1c, 2	; 28
    1992:	e1 9a       	sbi	0x1c, 1	; 28
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	01 96       	adiw	r24, 0x01	; 1
    1998:	08 95       	ret

0000199a <_exit>:
    199a:	f8 94       	cli

0000199c <__stop_program>:
    199c:	ff cf       	rjmp	.-2      	; 0x199c <__stop_program>
